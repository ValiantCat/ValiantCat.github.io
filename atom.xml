<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茶茶的小屋</title>
  <subtitle>iOS 开发， Swift，Objective-C,OC</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://valiantcat.com/"/>
  <updated>2017-11-04T09:33:42.000Z</updated>
  <id>http://valiantcat.com/</id>
  
  <author>
    <name>寒哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-APP-运行时防Crash工具XXShield练就</title>
    <link href="http://valiantcat.com/2017/11/04/iOS-APP-%E8%BF%90%E8%A1%8C%E6%97%B6%E9%98%B2Crash%E5%B7%A5%E5%85%B7XXShield%E7%BB%83%E5%B0%B1/"/>
    <id>http://valiantcat.com/2017/11/04/iOS-APP-运行时防Crash工具XXShield练就/</id>
    <published>2017-11-04T03:32:29.000Z</published>
    <updated>2017-11-04T09:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->
<!-- toc -->
<ul>
<li><a href="#前言">前言</a></li>
<li><a href="#目前已经实现的功能">目前已经实现的功能</a></li>
<li><a href="#1-unrecoginzed-selector-crash">1 Unrecoginzed Selector Crash</a><ul>
<li><a href="#出现原因">出现原因</a></li>
<li><a href="#解决办法">解决办法</a></li>
</ul>
</li>
<li><a href="#2-kvo-crash">2 KVO Crash</a><ul>
<li><a href="#出现原因-1">出现原因</a></li>
<li><a href="#解决办法-1">解决办法</a></li>
</ul>
</li>
<li><a href="#3-container-crash">3 Container Crash</a><ul>
<li><a href="#出现原因-2">出现原因</a></li>
<li><a href="#解决办法-2">解决办法</a></li>
</ul>
</li>
<li><a href="#4-nsnotification-crash">4 NSNotification Crash</a><ul>
<li><a href="#出现原因-3">出现原因</a></li>
<li><a href="#解决办法-3">解决办法</a></li>
</ul>
</li>
<li><a href="#5-nsnull-crash">5 NSNull Crash</a><ul>
<li><a href="#出现原因-4">出现原因</a></li>
<li><a href="#解决办法-4">解决办法</a></li>
</ul>
</li>
<li><a href="#6-nstimer-crash">6. NSTimer Crash</a><ul>
<li><a href="#出现原因-5">出现原因</a></li>
<li><a href="#解决办法-5">解决办法</a></li>
</ul>
</li>
<li><a href="#7-野指针-crash">7. 野指针 Crash</a><ul>
<li><a href="#出现原因-6">出现原因</a></li>
<li><a href="#解决办法-6">解决办法</a></li>
<li><a href="#存在问题">存在问题</a></li>
</ul>
</li>
<li><a href="#收集信息">收集信息</a></li>
<li><a href="#使用方法">使用方法</a><ul>
<li><a href="#示例工程">示例工程</a></li>
<li><a href="#install">Install</a></li>
<li><a href="#usage">Usage</a></li>
<li><a href="#changelog">ChangeLog</a></li>
<li><a href="#单元测试">单元测试</a></li>
<li><a href="#bugfeature">Bug&amp;Feature</a></li>
<li><a href="#作者">作者</a></li>
</ul>
</li>
<li><a href="#license">License</a></li>
</ul>
<!-- tocstop -->
<p>[TOC]</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正在运行的 APP 突然 Crash，是一件令人不爽的事，会流失用户，影响公司发展，所以 APP 运行时拥有防 Crash 功能能有效降低 Crash 率，提升 APP 稳定性。但是有时候 APP Crash 是应有的表现，我们不让 APPCrash 可能会导致别的逻辑错误，不过我们可以抓取到应用当前的堆栈信息并上传至相关的服务器，分析并修复这些 BUG。</p>
<p>所以本文介绍的 XXShield 库有两个重要的功能:</p>
<ol>
<li>防止Crash</li>
<li>捕获异常状态下的崩溃信息</li>
</ol>
<p>类似的相关技术分析也有 <a href="https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;mid=2651113088&amp;idx=1&amp;sn=10b28d7fbcdf0def1a47113e5505728d&amp;chksm=844c6f5db33be64b57fc9b4013cdbb7122d7791f3bbca9b4b29e80cce295eb341b03a9fc0f2f&amp;mpshare=1&amp;scene=23&amp;srcid=0207njmGS2HWHI0BZmpjNKhv%23rd" target="_blank" rel="external">网易iOS App运行时Crash自动防护实践</a></p>
<h1 id="目前已经实现的功能"><a href="#目前已经实现的功能" class="headerlink" title="目前已经实现的功能"></a>目前已经实现的功能</h1><ol>
<li>Unrecoginzed Selector Crash</li>
<li>KVO Crash</li>
<li>Container Crash</li>
<li>NSNotification Crash</li>
<li>NSNull Crash</li>
<li>NSTimer Crash </li>
<li>野指针 Crash </li>
</ol>
<hr>
<h1 id="1-unrecoginzed-selector-crash"><a href="#1-Unrecoginzed-Selector-Crash" class="headerlink" title="1 Unrecoginzed Selector Crash"></a>1 Unrecoginzed Selector Crash</h1><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>由于 Objective-C 是动态语言，所有的消息发送都会放在运行时去解析，有时候我们把一个信息传递给了错误的类型，就会导致这个错误。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>Objective-C 在出现无法解析的方法时有三部曲来进行消息转发。<br>详见<a href="https://southpeak.github.io/2014/11/03/objective-c-runtime-3/" target="_blank" rel="external">Objective-C Runtime 运行时之三：方法与消息</a></p>
<ol>
<li>动态方法解析</li>
<li>备用接收者</li>
<li>完整转发</li>
</ol>
<p>1 一般适用与 Dynamic 修饰的 Property<br>2 一般适用与将方法转发至其他对象<br>3 一般适用与消息可以转发多个对象，可以实现类似多继承或者转发中心的概念。</p>
<p>这里选择的是方案二，因为三里面用到了 NSInvocation 对象，此对象性能开销较大，而且这种异常如果出现必然频次较高。最适合将消息转发到一个备用者对象上。</p>
<p>这里新建一个智能转发类。此对象将在其他对象无法解析数据时，返回一个 0 来防止 Crash。返回 0 是因为这个通用的智能转发类做的操作接近向 nil 发送一个消息。</p>
<p>代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> default Implement</div><div class="line"> @param target trarget</div><div class="line"> @param cmd cmd</div><div class="line"> @param ... other param</div><div class="line"> @return default Implement is zero</div><div class="line"> */</div><div class="line"><span class="keyword">int</span> smartFunction(<span class="keyword">id</span> target, SEL cmd, ...) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">BOOL</span> __addMethod(Class clazz, SEL sel) &#123;</div><div class="line">    <span class="built_in">NSString</span> *selName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableString</span> *tmpString = [[<span class="built_in">NSMutableString</span> alloc] initWithFormat:<span class="string">@"%@"</span>, selName];</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> count = (<span class="keyword">int</span>)[tmpString replaceOccurrencesOfString:<span class="string">@":"</span></div><div class="line">                                                withString:<span class="string">@"_"</span></div><div class="line">                                                   options:<span class="built_in">NSCaseInsensitiveSearch</span></div><div class="line">                                                     range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, selName.length)];</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableString</span> *val = [[<span class="built_in">NSMutableString</span> alloc] initWithString:<span class="string">@"i@:"</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        [val appendString:<span class="string">@"@"</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *funcTypeEncoding = [val UTF8String];</div><div class="line">    <span class="keyword">return</span> class_addMethod(clazz, sel, (IMP)smartFunction, funcTypeEncoding);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXShieldStubObject</span></span></div><div class="line"></div><div class="line">+ (XXShieldStubObject *)shareInstance &#123;</div><div class="line">    <span class="keyword">static</span> XXShieldStubObject *singleton;</div><div class="line">    <span class="keyword">if</span> (!singleton) &#123;</div><div class="line">        <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">        <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">            singleton = [XXShieldStubObject new];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)addFunc:(SEL)sel &#123;</div><div class="line">    <span class="keyword">return</span> __addMethod([XXShieldStubObject <span class="keyword">class</span>], sel);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)addClassFunc:(SEL)sel &#123;</div><div class="line">    Class metaClass = objc_getMetaClass(class_getName([XXShieldStubObject <span class="keyword">class</span>]));</div><div class="line">    <span class="keyword">return</span> __addMethod(metaClass, sel);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们这里需要 Hook NSObject的 <code>- (id)forwardingTargetForSelector:(SEL)aSelector</code> 方法启动消息转发。<br>很多人不知道的是如果想要转发类方法，只需要实现一个同名的类方法即可，虽然在头文件中此方法并未声明。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">XXStaticHookClass(<span class="built_in">NSObject</span>, ProtectFW, <span class="keyword">id</span>, <span class="keyword">@selector</span>(forwardingTargetForSelector:), (SEL)aSelector) &#123;</div><div class="line">    <span class="comment">// 1 如果是NSSNumber 和NSString没找到就是类型不对  切换下类型就好了</span></div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]] &amp;&amp; [<span class="built_in">NSString</span> instancesRespondToSelector:aSelector]) &#123;</div><div class="line">        <span class="built_in">NSNumber</span> *number = (<span class="built_in">NSNumber</span> *)<span class="keyword">self</span>;</div><div class="line">        <span class="built_in">NSString</span> *str = [number stringValue];</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span> isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] &amp;&amp; [<span class="built_in">NSNumber</span> instancesRespondToSelector:aSelector]) &#123;</div><div class="line">        <span class="built_in">NSString</span> *str = (<span class="built_in">NSString</span> *)<span class="keyword">self</span>;</div><div class="line">        <span class="built_in">NSNumberFormatter</span> *formatter = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</div><div class="line">        <span class="built_in">NSNumber</span> *number = [formatter numberFromString:str];</div><div class="line">        <span class="keyword">return</span> number;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">BOOL</span> aBool = [<span class="keyword">self</span> respondsToSelector:aSelector];</div><div class="line">    <span class="built_in">NSMethodSignature</span> *signatrue = [<span class="keyword">self</span> methodSignatureForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (aBool || signatrue) &#123;</div><div class="line">        <span class="keyword">return</span> XXHookOrgin(aSelector);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        XXShieldStubObject *stub = [XXShieldStubObject shareInstance];</div><div class="line">        [stub addFunc:aSelector];</div><div class="line">        </div><div class="line">        <span class="built_in">NSString</span> *reason = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"*****Warning***** logic error.target is %@ method is %@, reason : method forword to SmartFunction Object default implement like send message to nil."</span>,</div><div class="line">                            [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="built_in">NSStringFromSelector</span>(aSelector)];</div><div class="line">        [XXRecord recordFatalWithReason:reason userinfo:<span class="literal">nil</span> errorType:EXXShieldTypeUnrecognizedSelector];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> stub;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">XXStaticHookEnd</div></pre></td></tr></table></figure>
<p>这里汇报了 Crash 信息，出现消息转发一般是一个 logic 错误，为必须修复的Bug，上报尤为重要。</p>
<hr>
<h1 id="2-kvo-crash"><a href="#2-KVO-Crash" class="headerlink" title="2 KVO Crash"></a>2 KVO Crash</h1><h2 id="出现原因"><a href="#出现原因-1" class="headerlink" title="出现原因"></a>出现原因</h2><p>KVOCrash总结下来有以下2大类。</p>
<ol>
<li>不匹配的移除和添加关系。</li>
<li>观察者和被观察者释放的时候没有及时断开观察者关系。</li>
</ol>
<h2 id="解决办法"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h2><blockquote>
<p>尼古拉斯赵四说过 :<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1487130185&amp;di=41675c8578b69177ee9172e488c803f7&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3Dd1ac5ff09e25bc312b5d01906edf8de7%2Fcedafc039245d6882866389aa3c27d1ed21b244b.jpg" alt="赵四"><br>对比到程序世界就是，程序世界没有什么难以解决的问题都是不可以通过抽象层次来解决的，如果有，那就两层。<br>纵观程序的架构设计，计算机网络协议分层设计，操作系统内核设计等等都是如此。</p>
</blockquote>
<p>问题1 ： 不成对的添加观察者和移除观察者会导致 Crash，以往我们使用 KVO，观察者和被观察者都是直接交互的。这里的设计方案是我们找一个 Proxy 用来做转发， 真正的观察者是 Proxy，被观察者出现了通知信息，由 Proxy 做分发。所以 Proxy 里面要保存一个数据结构 {keypath : [observer1, observer2,…]} 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XXKVOProxy</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">    __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSObject</span> *_observed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> &#123;keypath : [ob1,ob2](NSHashTable)&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="built_in">NSHashTable</span>&lt;<span class="built_in">NSObject</span> *&gt; *&gt; *kvoInfoMap;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们需要 Hook NSObject的 KVO 相关方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">void</span> *)context;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</div></pre></td></tr></table></figure>
<ol>
<li>在添加观察者时<br><img src="http://ompeszjl2.bkt.clouddn.com/iOS-APP-%E8%BF%90%E8%A1%8C%E6%97%B6%E9%98%B2Crash%E5%B7%A5%E5%85%B7XXShield%E7%BB%83%E5%B0%B1//KVO-Add.png" alt="addObserver"></li>
</ol>
<ol>
<li>在移除观察者时</li>
</ol>
<p><img src="http://ompeszjl2.bkt.clouddn.com/iOS-APP-%E8%BF%90%E8%A1%8C%E6%97%B6%E9%98%B2Crash%E5%B7%A5%E5%85%B7XXShield%E7%BB%83%E5%B0%B1/KVO-Remove.png" alt="removeObserver"></p>
<p>问题2: 观察者和被观察者释放的时候没有断开观察者关系。<br>对于观察者， 既然我们是自己用 Proxy 做的分发，我们自己就需要保存观察者，这里我们简单的使用 <code>NSHashTable</code> 指定指针持有策略为 <code>weak</code> 即可。</p>
<p>对于被观察者，我们使用 <a href="https://www.valiantcat.cn/index.php/2017/11/03/53.html" target="_blank" rel="external">iOS 界的毒瘤-MethodSwizzling</a><br>一文中到的方法。我们在被观察者上绑定一个关联对象，在关联对象的 dealloc 方法中做相关操作即可。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="built_in">NSHashTable</span>&lt;<span class="built_in">NSObject</span> *&gt; *&gt; *kvoinfos =  <span class="keyword">self</span>.kvoInfoMap.copy;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *keyPath <span class="keyword">in</span> kvoinfos) &#123;</div><div class="line">            <span class="comment">// call original  IMP</span></div><div class="line">            __xx_hook_orgin_function_removeObserver(_observed,<span class="keyword">@selector</span>(removeObserver:forKeyPath:),<span class="keyword">self</span>, keyPath);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="3-container-crash"><a href="#3-Container-Crash" class="headerlink" title="3 Container Crash"></a>3 Container Crash</h1><h2 id="出现原因"><a href="#出现原因-2" class="headerlink" title="出现原因"></a>出现原因</h2><p>容器在任何编程语言中都尤为重要，容器是数据的载体，很多容器对容器放空值都做了容错处理。不幸的是 Objective-C 并没有，容器插入了 <code>nil</code> 就会导致 Crash，容器还有另外一个最容易 Crash 的原因就是下标越界。</p>
<h2 id="解决办法"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h2><p>常见的容器有 NS(Mutable)Array , NS(Mutable)Dictionary, NSCache 等。我们需要 hook 常见的方法加入检测功能并且捕获堆栈信息上报。</p>
<p>例如</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">XXStaticHookClass(<span class="built_in">NSArray</span>, ProtectCont, <span class="keyword">id</span>, <span class="keyword">@selector</span>(objectAtIndex:),(<span class="built_in">NSUInteger</span>)index) &#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.count == <span class="number">0</span>) &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *reason = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"target is %@ method is %@,reason : index %@ out of count %@ of array "</span>,</div><div class="line">                        [<span class="keyword">self</span> <span class="keyword">class</span>], XXSEL2Str(<span class="keyword">@selector</span>(objectAtIndex:)), @(index), @(<span class="keyword">self</span>.count)];</div><div class="line">    [XXRecord recordFatalWithReason:reason userinfo:<span class="literal">nil</span> errorType:EXXShieldTypeContainer];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (index &gt;= <span class="keyword">self</span>.count) &#123;</div><div class="line">    <span class="built_in">NSString</span> *reason = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"target is %@ method is %@,reason : index %@ out of count %@ of array "</span>,</div><div class="line">                        [<span class="keyword">self</span> <span class="keyword">class</span>], XXSEL2Str(<span class="keyword">@selector</span>(objectAtIndex:)), @(index), @(<span class="keyword">self</span>.count)];</div><div class="line">    [XXRecord recordFatalWithReason:reason userinfo:<span class="literal">nil</span> errorType:EXXShieldTypeContainer];</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> XXHookOrgin(index);</div><div class="line">&#125;</div><div class="line">XXStaticHookEnd</div></pre></td></tr></table></figure>
<p>但是需要注意的是 NSArray 是一个 Class Cluster 的抽象父类，所以我们需要 Hook 到我们真正的子类。</p>
<p>这里给出一个辅助方法，获取一个类的所有直接子类：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSArray</span> *)findAllOf:(Class)defaultClass &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> count = objc_getClassList(<span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">@throw</span><span class="string">@"Couldn't retrieve Obj-C class-list"</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> @[defaultClass];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *output = @[].mutableCopy;</div><div class="line">    </div><div class="line">    Class *classes = (Class *) malloc(<span class="keyword">sizeof</span>(Class) * count);</div><div class="line">    </div><div class="line">    objc_getClassList(classes, count);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (defaultClass == class_getSuperclass(classes[i]))<span class="comment">//子类</span></div><div class="line">        &#123;</div><div class="line">            [output addObject:classes[i]];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(classes);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> output.copy;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 对于NSarray ：</span></div><div class="line"></div><div class="line"><span class="comment">//[NSarray array] 和 @[] 的类型是__NSArray0</span></div><div class="line"><span class="comment">//只有一个元素的数组类型 __NSSingleObjectArrayI,</span></div><div class="line"><span class="comment">// 其他的大部分是//__NSArrayI,</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 对于NSMutableArray ：</span></div><div class="line"><span class="comment">//[NSMutableDictionary dictionary] 和 @[].mutableCopy__NSArrayM</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 对于NSDictionary: :</span></div><div class="line"></div><div class="line"><span class="comment">//[NSDictionary dictionary];。 @&#123;&#125;; __NSDictionary0</span></div><div class="line"><span class="comment">// 其他一般是  __NSDictionaryI</span></div><div class="line"></div><div class="line"><span class="comment">// 对于NSMutableDictionary: :</span></div><div class="line"><span class="comment">// 一般用到的是 __NSDictionaryM</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="4-nsnotification-crash"><a href="#4-NSNotification-Crash" class="headerlink" title="4 NSNotification Crash"></a>4 NSNotification Crash</h1><h2 id="出现原因"><a href="#出现原因-3" class="headerlink" title="出现原因"></a>出现原因</h2><p>在 iOS8 及以下的操作系统中添加的观察者一般需要在 dealloc 的时候做移除，如果开发者忘记移除，则在发送通知的时候会导致 Crash，而在 iOS9 上即使移忘记除也无所谓，猜想可能是 iOS9 之后系统将通知中心持有对象由 <code>assign</code> 变为了<code>weak</code>。</p>
<h2 id="解决办法"><a href="#解决办法-3" class="headerlink" title="解决办法"></a>解决办法</h2><p>所以这里两种解决办法 </p>
<ol>
<li>类似 KVO 中间加上 Proxy 层，使用 weak 指针来持有对象</li>
<li>在 dealloc 的时候将未被移除的观察者移除</li>
</ol>
<p>这里我们使用 <a href="https://www.valiantcat.cn/index.php/2017/11/03/53.html" target="_blank" rel="external">iOS 界的毒瘤-MethodSwizzling</a><br>一文中到的方法。</p>
<hr>
<h1 id="5-nsnull-crash"><a href="#5-NSNull-Crash" class="headerlink" title="5 NSNull Crash"></a>5 NSNull Crash</h1><h2 id="出现原因"><a href="#出现原因-4" class="headerlink" title="出现原因"></a>出现原因</h2><p>虽然 Objecttive-C 不允许开发者将 nil 放进容器内，但是另外一个代表用户态 <code>空</code> 的类 NSNull 却可以放进容器，但令人不爽的是这个类的实例，并不能响应任何方法。 </p>
<p>容器中出现 NSNull 一般是 API 接口返回了含有 null 的 JSON 数据，<br>调用方通常将其理解为 NSNumber，NSString，NSDictionary 和 NSArray。 这时开发者如果没有做好防御 一旦对 NSNull 这个类型调用任何方法都会出现 unrecongized selector 错误。 </p>
<h2 id="解决办法"><a href="#解决办法-4" class="headerlink" title="解决办法"></a>解决办法</h2><p>我们在 NSNull 的转发方法中可以判断上面的四种类型是否可以解析。如果可以解析直接将其转发给这几种对象，如果不能则调用父类的默认实现。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">XXStaticHookClass(<span class="built_in">NSNull</span>, ProtectNull, <span class="keyword">id</span>, <span class="keyword">@selector</span>(forwardingTargetForSelector:), (SEL) aSelector) &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSArray</span> *sTmpOutput = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> (sTmpOutput == <span class="literal">nil</span>) &#123;</div><div class="line">        sTmpOutput = @[<span class="string">@""</span>, @<span class="number">0</span>, @[], @&#123;&#125;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> tmpObj <span class="keyword">in</span> sTmpOutput) &#123;</div><div class="line">        <span class="keyword">if</span> ([tmpObj respondsToSelector:aSelector]) &#123;</div><div class="line">            <span class="keyword">return</span> tmpObj;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> XXHookOrgin(aSelector);</div><div class="line">&#125;</div><div class="line">XXStaticHookEnd</div></pre></td></tr></table></figure>
<h1 id="6-nstimer-crash"><a href="#6-NSTimer-Crash" class="headerlink" title="6. NSTimer Crash"></a>6. NSTimer Crash</h1><h2 id="出现原因"><a href="#出现原因-5" class="headerlink" title="出现原因"></a>出现原因</h2><p>在使用 <code>+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(nullable id)userInfo repeats:(BOOL)yesOrNo</code> 创建定时任务的时候，target 一般都会持有 timer，timer又会持有 target 对象，在我们没有正确关闭定时器的时候，timer 会一直持有target 导致内存泄漏。</p>
<h2 id="解决办法"><a href="#解决办法-5" class="headerlink" title="解决办法"></a>解决办法</h2><p>同 KVO 一样，既然 timer 和 target 直接交互容易出现问题，我们就再找个代理将 target 和 selctor 等信息保存到 Proxy 里，并且是弱引用 target。<br>这样避免因为循环引用造成的内存泄漏。然后在触发真正 target 事件的时候如果 target 置为 nil 了这时候手动去关闭定时器。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">XXStaticHookMetaClass(<span class="built_in">NSTimer</span>, ProtectTimer,  <span class="built_in">NSTimer</span> * ,<span class="keyword">@selector</span>(scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:),</div><div class="line">                      (<span class="built_in">NSTimeInterval</span>)ti , (<span class="keyword">id</span>)aTarget, (SEL)aSelector, (<span class="keyword">id</span>)userInfo, (<span class="built_in">BOOL</span>)yesOrNo ) &#123;</div><div class="line">    <span class="keyword">if</span> (yesOrNo) &#123;</div><div class="line">        <span class="built_in">NSTimer</span> *timer =  <span class="literal">nil</span> ;</div><div class="line">        <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">            XXTimerProxy *proxy = [XXTimerProxy new];</div><div class="line">            proxy.target = aTarget;</div><div class="line">            proxy.aSelector = aSelector;</div><div class="line">            timer.timerProxy = proxy;</div><div class="line">            timer = XXHookOrgin(ti, proxy, <span class="keyword">@selector</span>(trigger:), userInfo, yesOrNo);</div><div class="line">            proxy.sourceTimer = timer;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  timer;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> XXHookOrgin(ti, aTarget, aSelector, userInfo, yesOrNo);</div><div class="line">&#125;</div><div class="line">XXStaticHookEnd</div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXTimerProxy</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)trigger:(<span class="keyword">id</span>)userinfo  &#123;</div><div class="line">    <span class="keyword">id</span> strongTarget = <span class="keyword">self</span>.target;</div><div class="line">    <span class="keyword">if</span> (strongTarget &amp;&amp; ([strongTarget respondsToSelector:<span class="keyword">self</span>.aSelector])) &#123;</div><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></div><div class="line">        [strongTarget performSelector:<span class="keyword">self</span>.aSelector withObject:userinfo];</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSTimer</span> *sourceTimer = <span class="keyword">self</span>.sourceTimer;</div><div class="line">        <span class="keyword">if</span> (sourceTimer) &#123;</div><div class="line">            [sourceTimer invalidate];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSString</span> *reason = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"*****Warning***** logic error target is %@ method is %@, reason : an object dealloc not invalidate Timer."</span>,</div><div class="line">                            [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="built_in">NSStringFromSelector</span>(<span class="keyword">self</span>.aSelector)];</div><div class="line">        </div><div class="line">        [XXRecord recordFatalWithReason:reason userinfo:<span class="literal">nil</span> errorType:(EXXShieldTypeTimer)];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="7-野指针-crash"><a href="#7-野指针-Crash" class="headerlink" title="7. 野指针 Crash"></a>7. 野指针 Crash</h1><h2 id="出现原因"><a href="#出现原因-6" class="headerlink" title="出现原因"></a>出现原因</h2><p>一般在单线程条件下使用 ARC 正确的处理引用关系野指针出现的并不频繁， 但是多线程下则不尽然，通常在一个线程中释放了对象，另外一个线程还没有更新指针状态 后续访问就可能会造成随机性 bug。</p>
<p>之所以是随机 bug 是因为被回收的内存不一定立马被使用。而且崩溃的位置可能也与原来的逻辑相聚很远，因此收集的堆栈信息也可能是杂乱无章没有什么价值。<br>具体的分类请看Bugly整理的脑图。<br><img src="http://upload-images.jianshu.io/upload_images/783864-9fa6e25efbe248e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="x"></p>
<p>更多关于野指针的文章请参考:</p>
<ol>
<li><a href="https://dev.qq.com/topic/59141e56ca95d00d727ba750" target="_blank" rel="external">如何定位Obj-C野指针随机Crash(一)</a></li>
<li><a href="https://dev.qq.com/topic/59142d61ca95d00d727ba752" target="_blank" rel="external">如何定位Obj-C野指针随机Crash(二)</a></li>
<li><a href="https://dev.qq.com/topic/5915134b75d11c055ca7fca0" target="_blank" rel="external">如何定位Obj-C野指针随机Crash(三)</a></li>
</ol>
<h2 id="解决办法"><a href="#解决办法-6" class="headerlink" title="解决办法"></a>解决办法</h2><p>这里我们可以借用系统的NSZombies对象的设计。<br>参考<a href="https://mikeash.com/pyblog/friday-qa-2014-11-07-lets-build-nszombie.html" target="_blank" rel="external">buildNSZombie</a></p>
<p>解决过程</p>
<ol>
<li>建立白名单机制，由于系统的类基本不会出现野指针，而且 hook 所有的类开销较大。所以我们只过滤开发者自定义的类。</li>
<li>hook dealloc 方法 这些需要保护的类我们并不让其释放，而是调用objc_desctructInstance 方法释放实例内部所持有属性的引用和关联对象。</li>
<li>利用 object_setClass(id，Class) 修改 isa 指针将其指向一个Proxy 对象(类比系统的 KVO 实现)，此 Proxy 实现了一个和前面所说的智能转发类一样的 <code>return 0</code>的函数。</li>
<li><p>在 Proxy 对象内的 <code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code> 中收集 Crash 信息。</p>
</li>
<li><p>缓存的对象是有成本的，我们在缓存对象到达一定数量时候将其释放(object_dispose)。</p>
</li>
</ol>
<h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><ol>
<li><p>延迟释放内存会造成性能浪费，所以默认缓存会造成野指针的Class实例的对象限制是50，超出之后会释放，如果这时候再此触发了刚好释放掉的野指针，还是会造成Crash的，</p>
</li>
<li><p>建议使用的时候如果近期没有野指针的Crash可以不必开启，如果野指针类型的Crash突然增多，可以考虑在 hot Patch 中开启野指针防护，待收取异常信息之后，再关闭此开关。</p>
</li>
</ol>
<hr>
<h1 id="收集信息"><a href="#收集信息" class="headerlink" title="收集信息"></a>收集信息</h1><p>由于希望此库没有任何外部依赖，所以并未实现响应的上报逻辑。使用者如果需要上报信息 只需要自行实现 <code>XXRecordProtocol</code> 即可，然后在开启 SDK 之前将其注册进入 SDK。<br>在实现方法里面会接收到 XXShield 内部定义的错误信息。<br>开发者无论可以使用诸如 CrashLytics，友盟， bugly等第三库，或者自行 dump堆栈信息都可。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">XXRecordProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)recordWithReason:(<span class="built_in">NSError</span> * )reason userInfo:(<span class="built_in">NSDictionary</span> *)userInfo;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="示例工程"><a href="#示例工程" class="headerlink" title="示例工程"></a>示例工程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">git <span class="built_in">clone</span> git@github.com:ValiantCat/XXShield.git</div><div class="line"><span class="built_in">cd</span> Example</div><div class="line">pod install </div><div class="line">open XXShield.xcworkspace</div></pre></td></tr></table></figure>
<h2 id="install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">pod <span class="string">"XXShield"</span></div></pre></td></tr></table></figure>
<h2 id="usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 注册汇报中心</div><div class="line"> </div><div class="line"> @param record 汇报中心</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)registerRecordHandler:(<span class="keyword">id</span>&lt;XXRecordProtocol&gt;)record;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 注册SDK，默认只要开启就打开防Crash，如果需要DEBUG关闭，请在调用处使用条件编译</div><div class="line"> 本注册方式不包含EXXShieldTypeDangLingPointer类型</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)registerStabilitySDK;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 本注册方式不包含EXXShieldTypeDangLingPointer类型</div><div class="line"> </div><div class="line"> @param ability ability</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)registerStabilityWithAbility:(EXXShieldType)ability;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> ///注册EXXShieldTypeDangLingPointer需要传入存储类名的array，暂时请不要传入系统框架类</div><div class="line"> </div><div class="line"> @param ability ability description</div><div class="line"> @param classNames 野指针类列表</div><div class="line"> */</div><div class="line">+ (<span class="keyword">void</span>)registerStabilityWithAbility:(EXXShieldType)ability withClassNames:(<span class="keyword">nonnull</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)classNames;</div></pre></td></tr></table></figure>
<h2 id="changelog"><a href="#ChangeLog" class="headerlink" title="ChangeLog"></a>ChangeLog</h2><p><a href="https://github.com/ValiantCat/XXShield/blob/develop/Changelog.md" target="_blank" rel="external">ChangeLog</a></p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>相关的单元测试在示例工程的Test Target下，有兴趣的开发者可以自行查看。并且已经接入 <a href="https://travis-ci.org/ValiantCat/XXShield" target="_blank" rel="external">TrivisCI</a>保证了代码质量。</p>
<h2 id="bugampfeature"><a href="#Bug-amp-Feature" class="headerlink" title="Bug&amp;Feature"></a>Bug&amp;Feature</h2><p>如果有相关的 Bug 请提 <a href="https://github.com/ValiantCat/XXShield/issues" target="_blank" rel="external">Issue</a>。</p>
<p>如果觉得可以扩充新的防护类型，请提 <a href="https://github.com/ValiantCat/XXShield/pulls" target="_blank" rel="external">PR</a> 给我。</p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>ValiantCat, 519224747@qq.com<br><a href="https://www.valiantcat.cn/index.php/2017/11/03/53.html" target="_blank" rel="external">个人博客</a><br><a href="http://www.jianshu.com/u/cc1e4faec5f7" target="_blank" rel="external">南栀倾寒的简书</a></p>
<h1 id="license"><a href="#License" class="headerlink" title="License"></a>License</h1><p>XXShield 使用 Apache-2.0 开源协议.</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#目前已经实现的功能&quot;&gt;目前已经实现的功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1-unrecoginzed-sel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS界的毒瘤-MethodSwizzling</title>
    <link href="http://valiantcat.com/2017/11/02/iOS%E7%95%8C%E7%9A%84%E6%AF%92%E7%98%A4-MethodSwizzling/"/>
    <id>http://valiantcat.com/2017/11/02/iOS界的毒瘤-MethodSwizzling/</id>
    <published>2017-11-02T11:08:26.000Z</published>
    <updated>2017-11-04T07:27:39.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么有这篇博文"><a href="#为什么有这篇博文" class="headerlink" title="为什么有这篇博文"></a>为什么有这篇博文</h1><p>不知道何时开始iOS面试开始流行起来询问什么是 Runtime，于是 iOSer 一听 Runtime 总是就提起 MethodSwizzling，开口闭口就是黑科技。但其实如果读者留意过C语言的 Hook 原理其实会发现所谓的钩子都是框架或者语言的设计者预留给我们的工具，而不是什么黑科技，MethodSwizzling 其实只是一个简单而有趣的机制罢了。然而就是这样的机制，在日常中却总能成为万能药一般的被肆无忌惮的使用。</p>
<p>很多 iOS 项目初期架构设计的不够健壮，后期可扩展性差。于是 iOSer 想起了 MethodSwizzling 这个武器，将项目中一个正常的方法 hook 的满天飞，导致项目的质量变得难以控制。曾经我也爱在项目中滥用 MethodSwizzling，但在踩到坑之前总是不能意识到这种糟糕的做法会让项目陷入怎样的险境。于是我才明白学习某个机制要去深入的理解机制的设计，而不是跟风滥用，带来糟糕的后果。最后就有了这篇文章。</p>
<h1 id="hook的对象"><a href="#Hook的对象" class="headerlink" title="Hook的对象"></a>Hook的对象</h1><p>在 iOS 平台常见的 hook 的对象一般有两种：</p>
<ol>
<li>C/C++ functions</li>
<li>Objective-C method </li>
</ol>
<p>对于 C/C+ +的 hook 常见的方式可以使用 facebook 的 <code>fishhook</code> 框架，具体原理可以参考深入理解<code>Mac OS X &amp; iOS 操作系统</code> 这本书。<br>对于 Objective-C Methods 可能大家更熟悉一点，本文也只讨论这个。</p>
<h2 id="最常见的hook代码"><a href="#最常见的hook代码" class="headerlink" title="最常见的hook代码"></a>最常见的hook代码</h2><p>相信很多人使用过 <a href="https://github.com/rentzsch/jrswizzle" target="_blank" rel="external">JRSwizzle</a> 这个库，或者是看过 <a href="http://nshipster.cn/method-swizzling/" target="_blank" rel="external">http://nshipster.cn/method-swizzling/</a> 的博文。<br>上述的代码简化如下。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)jr_swizzleMethod:(SEL)origSel_ withMethod:(SEL)altSel_ error:(<span class="built_in">NSError</span>**)error_ &#123;</div><div class="line"></div><div class="line">	Method origMethod = class_getInstanceMethod(<span class="keyword">self</span>, origSel_);</div><div class="line">	<span class="keyword">if</span> (!origMethod) &#123;</div><div class="line">		SetNSError(error_, <span class="string">@"original method %@ not found for class %@"</span>, <span class="built_in">NSStringFromSelector</span>(origSel_), [<span class="keyword">self</span> <span class="keyword">class</span>]);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Method altMethod = class_getInstanceMethod(<span class="keyword">self</span>, altSel_);</div><div class="line">	<span class="keyword">if</span> (!altMethod) &#123;</div><div class="line">		SetNSError(error_, <span class="string">@"alternate method %@ not found for class %@"</span>, <span class="built_in">NSStringFromSelector</span>(altSel_), [<span class="keyword">self</span> <span class="keyword">class</span>]);</div><div class="line">		<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	class_addMethod(<span class="keyword">self</span>,</div><div class="line">					origSel_,</div><div class="line">					class_getMethodImplementation(<span class="keyword">self</span>, origSel_),</div><div class="line">					method_getTypeEncoding(origMethod));</div><div class="line"></div><div class="line">	class_addMethod(<span class="keyword">self</span>,</div><div class="line">					altSel_,</div><div class="line">					class_getMethodImplementation(<span class="keyword">self</span>, altSel_),</div><div class="line">					method_getTypeEncoding(altMethod));</div><div class="line"></div><div class="line">	method_exchangeImplementations(class_getInstanceMethod(<span class="keyword">self</span>, origSel_), class_getInstanceMethod(<span class="keyword">self</span>, altSel_));</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>在Swizzling情况极为普通的情况下上述代码不会出现问题，但是场景复杂之后上面的代码会有很多安全隐患。</p>
<h2 id="methodswizzling泛滥下的隐患"><a href="#MethodSwizzling泛滥下的隐患" class="headerlink" title="MethodSwizzling泛滥下的隐患"></a>MethodSwizzling泛滥下的隐患</h2><p>Github有一个很健壮的库 <a href="https://github.com/rabovik/RSSwizzle/" target="_blank" rel="external">RSSwizzle</a>(这也是本文推荐Swizzling的最终方式) 指出了上面代码带来的风险点。</p>
<ol>
<li><p>只在 +load 中执行 swizzling 才是安全的。 </p>
</li>
<li><p>被 hook 的方法必须是当前类自身的方法，如果把继承来的 IMP copy 到自身上面会存在问题。父类的方法应该在调用的时候使用，而不是 swizzling 的时候 copy 到子类。</p>
</li>
<li><p>被 Swizzled 的方法如果依赖与 cmd ，hook 之后 cmd 发送了变化，就会有问题(一般你 hook 的是系统类，也不知道系统用没用 cmd 这个参数)。</p>
</li>
<li><p>命名如果冲突导致之前 hook 的失效 或者是循环调用。</p>
</li>
</ol>
<p>上述问题中第一条和第四条说的是通常的 MethodSwizzling 是在分类里面实现的, 而分类的 Method 是被Runtime 加载的时候追加到类的 MethodList ，如果不是在 <code>+load</code> 是执行的 Swizzling 一旦出现重名，那么 SEL 和 IMP 不匹配致 hook 的结果是循环调用。</p>
<p>第三条是一个不容易被发现的问题。<br>我们都知道 Objective-C Method 都会有两个隐含的参数 <code>self, cmd</code>，有的时候开发者在使用关联属性的适合可能懒得声明 (void *) 的 key，直接使用 cmd 变量 <code>objc_setAssociatedObject(self, _cmd, xx, 0);</code> 这会导致对当前IMP对 cmd 的依赖。</p>
<p>一旦此方法被 Swizzling，那么方法的 cmd 势必会发生变化，出现了 bug 之后想必你一定找不到，等你找到之后心里一定会问候那位 Swizzling 你的方法的开发者祖宗十八代安好的，再者如果你 Swizzling 的是系统的方法恰好系统的方法内部用到了 cmd …~_~（此处后背惊起一阵冷汗）。</p>
<h2 id="copy父类的方法带来的问题"><a href="#Copy父类的方法带来的问题" class="headerlink" title="Copy父类的方法带来的问题"></a>Copy父类的方法带来的问题</h2><p>上面的第二条才是我们最容易遇见的场景，并且是99%的开发者都不会注意到的问题。下面我们来做个试验</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)sayHello &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"person say hello"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">Person</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span> (<span class="title">swizzle</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(s_sayHello) withMethod:<span class="keyword">@selector</span>(sayHello) error:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)s_sayHello &#123;</div><div class="line">    [<span class="keyword">self</span> s_sayHello];</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Student + swizzle say hello"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span> (<span class="title">swizzle</span>)</span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(p_sayHello) withMethod:<span class="keyword">@selector</span>(sayHello) error:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)p_sayHello &#123;</div><div class="line">    [<span class="keyword">self</span> p_sayHello];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Person + swizzle say hello"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>上面的代码中有一个 Person 类实现了 <code>sayHello</code> 方法，有一个 Student 继承自 Person， 有一个Student 分类 Swizzling 了原来的 <code>sayHello</code>, 还有一个 Person 的分类也 Swizzling 了原来的 <code>sayhello</code> 方法。</p>
<p>当我们生成一个 Student 类的实例并且调用 <code>sayHello</code> 方法，我们期望的输出如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"person say hello"</span></div><div class="line"><span class="string">"Person + swizzle say hello"</span></div><div class="line"><span class="string">"Student + swizzle say hello"</span></div></pre></td></tr></table></figure>
<p>但是输出有可能是这样的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"person say hello"</span></div><div class="line"><span class="string">"Student + swizzle say hello"</span></div></pre></td></tr></table></figure>
<p>出现这样的场景是由于在 <code>build Phases</code> 的 <code>compile Source</code> 顺序子类分类在父类分类之前。   </p>
<p>我们都知道在 Objective-C 的世界里父类的 <code>+load</code> 早于子类，但是并没有限制父类的分类加载会早于子类的分类的加载，实际上这取决于编译的顺序。最终会按照编译的顺序合并进 <code>Mach-O</code> 的固定 section 内。  </p>
<p>下面会分析下为什么代码会出现这样的场景。</p>
<p>最开始的时候父类拥有自己的 <code>sayHello</code> 方法，子类拥有分类添加的 <code>s_sayHello</code> 方法并且在 <code>s_sayHello</code> 方法内部调用了 sel 为 <code>s_sayHello</code> 方法。 </p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/1.png" alt=""></p>
<p>但是子类的分类在使用上面提到的 MethodSwizzling 的方法会导致如下图的变化</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/2.png" alt=""></p>
<p>由于调用了 <code>class_addMethod</code> 方法会导致重新生成一份新的Method添加到 Student 类上面 但是 sel 并没有发生变化，IMP 还是指向父类唯一的那个 IMP。<br>之后交换了子类两个方法的 IMP 指针。于是方法引用变成了如下结构。<br>其中虚线指出的是方法的调用路径。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/3.png" alt=""></p>
<p>单纯在 Swizzling 一次的时候并没有什么问题，但是我们并不能保证同事出于某种不可告人的目的的又去 Swizzling 了父类，或者是我们引入的第三库做了这样的操作。</p>
<p>于是我们在 Person 的分类里面 Swizzling 的时候会导致方法结构发生如下变化。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/4.png" alt=""></p>
<p>我们的代码调用路径就会是下图这样，相信你已经明白了前面的代码执行结果中为什么父类在子类之后 Swizzling 其实并没有对子类 hook 到。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/5.png" alt=""></p>
<p>这只是其中一种很常见的场景，造成的影响也只是 Hook 不到父类的派生类而已，也不会造成一些严重的 Crash 等明显现象，所以大部分开发者对此种行为是毫不知情的。</p>
<p>对于这种 Swizzling 方式的不确定性有一篇博文分析的更为全面<a href="http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/" target="_blank" rel="external">玉令天下的博客Objective-C Method Swizzling</a></p>
<h2 id="换个姿势来swizzling"><a href="#换个姿势来Swizzling" class="headerlink" title="换个姿势来Swizzling"></a>换个姿势来Swizzling</h2><p>前面提到 <a href="https://github.com/rabovik/RSSwizzle/" target="_blank" rel="external">RSSwizzle</a> 是另外一种更加健壮的Swizzling方式。</p>
<p>这里使用到了如下代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">RSSwizzleInstanceMethod([Student <span class="keyword">class</span>],</div><div class="line">                         @selector(sayHello),</div><div class="line">                         RSSWReturnType(<span class="keyword">void</span>),</div><div class="line">                         RSSWArguments(),</div><div class="line">                         RSSWReplacement(</div><div class="line">                                         &#123;</div><div class="line">                                             <span class="comment">// Calling original implementation.</span></div><div class="line">                                             RSSWCallOriginal();</div><div class="line">                                             <span class="comment">// Returning modified return value.</span></div><div class="line">                                             NSLog(@<span class="string">"Student + swizzle say hello sencod time"</span>);</div><div class="line">                                         &#125;), <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"> RSSwizzleInstanceMethod([Person <span class="keyword">class</span>],</div><div class="line">                         @selector(sayHello),</div><div class="line">                         RSSWReturnType(<span class="keyword">void</span>),</div><div class="line">                         RSSWArguments(),</div><div class="line">                         RSSWReplacement(</div><div class="line">                                         &#123;</div><div class="line">                                             <span class="comment">// Calling original implementation.</span></div><div class="line">                                             RSSWCallOriginal();</div><div class="line">                                             <span class="comment">// Returning modified return value.</span></div><div class="line">                                             NSLog(@<span class="string">"Person + swizzle say hello"</span>);</div><div class="line">                                         &#125;), <span class="number">0</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<p>由于 RS 的方式需要提供一种 Swizzling 任何类型的签名的 SEL，所以 RS 使用的是宏作为代码包装的入口，并且由开发者自行保证方法的参数个数和参数类型的正确性，所以使用起来也较为晦涩。 可能这也是他为什么这么优秀但是 star 很少的原因吧 :(。</p>
<p>我们将宏展开</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">RSSwizzleImpFactoryBlock newImp = ^<span class="keyword">id</span>(RSSwizzleInfo *swizzleInfo) &#123;</div><div class="line">    <span class="keyword">void</span> (*originalImplementation_)(__attribute__((objc_ownership(none))) <span class="keyword">id</span>, SEL);</div><div class="line">    SEL selector_ = <span class="keyword">@selector</span>(sayHello);</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">void</span> (__attribute__((objc_ownership(none))) <span class="keyword">id</span> <span class="keyword">self</span>) &#123;</div><div class="line">        IMP xx = method_getImplementation(class_getInstanceMethod([Student <span class="keyword">class</span>], selector_));</div><div class="line">        IMP xx1 = method_getImplementation(class_getInstanceMethod(class_getSuperclass([Student <span class="keyword">class</span>]) , selector_));</div><div class="line">        IMP oriiMP = (IMP)[swizzleInfo getOriginalImplementation];</div><div class="line">            ((__<span class="keyword">typeof</span>(originalImplementation_))[swizzleInfo getOriginalImplementation])(<span class="keyword">self</span>, selector_);</div><div class="line">        <span class="comment">//只有这一行是我们的核心逻辑</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Student + swizzle say hello"</span>);</div><div class="line">        </div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">&#125;;</div><div class="line">[RSSwizzle swizzleInstanceMethod:<span class="keyword">@selector</span>(sayHello)</div><div class="line">                         inClass:[[Student <span class="keyword">class</span>] <span class="keyword">class</span>]</div><div class="line">                   newImpFactory:newImp</div><div class="line">                            mode:<span class="number">0</span> key:((<span class="keyword">void</span>*)<span class="number">0</span>)];;</div></pre></td></tr></table></figure>
<p>RSSwizzle核心代码其实只有一个函数</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> swizzle(Class classToSwizzle,</div><div class="line">                    SEL selector,</div><div class="line">                    RSSwizzleImpFactoryBlock factoryBlock)</div><div class="line">&#123;</div><div class="line">    Method method = class_getInstanceMethod(classToSwizzle, selector);</div><div class="line"></div><div class="line">    __block IMP originalIMP = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"></div><div class="line">    RSSWizzleImpProvider originalImpProvider = ^IMP&#123;</div><div class="line"></div><div class="line">        IMP imp = originalIMP;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == imp)&#123;</div><div class="line"></div><div class="line">            Class superclass = class_getSuperclass(classToSwizzle);</div><div class="line">            imp = method_getImplementation(class_getInstanceMethod(superclass,selector));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> imp;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    RSSwizzleInfo *swizzleInfo = [RSSwizzleInfo new];</div><div class="line">    swizzleInfo.selector = selector;</div><div class="line">    swizzleInfo.impProviderBlock = originalImpProvider;</div><div class="line"></div><div class="line">    <span class="keyword">id</span> newIMPBlock = factoryBlock(swizzleInfo);</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *methodType = method_getTypeEncoding(method);</div><div class="line">    </div><div class="line">    IMP newIMP = imp_implementationWithBlock(newIMPBlock);</div><div class="line"></div><div class="line">    originalIMP = class_replaceMethod(classToSwizzle, selector, newIMP, methodType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码已经删除无关的加锁，防御逻辑，简化理解。</p>
<p>我们可以看到 RS 的代码其实是构造了一个 Block 里面装着我们需要的执行的代码。</p>
<p>然后再把我们的名字叫 <code>originalImpProviderBloc</code> 当做参数传递到我们的block里面，这里面包含了对将要被 Swizzling 的原始 IMP 的调用。</p>
<p>需要注意的是使用 <code>class_replaceMethod</code> 的时候如果一个方法来自父类，那么就给子类 add 一个方法， 并且把这个 NewIMP 设置给他，然后返回的结果是NULL。</p>
<p>在 <code>originalImpProviderBloc</code> 里面我们注意到如果 <code>imp</code> 是 NULL的时候，是动态的拿到父类的 Method 然后去执行。</p>
<p>我们还用图来分析代码。</p>
<p>最开始 Swizzling 第一次的时候，由于子类不存在 <code>sayHello</code> 方法，再添加方法的时候由于返回的原始 IMP 是 NULL，所以对父类的调用是动态获取的，而不是通过之前的 sel 指针去调用。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/6.png" alt=""></p>
<p>如果我们再次对 Student Hook，由于 Student 已经有 <code>sayHello</code> 方法，这次 replace 会返回原来 IMP 的指针， 然后新的 IMP 会执被填充到 Method 的指针指向。</p>
<p>由此可见我们的方法引用是一个链表形状的。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/7.png" alt=""></p>
<p>同理我们在 hook 父类的时候 父类的方法引用也是一个链表样式的。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/MethodSwizzling/8.png" alt=""></p>
<p>相信到了这里你已经理解 RS 来 Swizzling 方式是：</p>
<p>如果是父类的方法那么就动态查找，如果是自身的方法就构造方法引用链。来保证多次 Swizzling 的稳定性，并且不会和别人的 Swizzling 冲突。</p>
<p>而且 RS 的实现由于不是分类的方法也不用约束开发者必须在 <code>+load</code> 方法调用才能保证安全，并且cmd 也不会发生变化。</p>
<h1 id="其他hook方式"><a href="#其他Hook方式" class="headerlink" title="其他Hook方式"></a>其他Hook方式</h1><p>其实著名的 Hook 库还有一个叫 <a href="https://github.com/steipete/Aspects" target="_blank" rel="external">Aspect</a> 他利用的方法是把所有的方法调用指向 <code>_objc_msgForward</code> 然后自行实现消息转发的步骤，在里面自行处理参数列表和返回值，通过 NSInvocation 去动态调用。</p>
<p>国内知名的热修复库 <code>JSPatch</code> 就是借鉴这种方式来实现热修复的。</p>
<p>但是上面的库要求必须是最后执行的确保 Hook 的成功。 而且他不兼容其他 Hook 方式，所以技术选型的时候要深思熟虑。</p>
<h1 id="什么时候需要swizzling"><a href="#什么时候需要Swizzling" class="headerlink" title="什么时候需要Swizzling"></a>什么时候需要Swizzling</h1><p>我记得第一次学习 AO P概念的时候是当初在学习 javaWeb 的时候 Serverlet 里面的 FilterChain，开发者可以实现各种各种的过滤器然后在过滤器中插入log， 统计， 缓存等无关主业务逻辑的功能行性代码， 著名的框架 <code>Struts2</code> 就是这样实现的。</p>
<p>iOS 中由于 Swizzling 的 API 的简单易用性导致开发者肆意滥用，影响了项目的稳定性。<br>当我们想要 Swizzling 的时候应该思考下我们能不能利用良好的代码和架构设计来实现，或者是深入语言的特性来实现。</p>
<h2 id="一个利用语言特性的例子"><a href="#一个利用语言特性的例子" class="headerlink" title="一个利用语言特性的例子"></a>一个利用语言特性的例子</h2><p>我们都知道在iOS8下的操作系统中通知中心会持有一个 <code>__unsafe_unretained</code> 的观察者指针。如果观察者在 dealloc 的时候忘记从通知中心中移除，之后如果触发相关的通知就会造成 Crash。 </p>
<p>我在设计防 Crash 工具 <a href="https://github.com/ValiantCat/XXShield" target="_blank" rel="external">XXShield</a> 的时候最初是 Hook NSObjec 的 <code>dealloc</code> 方法，在里面做相应的移除观察者操作。后来一位真大佬提出这是一个非常不明智的操作，因为 dealloc 会影响全局的实例的释放，开发者并不能保证代码质量非常有保障，一旦出现问题将会引起整个 APP 运行期间大面积崩溃或异常行为。</p>
<p>下面我们先来看下 ObjCRuntime 源码关于一个对象释放时要做的事情，代码约在<code>objc-runtime-new.mm</code>第6240行。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/***********************************************************************</span></div><div class="line">* objc_destructInstance</div><div class="line">* Destroys an instance without freeing memory. </div><div class="line">* Calls C++ destructors.</div><div class="line">* Calls ARC ivar cleanup.</div><div class="line">* Removes associative references.</div><div class="line">* Returns `obj`. Does nothing if `obj` is nil.</div><div class="line">**********************************************************************/</div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">objc_destructInstance</span><span class="params">(id obj)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) &#123;</div><div class="line">        <span class="comment">// Read all of the flags at once for performance.</span></div><div class="line">        <span class="keyword">bool</span> cxx = obj-&gt;hasCxxDtor();</div><div class="line">        <span class="keyword">bool</span> assoc = obj-&gt;hasAssociatedObjects();</div><div class="line"></div><div class="line">        <span class="comment">// This order is important.</span></div><div class="line">        <span class="keyword">if</span> (cxx) object_cxxDestruct(obj);</div><div class="line">        <span class="keyword">if</span> (assoc) _object_remove_assocations(obj);</div><div class="line">        obj-&gt;clearDeallocating();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/***********************************************************************</span></div><div class="line">* object_dispose</div><div class="line">* fixme</div><div class="line">* Locking: none</div><div class="line">**********************************************************************/</div><div class="line"><span class="function">id </span></div><div class="line"><span class="title">object_dispose</span><span class="params">(id obj)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> nil;</div><div class="line"></div><div class="line">    objc_destructInstance(obj);    </div><div class="line">    <span class="built_in">free</span>(obj);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的逻辑中明确了写明了一个对象在释放的时候初了调用 <code>dealloc</code> 方法，还需要断开实例上绑定的观察对象， 那么我们可以在添加观察者的时候给观察者动态的绑定一个关联对象，然后关联对象可以反向持有观察者,然后在关联对象释放的时候去移除观察者，由于不能造成循环引用所以只能选择 <code>__weak</code> 或者 <code>__unsafe_unretained</code> 的指针， 实验得知  <code>__weak</code> 的指针在 <code>dealloc</code> 之前就已经被清空， 所以我们只能使用 <code>__unsafe_unretained</code> 指针。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XXObserverRemover</span> : <span class="title">NSObject</span> </span>&#123;</div><div class="line">    __<span class="keyword">strong</span> <span class="built_in">NSMutableArray</span> *_centers;</div><div class="line">    __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> _obs;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXObserverRemover</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">id</span>)obs &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _obs = obs;</div><div class="line">        _centers = @[].mutableCopy;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addCenter:(<span class="built_in">NSNotificationCenter</span>*)center &#123;</div><div class="line">    <span class="keyword">if</span> (center) &#123;</div><div class="line">        [_centers addObject:center];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSNotificationCenter</span> *center <span class="keyword">in</span> _centers) &#123;</div><div class="line">            [center removeObserver:_obs];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> addCenterForObserver(<span class="built_in">NSNotificationCenter</span> *center ,<span class="keyword">id</span> obs) &#123;</div><div class="line">    XXObserverRemover *remover = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> removerKey;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        remover = objc_getAssociatedObject(obs, &amp;removerKey);</div><div class="line">        <span class="keyword">if</span> (!remover) &#123;</div><div class="line">            remover = [[XXObserverRemover alloc] initWithObserver:obs];</div><div class="line">            objc_setAssociatedObject(obs, &amp;removerKey, remover, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">        &#125;</div><div class="line">        [remover addCenter:center];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> autoHook() &#123;</div><div class="line">    RSSwizzleInstanceMethod([<span class="built_in">NSNotificationCenter</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(addObserver:selector:name:object:),</div><div class="line">                            RSSWReturnType(<span class="keyword">void</span>), RSSWArguments(<span class="keyword">id</span> obs,SEL cmd,<span class="built_in">NSString</span> *name,<span class="keyword">id</span> obj),</div><div class="line">                            RSSWReplacement(&#123;</div><div class="line">        RSSWCallOriginal(obs,cmd,name,obj);</div><div class="line">        addCenterForObserver(<span class="keyword">self</span>, obs);</div><div class="line">    &#125;), <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是在添加关联者的时候一定要将代码包含在一个自定义的 <code>AutoreleasePool</code> 内。</p>
<p>我们都知道在 Objective-C 的世界里一个对象如果是 Autorelease 的 那么这个对象在当前方法栈结束后才会延时释放，在 ARC 环境下，一般一个 Autorelease 的对象会被放在一个系统提供的 AutoreleasePool 里面，然后AutoReleasePool drain 的时候再去释放内部持有的对象，通常情况下命令行程序是没有问题的，但是在iOS的环境中 AutoReleasePool是在 Runloop 控制下在空闲时间进行释放的，这样可以提升用户体验，避免造成卡顿，但是在我们这种场景中会有问题，我们严格依赖了观察者调用 dealloc 的时候关联对象也会去 dealloc，如果系统的 AutoReleasePool 出现了延时释放，会导致当前对象被回收之后 过段时间关联对象才会释放，这时候前文使用的 __unsafe_unretained 访问的就是非法地址。</p>
<p>我们在添加关联对象的时候添加一个自定义的 AutoreleasePool 保证了对关联对象引用的单一性，保证了我们依赖的释放顺序是正确的。从而正确的移除观察者。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/rentzsch/jrswizzle" target="_blank" rel="external">JRSwizzle</a></li>
<li><a href="https://github.com/rabovik/RSSwizzle/" target="_blank" rel="external">RSSwizzle</a></li>
<li><a href="https://github.com/steipete/Aspects" target="_blank" rel="external">Aspect</a></li>
<li><a href="http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/" target="_blank" rel="external">玉令天下的博客Objective-C Method Swizzling</a></li>
<li><a href="https://github.com/ValiantCat/MethodSwizzlingDemo" target="_blank" rel="external">示例代码</a></li>
</ol>
<h1 id="友情感谢"><a href="#友情感谢" class="headerlink" title="友情感谢"></a>友情感谢</h1><p>最后感谢 <a href="sindrilin.com">骑神</a> 大佬修改我那蹩脚的文字描述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么有这篇博文&quot;&gt;&lt;a href=&quot;#为什么有这篇博文&quot; class=&quot;headerlink&quot; title=&quot;为什么有这篇博文&quot;&gt;&lt;/a&gt;为什么有这篇博文&lt;/h1&gt;&lt;p&gt;不知道何时开始iOS面试开始流行起来询问什么是 Runtime，于是 iOSer 一听 Ru
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解Mach-O文件格式(1)</title>
    <link href="http://valiantcat.com/2017/10/30/%E7%90%86%E8%A7%A3Mach-O%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-1/"/>
    <id>http://valiantcat.com/2017/10/30/理解Mach-O文件格式-1/</id>
    <published>2017-10-30T11:38:06.000Z</published>
    <updated>2017-10-30T11:56:03.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><p>之前工作中对Mach-O文件有一定的接触, 原本早就想写一篇文章分享一下，但是奈何只是不够深入, 总怕分析的有问题误导读者。</p>
<p>最近又在阅读深入解析Mac OS X 与iOS 操作系统，借着这个机会记录下自己的学习成果, 并结合之前的经验, 加上一些实例让读者更好的理解。<br>毕竟对于程序员来说 大部分人对抽象的概念的感觉就是 <code>听说过很多原理, 依然不知道大佬说的是什么</code></p>
<h1 id="mac-os-与-ios-支持的文件类型"><a href="#Mac-OS-与-iOS-支持的文件类型" class="headerlink" title="Mac OS 与 iOS 支持的文件类型"></a>Mac OS 与 iOS 支持的文件类型</h1><p>在<code>Unix-Like</code>系列的操作系统, 可以通过命令 <code>chmod +x</code> 给予文件可执行权限, 但是这不代表这个文件具有可执行权限, 实际上 Apple家的操作系统只支持三种文件格式。</p>
<ol>
<li>以<code>#!</code>开头的脚本文件</li>
<li>通用二进制文件</li>
<li>Mach-O格式文件</li>
</ol>
<p>但是实际上  以<code>#!</code>开头的脚本文件其实是shell解释器找到后面指定的脚本解释器来执行的, 而通用二进制文件其实是多个架构的Mach-O文件的打包体。<br>通用二进制文件其实有个更加形象化的名字<code>fat binary</code><br>那么操作系统如何知道你打开的文件是何种类型的？<br>其实是通过这些文件头的固定数字来区分的, 对于这些固定数字通常叫做 <code>Magic Number</code>（魔数）.</p>
<p>对于<code>fat binary</code>的魔数是 <code>0xcafebabe</code>（小端）<code>0xbebafeca</code>大端<br>对于<code>Mach-O</code>的魔数是 <code>0xfeedface</code>(32位) <code>0xfeedfacf</code>(64位)</p>
<p>多说无益~~上代码 </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">我们以/usr/bin/perl为例 (这是一个fat binary)</div><div class="line">$ file /usr/bin/perl</div><div class="line">/usr/bin/perl: Mach-O universal binary with <span class="number">2</span> architectures: [x86_64:Mach-O <span class="number">64</span>-bit executable x86_64] [i386:Mach-O executable i386]</div><div class="line">/usr/bin/perl (<span class="keyword">for</span> architecture x86_64):	Mach-O <span class="number">64</span>-bit executable x86_64</div><div class="line">/usr/bin/perl (<span class="keyword">for</span> architecture i386):	Mach-O executable i386</div><div class="line">$ otool -vh /usr/bin/perl</div><div class="line">Mach header</div><div class="line">      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags</div><div class="line">MH_MAGIC_64  X86_64        ALL LIB64     EXECUTE    <span class="number">17</span>       <span class="number">1800</span>   NOUNDEFS DYLDLINK TWOLEVEL PIE</div></pre></td></tr></table></figure>
<p> 不过可能你觉得拿着系统的命令来看感觉不那么真实, 那么cat命令我们都用过吧，来看下<br> <img src="http://ompeszjl2.bkt.clouddn.com/%E7%90%86%E8%A7%A3Mach-O%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-1/magicNumber.jpg" alt=""></p>
<p>在<code>/usr/include/mach-o/fat.h</code>路径下有关于<code>fat binary</code>文件的头文件定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> fat_header &#123;</div><div class="line">	<span class="keyword">uint32_t</span>	magic;		<span class="comment">/* FAT_MAGIC or FAT_MAGIC_64 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	nfat_arch;	<span class="comment">/* 包含的架构数 */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> fat_arch &#123;</div><div class="line">	<span class="keyword">cpu_type_t</span>	cputype;	<span class="comment">/* cpu类型 */</span></div><div class="line">	<span class="keyword">cpu_subtype_t</span>	cpusubtype;	<span class="comment">/* 机器标示符  */</span></div><div class="line">	<span class="keyword">uint32_t</span>	offset;		<span class="comment">/* 当前架构在这个文件中的便宜量 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	size;		<span class="comment">/* 当前架构在文件中的长度*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	align;		<span class="comment">/* 对齐方式 */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不知道大家还记得不记得之前使用windows的时候有System32和64之分, 那是因为在windows操作系统中不同架构的可执行文件是分开存放的。</p>
<p>苹果在某次WWDC大会声称自己优雅的将多个架构合并在了一个文件中。<del>引来果粉一阵鼓掌</del>。<br>其实<code>fat binary</code>文件的真正布局非常简单。</p>
<p>以/usr/bin/perl为例<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%90%86%E8%A7%A3Mach-O%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-1/fatBinary.jpg" alt=""><br>Apple的实现只是将不同架构的文件并排放在一起，然后在文件头部添加不同架构的描述信息, 然后再加载当前架构的Mach-O文件 丢弃掉其他架构的部分即可。实在是简单粗暴~~</p>
<h1 id="mach-o文件结构"><a href="#Mach-O文件结构" class="headerlink" title="Mach-O文件结构"></a>Mach-O文件结构</h1><p>Unix标准了一个可移植的二进制格式<code>ELF</code>但是苹果并没有实现它而是维护了一套NeXTSTEP的遗物 <code>Mach-Object</code>简称<code>Mach-O</code>。<br>但是这并不是说苹果不遵守<code>POSXI</code>规范，这个规范通常说的是源码级别的跨平台性，对于二进制则不强制要求。</p>
<p>下面是一个官方提供的图片。<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%90%86%E8%A7%A3Mach-O%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-1/appleDoc.jpg" alt=""></p>
<h2 id="mach-0-header"><a href="#Mach-0-Header" class="headerlink" title="Mach-0 Header"></a>Mach-0 Header</h2><p>先来介绍Mach-O的Header（只介绍64位）信息。<br>相关头文件定义在<code>/usr/include/mach-o/loader.h</code>里面。如果需要使用只需要加载<code>&lt;mach-O/loader.h&gt;</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> mach_header_64 &#123;</div><div class="line">	<span class="keyword">uint32_t</span>	magic;		<span class="comment">/* mach magic number identifier */</span></div><div class="line">	<span class="keyword">cpu_type_t</span>	cputype;	<span class="comment">/* cpu specifier */</span></div><div class="line">	<span class="keyword">cpu_subtype_t</span>	cpusubtype;	<span class="comment">/* machine specifier */</span></div><div class="line">	<span class="keyword">uint32_t</span>	filetype;	<span class="comment">/* 文件类型 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	ncmds;		<span class="comment">/* load commadns的个数 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	sizeofcmds;	<span class="comment">/* load commands的总大小 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* 动态连接器标志*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved;	<span class="comment">/* 保留*/</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* Constant for the magic field of the mach_header_64 (64-bit architectures) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_MAGIC_64 0xfeedfacf <span class="comment">/* 小端 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM_64 0xcffaedfe <span class="comment">/* 大端 */</span></span></div></pre></td></tr></table></figure>
<p>注： Mach-O文件不仅仅是可执行文件, 也包括目标文件（.o） 动态库, Bundle插件等。<br>标志位<br>flag 标记了一些dyld加载 执行 中可配置的信息。<br><code>关于Mach-O文件的魔数信息，有兴趣的读者可以按照之前的方式亲自动手尝试一下</code></p>
<h2 id="mach-o-load-commands"><a href="#Mach-O-Load-commands" class="headerlink" title="Mach-O Load commands"></a>Mach-O Load commands</h2><p>Mach-O文件中最重要的元信息就是 load Commands，加载命令紧跟在文件头信息之后。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//   [_mach_header_|___load_commands___||___load_commands___||____other____|]</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> load_command &#123;</div><div class="line">	<span class="keyword">uint32_t</span> cmd;		<span class="comment">/*  load command的类型 */</span></div><div class="line">	<span class="keyword">uint32_t</span> cmdsize;	<span class="comment">/*  command 的长度 */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%90%86%E8%A7%A3Mach-O%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-1/loadCommand.jpg" alt=""></p>
<h2 id="lc_segment"><a href="#LC-SEGMENT" class="headerlink" title="LC_SEGMENT"></a>LC_SEGMENT</h2><p>对于加载命令是LC_SEGMENT的命令指定了内核如何设置新运行的进程的内存空间<br>对应的头文件也在<code>&lt;mach-o/loader.h&gt;</code> </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> segment_command_64 &#123; <span class="comment">/* for 64-bit architectures */</span></div><div class="line">	<span class="keyword">uint32_t</span>	cmd;		<span class="comment">/* LC_SEGMENT_64 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	cmdsize;	<span class="comment">/* includes sizeof section_64 structs */</span></div><div class="line">	<span class="keyword">char</span>		segname[<span class="number">16</span>];	<span class="comment">/* segment name */</span></div><div class="line">	<span class="keyword">uint64_t</span>	vmaddr;		<span class="comment">/* 当前segment加载的虚拟内存起始地址 */</span></div><div class="line">	<span class="keyword">uint64_t</span>	vmsize;		<span class="comment">/* 当前segment加载的虚拟内存地址占用的长度  */</span></div><div class="line">	<span class="keyword">uint64_t</span>	fileoff;	<span class="comment">/* segment在文件中的偏移 */</span></div><div class="line">	<span class="keyword">uint64_t</span>	filesize;	<span class="comment">/* segment在文件中的长度 */</span></div><div class="line">	<span class="keyword">vm_prot_t</span>	maxprot;	<span class="comment">/* 最大的保护级别 */</span></div><div class="line">	<span class="keyword">vm_prot_t</span>	initprot;	<span class="comment">/* 初始化的保护级别 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	nsects;		<span class="comment">/* 包含sections的个数  */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* 标志位 */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>由于有了LC_SEGMENT命令。对于每一个Segment，将文件中偏移量为fileOff长度为filesize的文件内容加载到虚拟地址为vmaddr的位置，长度为vmsize, 页面的权限通过initprot来初始化（比如设定读/写/执行, 段的保护级别可以动态设置最大不超过maxprot</p>
<p>常见的Segment有以下几个</p>
<ol>
<li>__TEXT 代码段</li>
<li>__PAGEZERO 空指针陷阱</li>
<li>__DATA 数据段</li>
<li>__LINKEDIT 包含需要被动态链接器使用的信息，包括符号表、字符串表、重定位项表等。</li>
<li><strong>OBJC(现已经被合并到</strong>DATA部分)包含会被Objective Runtime使用到的一些数据。</li>
</ol>
<p>当然读者如果有兴趣查看其他所有的loadcommands可以去loader.h头文件定义去查看，也可以实际操练一下<br>如 使用otool 查看某些mach-O文件的所有load_commands</p>
<p><code>otool -l /bin/ls</code></p>
<h2 id="section"><a href="#section" class="headerlink" title="section"></a>section</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">类型声明如下</div><div class="line"><span class="keyword">struct</span> section_64 &#123; <span class="comment">/* for 64-bit architectures */</span></div><div class="line">	<span class="keyword">char</span>		sectname[<span class="number">16</span>];	<span class="comment">/* name of this section */</span></div><div class="line">	<span class="keyword">char</span>		segname[<span class="number">16</span>];	<span class="comment">/* segment this section goes in */</span></div><div class="line">	<span class="keyword">uint64_t</span>	addr;		<span class="comment">/* memory address of this section */</span></div><div class="line">	<span class="keyword">uint64_t</span>	size;		<span class="comment">/* size in bytes of this section */</span></div><div class="line">	<span class="keyword">uint32_t</span>	offset;		<span class="comment">/* file offset of this section */</span></div><div class="line">	<span class="keyword">uint32_t</span>	align;		<span class="comment">/* section alignment (power of 2) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reloff;		<span class="comment">/* file offset of relocation entries */</span></div><div class="line">	<span class="keyword">uint32_t</span>	nreloc;		<span class="comment">/* number of relocation entries */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags (section type and attributes)*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved1;	<span class="comment">/* reserved (for offset or index) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved2;	<span class="comment">/* reserved (for count or sizeof) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved3;	<span class="comment">/* reserved */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>对于<strong>TEXT, </strong>DATA下面, 又有细分的各种Section，常见的如</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>TEXT.text</td>
<td>只有可执行的机器码</td>
</tr>
<tr>
<td>TEXT.cstring</td>
<td>硬编码去重后的C字符串</td>
</tr>
<tr>
<td>TEXT.const</td>
<td>初始化过的常量</td>
</tr>
<tr>
<td>DATA.data</td>
<td>初始化过的可变的数据</td>
</tr>
<tr>
<td>DATA.bss</td>
<td>没有初始化的静态变量</td>
</tr>
<tr>
<td>DATA.common</td>
<td>没有初始化过的符号声明</td>
</tr>
<tr>
<td>DATA.objc_clasname</td>
<td>oc类名称</td>
</tr>
<tr>
<td>DATA.objc_classlist</td>
<td>类列表</td>
</tr>
<tr>
<td>DATA.objc_protocollist</td>
<td>协议列表</td>
</tr>
</tbody>
</table>
<p>···<br>其他的就不一一列举，建议读者亲自动手试一试, 会发现很多有价值的东西</p>
<h2 id="了解这些有什么用"><a href="#了解这些有什么用？" class="headerlink" title="了解这些有什么用？"></a>了解这些有什么用？</h2><p>相信看了这些内容, 你已经大致知道Mach-O文件的物理布局, 那么我们知道了这个文件格式能用来做什么呢？<br>理解了这个可以用来做下面一些东西：</p>
<ol>
<li>依赖解耦</li>
<li>元信息获取</li>
<li>调试代码</li>
<li>CI工具插件检测</li>
<li>逆向</li>
</ol>
<p>相关一些示例放在下篇文章讲解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在之前&quot;&gt;&lt;a href=&quot;#写在之前&quot; class=&quot;headerlink&quot; title=&quot;写在之前&quot;&gt;&lt;/a&gt;写在之前&lt;/h1&gt;&lt;p&gt;之前工作中对Mach-O文件有一定的接触, 原本早就想写一篇文章分享一下，但是奈何只是不够深入, 总怕分析的有问题误导读者。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 从中级到中级</title>
    <link href="http://valiantcat.com/2017/09/17/iOS-%E4%BB%8E%E4%B8%AD%E7%BA%A7%E5%88%B0%E4%B8%AD%E7%BA%A7/"/>
    <id>http://valiantcat.com/2017/09/17/iOS-从中级到中级/</id>
    <published>2017-09-17T08:30:27.000Z</published>
    <updated>2017-09-17T08:30:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CocoaPods使用详解</title>
    <link href="http://valiantcat.com/2017/05/24/CocoaPods%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://valiantcat.com/2017/05/24/CocoaPods使用详解/</id>
    <published>2017-05-24T09:38:11.000Z</published>
    <updated>2017-05-26T07:56:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cocoapods是什么"><a href="#CocoaPods是什么" class="headerlink" title="CocoaPods是什么"></a>CocoaPods是什么</h1><blockquote>
<p> 在Objective-C时代，开发iOS项目是没有官方支持的包管理工具的。不过有一些极客帮我们做了一个管理工具就是CocoaPods，随着第三库上传到CocoaPods上的数量井喷式增长，CocoaPods已经是iOS项目依赖管理事实上的标准，以下简称<code>Pods</code>。<br>鉴于公司内部很多开发人员都需要使用CocoaPods-包括使用Pods管理依赖，发布自己的SDK，所以有必要梳理一下CocoaPods相关的使用，其中不涉及到CocoaPods是如何设计并实现的。</p>
</blockquote>
<h1 id="cocoapods-工作流程"><a href="#CocoaPods-工作流程" class="headerlink" title="CocoaPods 工作流程"></a>CocoaPods 工作流程</h1><p><img src="http://ompeszjl2.bkt.clouddn.com/CocoaPods%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/CocoaPodsWorkFlow.png" alt=""></p>
<p>以下是各个组成部分的介绍:<br>源码仓库是开发者源代码存放的位置。<br>Spec仓库是存放描述对其他开发者提供Pod的描述文件的位置。<br>LocalSpec仓库是对应远程Spec的镜像，主要用来本地加速索引，查找等功能。<br>PodCache一般是用于缓存下载下来的第三方Pods所提供的文件，加速下次安装。<br>PodsIndex用于对所有的Pods建立索引加快查找可使用库，版本号相关的信息。<br>ShellProject是开发使用的工程。</p>
<h1 id="一次完整工作流的举例"><a href="#一次完整工作流的举例" class="headerlink" title="一次完整工作流的举例"></a>一次完整工作流的举例</h1><p>SDK(如AFNetworking)提供者Andy提交自己的源代码到某个代码仓库，经过一段时间测试，Andy决定发布一个SDK来装逼，于是Andy编写了一个自己SDK的描述文件(Podspec/.json)文件，校验完成后Andy将这个文件push到Spec仓库上。</p>
<p>某程序员 Jack开发一项功能时发现了一个用着比较方便的库，于是他安装了CocoaPods，第一次安装的时候Pods镜像了远程Spec仓库，并且建立了索引文件。Jack通过 <code>Pod Search XX</code>发现这个库，在自己项目的<code>Podfile</code>里面引入了这个库，通过<code>Pod install</code>命令安装了这个库，同时为了加速下次使用Pods帮Jack在本地缓存了这些已经下载的文件。</p>
<h1 id="发布自己的pod"><a href="#发布自己的Pod" class="headerlink" title="发布自己的Pod"></a>发布自己的Pod</h1><h2 id="创建sdk"><a href="#创建SDK" class="headerlink" title="创建SDK"></a>创建SDK</h2><p>对于源码仓库，每个开发者都不会陌生，通常情况下我们只需要在某个仓库直接开发我们的SDK然后编辑我们的Podspec描述文件即可，但是不建议这样做，因为一开始我们在一个项目中直接开发，到最后编写描述描述文件的时候，由于环境的变更，最后校验可能会产生很多问题，所以最好的是就是我们的SDK和我们的SDKExapmle工程就是隔离的。幸运的是CocoaPods官方本来就是支持创建这样的工程的。<br><img src="http://ompeszjl2.bkt.clouddn.com/CocoaPods%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/createSDK.gif" alt=""><br>文件结构如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">── Example</div><div class="line">│   ├── Podfile</div><div class="line">│   ├── Podfile.lock</div><div class="line">│   ├── Pods</div><div class="line">│   ├── Test</div><div class="line">│   ├── Test.xcodeproj</div><div class="line">│   └── Tests</div><div class="line">├── LICENSE</div><div class="line">├── README.md</div><div class="line">├── Test</div><div class="line">│   ├── Assets</div><div class="line">│   └── Classes</div><div class="line">│       └── ReplaceMe.m</div><div class="line">├── Test.podspec</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure></p>
<p>与之相关的命令还有<code>pod lib lint</code> 用于校验我们开发的库是否正确。需要主要的是这个命令测试的是开发中的Pod，并不能保证发布后的Podspec文件是否正确。所以也不建议使用。<br>打开我们的测试工程如下<br><img src="http://ompeszjl2.bkt.clouddn.com/CocoaPods%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/developmentPod.png" alt=""><br>这时候我们如果新建文件，测试工程需要重新install才能正常引用，需要注意的是如果我们开发的SDK依赖于其他外部SDK，我们需要在Podspec文件中描述依赖关系，然后重新install，不能直接在测试工程添加，这样无法保证最后发布的SDK环境的正确性。</p>
<h2 id="校验podspec"><a href="#校验Podspec" class="headerlink" title="校验Podspec"></a>校验Podspec</h2><p>源码开发到一定阶段的时候，我们需要发布我们的SDK，第一步就是校验，相关命令如下:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">➜  Test git:(master) ✗ pod spec </div><div class="line">Usage:</div><div class="line"></div><div class="line">    $ pod spec COMMAND</div><div class="line"></div><div class="line">      Manage pod specs</div><div class="line"></div><div class="line">Commands:</div><div class="line"></div><div class="line">    + cat       Prints a spec file</div><div class="line">    + create    Create spec file stub.</div><div class="line">    + edit      Edit a spec file</div><div class="line">    + lint      Validates a spec file</div><div class="line">    + <span class="built_in">which</span>     Prints the path of the given spec</div></pre></td></tr></table></figure></p>
<p>最主要的就是 <code>pod spec lint</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">➜  Test git:(master) ✗ pod spec lint --help</div><div class="line">Usage:</div><div class="line"></div><div class="line">    $ pod spec lint [NAME.podspec|DIRECTORY|http://PATH/NAME.podspec ...]</div><div class="line"></div><div class="line">      Validates `NAME.podspec`. If a `DIRECTORY` is provided, it validates the podspec</div><div class="line">      files found, including subfolders. In <span class="keyword">case</span> the argument is omitted, it defaults</div><div class="line">      to the current working dir.</div><div class="line"></div><div class="line">Options:</div><div class="line"></div><div class="line">    --quick                                           Lint skips checks that would</div><div class="line">                                                      require to download and build</div><div class="line">                                                      the spec</div><div class="line">    --allow-warnings                                  Lint validates even <span class="keyword">if</span> warnings</div><div class="line">                                                      are present</div><div class="line">    --subspec=NAME                                    Lint validates only the given</div><div class="line">                                                      subspec</div><div class="line">    --no-subspecs                                     Lint skips validation of</div><div class="line">                                                      subspecs</div><div class="line">    --no-clean                                        Lint leaves the build directory</div><div class="line">                                                      intact <span class="keyword">for</span> inspection</div><div class="line">    --fail-fast                                       Lint stops on the first failing</div><div class="line">                                                      platform or subspec</div><div class="line">    --use-libraries                                   Lint uses static libraries to</div><div class="line">                                                      install the spec</div><div class="line">    --sources=https://github.com/artsy/Specs,master   The sources from <span class="built_in">which</span> to pull</div><div class="line">                                                      dependent pods (defaults to</div><div class="line">                                                      https://github.com/CocoaPods/Specs.git).</div><div class="line">                                                      Multiple sources must be</div><div class="line">                                                      comma-delimited.</div><div class="line">    --private                                         Lint skips checks that apply</div><div class="line">                                                      only to public specs</div><div class="line">    --swift-version=VERSION                           The SWIFT_VERSION that should be</div><div class="line">                                                      used to lint the spec. This</div><div class="line">                                                      takes precedence over a</div><div class="line">                                                      .swift-version file.</div><div class="line">    --skip-import-validation                          Lint skips validating that the</div><div class="line">                                                      pod can be imported</div><div class="line">    --silent                                          Show nothing</div><div class="line">    --verbose                                         Show more debugging information</div><div class="line">    --no-ansi                                         Show output without ANSI codes</div><div class="line">    --help                                            Show <span class="built_in">help</span> banner of specified</div><div class="line">                                                      <span class="built_in">command</span></div></pre></td></tr></table></figure></p>
<p>其中需要注意的是校验这一步默认使用的是 <code>use_framework!</code>形式，鉴于之前我们组件化中的规定，不允许开发动态库，所以我们一般要加上<code>--use-libraries</code>，其他选项视情况而定。</p>
<h2 id="发布到远程spec仓库"><a href="#发布到远程Spec仓库" class="headerlink" title="发布到远程Spec仓库"></a>发布到远程Spec仓库</h2><p>关于 仓库相关的命令如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  Test git:(master) ✗ pod repo --help</div><div class="line">Usage:</div><div class="line"></div><div class="line">    $ pod repo [COMMAND]</div><div class="line"></div><div class="line">      Manage spec-repositories</div><div class="line"></div><div class="line">Commands:</div><div class="line"></div><div class="line">    + add       Add a spec repo</div><div class="line">    + lint      Validates all specs <span class="keyword">in</span> a repo</div><div class="line">    &gt; list      List repos</div><div class="line">    + push      Push new specifications to a spec-repo</div><div class="line">    + remove    Remove a spec repo</div><div class="line">    + update    Update a spec repo</div></pre></td></tr></table></figure></p>
<p>我们可以在本地添加源，管理源，还可以发布我们的SDK，不过需要注意的是由于我们的私有Spec仓库需要Code Review的权限。所以这些不适合我们的开发环境。<br>需要注意的是私有Spec源是如何管理我们的各种SDK的描述文件的，<br>官方给得文件结构如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Specs</div><div class="line">    └── [SPEC_NAME]</div><div class="line">        └── [VERSION]</div><div class="line">            └── [SPEC_NAME].podspec</div></pre></td></tr></table></figure></p>
<p>所以我们只要校验我们的Podspec文件。然后按照合适的的文件夹结构去存放并且push到我们私有的仓库即可。举例如下 <code>Test  |____1.0.0 |____Test.podspec</code>即可。</p>
<h1 id="使用私有的sdk"><a href="#使用私有的SDK" class="headerlink" title="使用私有的SDK"></a>使用私有的SDK</h1><h2 id="添加其他源"><a href="#添加其他源" class="headerlink" title="添加其他源"></a>添加其他源</h2><p>在Podfile如果需要引入私有的SDK，需要指定私有源，并且需要同时添加共有源，否则CocoaPods无法检索到，代码如下<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source <span class="string">'https://github.com/artsy/Specs.git'</span></div><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></div></pre></td></tr></table></figure></p>
<h2 id="pod-install-vs-pod-update"><a href="#Pod-install-VS-pod-update" class="headerlink" title="Pod install VS pod update"></a>Pod install VS pod update</h2><ul>
<li>pod instll</li>
</ul>
<p>无论是否是第一次使用，install 命令在于安装新的 第三方库，注意的是在CocoaPods1.0版本后，install命令并不会让 Spec Repo仓库发生更新，所以install的库可能并不是最新版本。</p>
<ul>
<li>pod update</li>
</ul>
<p>update 命令可以更新第三库，不带参数默认更新全部。并且会引起先更新 Spec Repo.</p>
<p>Q： Pod install 做了什么？<br>A:  每一次编辑Podfile,无论是删除 还是新增都需要重新install。这个命令会把所有安装的Pods的版本信息写进 Podfile.lock 文件。这个文件保证这些库的版本正确。并且只会锁定不在Podfile.lock里面的版本信息。其他Pods保持Podfile.locks文件中锁定的版本号。</p>
<p>Q: Pod update 做了什么？<br>A： 当运行update命令时，CocoaPods会忽略Podfile.lock里面的版本，并且帮我们寻找到最接近Podfile里面描述的版本，然后重新把最新版本写进Podfile.lock文件。<br>并且这个命令不会帮我们安装我们新加入的Pod</p>
<h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><ul>
<li><p>pod outdated</p>
<p>可以列出当然Podfile里面安装的Pod且能够升级新版本的Pod列表。</p>
</li>
<li><p>为了保证多人协同开发，请保证Podfile.lock 加入版本控制</p>
</li>
<li><p>pod deintegrate<br>  Pod是一种集中式包管理的工具，并且会侵入工程，这个命令可以让外面你的项目恢复到集成CocoaPods之前。</p>
</li>
</ul>
<h1 id="podsindex-和-podcache"><a href="#PodsIndex-和-PodCache" class="headerlink" title="PodsIndex 和 PodCache"></a>PodsIndex 和 PodCache</h1><p>PodsIndex是为了加快我们搜索的，存放路径为<code>~/Library/Caches/CocoaPods/search_index.json</code>。<br>Pod Cache可以帮助我们管理已有的缓存，文件路径存放如下<code>/Library/Caches/CocoaPods/Pods</code>。需要注意的是如果想清空所有缓存，删除此文件或者使用命令删除都可，但是如果只是要删除单个Pod的缓存，建议使用命令，因为在某个Pod的podspec文件和源文件是分开管理的。</p>
<h1 id="关于podspec更多讲解"><a href="#关于Podspec更多讲解" class="headerlink" title="关于Podspec更多讲解"></a>关于Podspec更多讲解</h1><p><code>spec.frameworks</code>  VS  <code>spec.library</code> VS <code>spec.dependency</code> VS <code>spec.vendored_libraries</code> VS <code>spec.vendored_frameworks</code></p>
<p><code>dependency</code> 描述的是此Pod依赖的外部Pod。<br><code>spec.frameworks</code>和<code>spec.library</code>描述的为此Pod依赖系统的库。<br>librarary这个指静态库，且不能带<code>lib</code>前缀和<code>.a</code>后缀, 按照C语言共享库的规范。CocoaPods会自动补全。<br>frameworks指以framework打包的静态库或者动态库，不能添加<code>.framework</code>后缀。<br><code>vendored_libraries</code>是指开发SDK的人直接提供的二进制静态库，需要完整的匹配到文件。<br><code>vendored_frameworks</code>是指开发SDK的人直接提供的Framwork形式的库，需要完整的匹配到文件。</p>
<hr>
<p><code>subspec</code>不要出现互相依赖，并且不建议使用subspec。</p>
<h1 id="其他奇技淫巧"><a href="#其他奇技淫巧" class="headerlink" title="其他奇技淫巧"></a>其他奇技淫巧</h1><ul>
<li><p>加快校验过程<br>发布我们的SDK的这一过程为了保证我们的Pods环境配置正确，需要 lint这一过程，但是这一过程非常缓慢，消耗时间。前面说到了我们会在本地建立一个远程Spec仓库的镜像(其实就是把远程的仓库 clone下来)。我们完全可以直接在本地仓库修改我们自己的Podspec文件，然后在本地使用某个测试工程直接去 <code>pod install</code>.加快lint效率。</p>
</li>
<li><p>永远只新增版本<br>这条建议是在实践中发现，由于大家大都初次开发Pod，会有很多地方考虑不到位，很多同学直接发现出错之后，并没有新增版本，而是直接改掉某些配置，接入Pod的同学重新install发现 内容并没有发生变化，原因是本地有Cache，且版本号没有发生变化，极易导致无法定位问题。</p>
</li>
</ul>
<h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><p>前面已经讲解完了关于CocoaPod使用和发布。其中很多部分人为操作，非常耗时，我们可以借助自动化工具<br><img src="http://ompeszjl2.bkt.clouddn.com/CocoaPods%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/fastlane_text.png" alt="fastlane"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cocoapods是什么&quot;&gt;&lt;a href=&quot;#CocoaPods是什么&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods是什么&quot;&gt;&lt;/a&gt;CocoaPods是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 在Objective-C时代，开
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件化-二进制方案</title>
    <link href="http://valiantcat.com/2017/05/16/%E7%BB%84%E4%BB%B6%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%A1%88/"/>
    <id>http://valiantcat.com/2017/05/16/组件化-二进制方案/</id>
    <published>2017-05-16T03:32:19.000Z</published>
    <updated>2017-05-16T10:17:12.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<ul>
<li><a href="#为什么要做二进制">为什么要做二进制</a></li>
<li><a href="#二进制需求">二进制需求</a></li>
<li><a href="#二进制实施方案">二进制实施方案</a><ul>
<li><a href="#私有库二进制方案">私有库二进制方案</a><ul>
<li><a href="#如何制作静态库">如何制作静态库</a></li>
<li><a href="#发布我们的二进制">发布我们的二进制</a></li>
<li><a href="#如何lint">如何lint</a></li>
<li><a href="#业务方更进一步的需求">业务方更进一步的需求</a></li>
<li><a href="#后续优化">后续优化</a></li>
</ul>
</li>
<li><a href="#第三方库二进制方案">第三方库二进制方案</a></li>
</ul>
</li>
<li><a href="#参考">参考</a></li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="为什么要做二进制"><a href="#为什么要做二进制" class="headerlink" title="为什么要做二进制"></a>为什么要做二进制</h1><blockquote>
<p>随着APP业务规模越来越大，代码量的不断增多，再加上团队迭代节奏变快，开发的痛点越来越明显—编译耗时较长。目前我司代码量约40w行左右, 业务开发人员每次从git仓库拉代码都会让Xcode重新编译.不同开发机性能也不一，快的可以8min编译完，慢的则达到20min，极大的影响了开发效率。<br>另外一种需求是我们的代码对于不同的团队有不同的权限管理。我可能不希望直接发布我的源码，而是通过二进制和文档的方式提供给业务方。</p>
</blockquote>
<h1 id="二进制需求"><a href="#二进制需求" class="headerlink" title="二进制需求"></a>二进制需求</h1><p>既然我们想做二进制，那么我们要考虑到我们如何做，如何来衡量做出来的二进制方案的成效。<br>参考网上二进制方案和自己公司内业务开发的痛点我们列了如下的需求。</p>
<ol>
<li>我需要平滑的过度到二进制方案，不能对业务团队有大的影响</li>
<li>对于二进制库，编译虽然快了，但是出现错误无法调试，我需要更快捷的切换为源码形式</li>
<li>可以复用原来的组件仓库，不希望把二进制到处复制</li>
<li>二进制的生成有更方便的流程</li>
<li>我希望我的调用方不需要有奇怪的调用方式，如 ‘2.2.1 Binary’</li>
<li>虽然Podfile是ruby代码但是很多业务方的同学不懂，不希望出现ruby逻辑，增大接入难度</li>
<li>照例使用旧的<code>pod install</code>或者<code>pod update</code>命令，不希望有其他别的操作。</li>
<li><p>组件提供者不希望维护多份Podspec文件</p>
<pre><code>结合前面几篇讲解组件化-动态库的文章。我又加了一条
</code></pre></li>
<li>二进制是静态库，最好是静态framework。</li>
</ol>
<h1 id="二进制实施方案"><a href="#二进制实施方案" class="headerlink" title="二进制实施方案"></a>二进制实施方案</h1><p>公司的库无非就2种:</p>
<ol>
<li>第三方库</li>
<li>自己开发的私有库<br>下面分别讲解</li>
</ol>
<h2 id="私有库二进制方案"><a href="#私有库二进制方案" class="headerlink" title="私有库二进制方案"></a>私有库二进制方案</h2><h3 id="如何制作静态库"><a href="#如何制作静态库" class="headerlink" title="如何制作静态库"></a>如何制作静态库</h3><p>首先我们肯定是有源码才有的二进制。前面的需求也提到了组件维护者需要很容易的得到二进制库。首先想到的就是写脚本，但是脚本肯定依赖于模板工程，然后配置源文件，配置资源文件，配置依赖。又是工作量~~。所幸，CocoaPods已经有一个插件<a href="https://github.com/CocoaPods/cocoapods-packager" target="_blank" rel="external">cocoapods-packager</a>帮我们提供这个功能。<br>安装很简单执行下面命令<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install cocoapods-packager</div></pre></td></tr></table></figure></p>
<p>那么我们前面提到的配置源文件，配置依赖，配置资源文件，其实有一个东西 我们已经做过了。那就是我们对外发布的PodSpec文件。<br>那么打包一个库也很简单<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">➜  0.0.4 git:(master) ✗ pod package --help</div><div class="line">Usage:</div><div class="line"></div><div class="line">    $ pod package NAME [SOURCE]</div><div class="line"></div><div class="line">      Package a podspec into a static library.</div><div class="line"></div><div class="line">Options:</div><div class="line"></div><div class="line">    --force                                                         Overwrite existing</div><div class="line">                                                                    files.</div><div class="line">    --no-mangle                                                     Do not mangle</div><div class="line">                                                                    symbols of</div><div class="line">                                                                    depedendant Pods. </div><div class="line">    --embedded                                                      Generate embedded</div><div class="line">                                                                    frameworks.</div><div class="line">    --library                                                       Generate static</div><div class="line">                                                                    libraries.</div><div class="line">    --dynamic                                                       Generate dynamic</div><div class="line">                                                                    framework.</div><div class="line">    --bundle-identifier                                             Bundle identifier</div><div class="line">                                                                    <span class="keyword">for</span> dynamic</div><div class="line">                                                                    framework</div><div class="line">    --exclude-deps                                                  Exclude symbols</div><div class="line">                                                                    from dependencies.</div><div class="line">    --configuration                                                 Build the</div><div class="line">                                                                    specified</div><div class="line">                                                                    configuration</div><div class="line">                                                                    (e.g. Debug).</div><div class="line">                                                                    Defaults to</div><div class="line">                                                                    Release</div><div class="line">    --subspecs                                                      Only include the</div><div class="line">                                                                    given subspecs</div><div class="line">    --spec-sources=private,https://github.com/CocoaPods/Specs.git   The sources to</div><div class="line">                                                                    pull dependant</div><div class="line">                                                                    pods from</div><div class="line">                                                                    (defaults to</div><div class="line">                                                                    https://github.com/CocoaPods/Specs.git)</div></pre></td></tr></table></figure></p>
<p>以下是一个简单的demo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod package LJStability.podspec --embedded</div></pre></td></tr></table></figure></p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%A1%88/packageaLib.png" alt=""></p>
<p>接下来将这个二进制文件放在我们的源码仓库即可</p>
<h3 id="发布我们的二进制"><a href="#发布我们的二进制" class="headerlink" title="发布我们的二进制"></a>发布我们的二进制</h3><p>我们解决了如何快速制作二进制库，那么如何发布呢？<br>网上很多方案是在podspec写判断条件，然后通过特殊的install/update方式去使用。在我们这边的实践情况来看，这套方案有几个弊端。</p>
<ol>
<li>使用这些库让业务方改变了使用pod的方式</li>
<li>切换源码还是二进制是全局的，我无法做到只切换某个组件为源码形式。</li>
<li>CocoaPods自身会给我们的install/update做缓存，本来是好事，但是现在变成了负担，我们要频繁的清理缓存，造成了下次install/update缓慢。</li>
</ol>
<p>那么我们能不能一个PodSpec发布多个子pod呢，当然是支持的，CocoaPods官方文档介绍了subspec这个东西。这个subspec原本是做更细程度的模块划分，并且这些模块间是不能有互相依赖的(可以单向)，换个想法既然都互相依赖了那就说明这些模块是无法做到更详细的拆解的就不适合拆分做subspec。关于Subspec做的比较好的有2个库 <a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec" target="_blank" rel="external">AFNetworking.podspec</a>和<a href="https://github.com/rs/SDWebImage/blob/master/SDWebImage.podspec" target="_blank" rel="external">SDWebImage.podspec</a><br>那么我们可以指定做2个subspec一个叫做framework一个叫做source，指定默认的为framework即可，那么我在使用的时候有下面两种引入方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Test'</span> <span class="comment"># 这会默认导入二进制库</span></div><div class="line">pod <span class="string">'Test/source'</span> 这会导入源码</div></pre></td></tr></table></figure></p>
<p>下面是podspec书写<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">s.name             = <span class="string">"LJStability"</span></div><div class="line">s.version          = <span class="string">"0.0.5"</span></div><div class="line">s.summary          = <span class="string">"链家网防Crash组件"</span></div><div class="line">s.description      = <span class="string">"链家网防Crash组件支持7种Crash防护 \</span></div><div class="line">1. unrecoginzed Selector Crash \</div><div class="line">2. KVO Crash \</div><div class="line">3. Container Crash \</div><div class="line">4. NSNotification Crash \</div><div class="line">5. NSNull Crash \ </div><div class="line">6. NSTimer Crash \</div><div class="line">7. 野指针 Crash  "</div><div class="line"></div><div class="line"></div><div class="line">s.license          = &#123;<span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span>&#125;</div><div class="line">s.homepage         = <span class="string">'xx.git'</span></div><div class="line">s.author           = &#123; <span class="string">"author"</span> =&gt; <span class="string">"xx@lianjia.com"</span> &#125;</div><div class="line">s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"http://git.xx.git"</span>, <span class="symbol">:commit</span> =&gt; <span class="string">""</span> &#125;</div><div class="line"></div><div class="line">s.platform              = <span class="symbol">:ios</span>, <span class="string">'7.0'</span></div><div class="line">s.ios.deployment_target = <span class="string">'7.0'</span></div><div class="line"></div><div class="line"></div><div class="line">  s.default_subspec = <span class="string">'framework'</span></div><div class="line">  s.subspec <span class="string">'source'</span> <span class="keyword">do</span> <span class="params">|source|</span></div><div class="line">    source.source_files = <span class="string">'LJStability/LJStability/Classes/**/*'</span></div><div class="line"></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'framework'</span> <span class="keyword">do</span> <span class="params">|framework|</span></div><div class="line"></div><div class="line">    framework.ios.vendored_frameworks = <span class="string">'LJStability/Pod/*.framework'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># dependencys</span></div><div class="line">s.dependency <span class="string">'Crashlytics'</span></div><div class="line">s.dependency <span class="string">'JRSwizzle'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%A1%88/useFramework.png" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%A1%88/useSource.png" alt=""><br>通过上面的方案我们解决了前面所说的三个问题。业务方正常使用install/update即可，我可以动态切换部分组件到源码形式，我也不用总是频繁的清理pod的缓存。</p>
<h3 id="如何lint"><a href="#如何lint" class="headerlink" title="如何lint"></a>如何lint</h3><p>我们为了保证将要发布的podspec是正确的，会有lint(校验)这个步骤<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">➜  ~ pod spec lint --help</div><div class="line">Usage:</div><div class="line"></div><div class="line">    $ pod spec lint [NAME.podspec|DIRECTORY|http://PATH/NAME.podspec ...]</div><div class="line"></div><div class="line">      Validates `NAME.podspec`. If a `DIRECTORY` is provided, it validates the podspec</div><div class="line">      files found, including subfolders. In case the argument is omitted, it defaults</div><div class="line">      to the current working dir.</div><div class="line"></div><div class="line">Options:</div><div class="line"></div><div class="line">    --quick                                           Lint skips checks that would</div><div class="line">                                                      require to download and build</div><div class="line">                                                      the spec</div><div class="line">    --allow-warnings                                  Lint validates even if warnings</div><div class="line">                                                      are present</div><div class="line">    --subspec=NAME                                    Lint validates only the given</div><div class="line">                                                      subspec</div><div class="line">    --no-subspecs                                     Lint skips validation of</div><div class="line">                                                      subspecs</div><div class="line">    --no-clean                                        Lint leaves the build directory</div><div class="line">                                                      intact for inspection</div><div class="line">    --fail-fast                                       Lint stops on the first failing</div><div class="line">                                                      platform or subspec</div><div class="line">    --use-libraries                                   Lint uses static libraries to</div><div class="line">                                                      install the spec</div><div class="line">    --sources=https://github.com/artsy/Specs,master   The sources from which to pull</div><div class="line">                                                      dependent pods (defaults to</div><div class="line">                                                      https://github.com/CocoaPods/Specs.git).</div><div class="line">                                                      Multiple sources must be</div><div class="line">                                                      comma-delimited.</div><div class="line">    --private                                         Lint skips checks that apply</div><div class="line">                                                      only to public specs</div><div class="line">    --swift-version=VERSION                           The SWIFT_VERSION that should be</div><div class="line">                                                      used to lint the spec. This</div><div class="line">                                                      takes precedence over a</div><div class="line">                                                      .swift-version file.</div><div class="line">    --skip-import-validation                          Lint skips validating that the</div><div class="line">                                                      pod can be imported</div><div class="line">    --silent                                          Show nothing</div><div class="line">    --verbose                                         Show more debugging information</div><div class="line">    --no-ansi                                         Show output without ANSI codes</div><div class="line">    --help</div></pre></td></tr></table></figure></p>
<p>之前我们校验一个podspec文件是否书写正确可能只是简单的加上文件名即可，不过有了subspec我们就要关心这些参数了 ，如果使用了上文说的工作方式，那么我们就要分别校验2个subspec了，并且由于我们制作的是静态库，需要加上<code>--use-libraries</code> 默认情况下使用的是<code>use_framework!</code>模式。</p>
<h3 id="业务方更进一步的需求"><a href="#业务方更进一步的需求" class="headerlink" title="业务方更进一步的需求"></a>业务方更进一步的需求</h3><p>本来到了这里，我们的教程基本结束了，但是业务方提了新需求，上文的截图中我们看到，我们发布的源码是没有文件夹组织结构的，业务方同学说，我能不能更好的组织下文件夹结构，这样方便我调试。<br>这里的解决办法其实也很简单，将subspec分为2大部分，1是private的subspec用于组织文件夹结构，2是public的subspec如 framework和source用于供调用方使用。<br>以下是一个例子<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">Pod::SPod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">s.name             = <span class="string">"LJStability"</span></div><div class="line">s.version          = <span class="string">"0.0.5"</span></div><div class="line">s.summary          = <span class="string">"链家网防Crash组件"</span></div><div class="line">s.description      = <span class="string">"链家网防Crash组件支持7种Crash防护 \</span></div><div class="line">1. unrecoginzed Selector Crash \</div><div class="line">2. KVO Crash \</div><div class="line">3. Container Crash \</div><div class="line">4. NSNotification Crash \</div><div class="line">5. NSNull Crash \ </div><div class="line">6. NSTimer Crash \</div><div class="line">7. 野指针 Crash  "</div><div class="line"></div><div class="line"></div><div class="line">s.license          = &#123;<span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span>&#125;</div><div class="line">s.homepage         = <span class="string">'xx.git'</span></div><div class="line">s.author           = &#123; <span class="string">"author"</span> =&gt; <span class="string">"xx@lianjia.com"</span> &#125;</div><div class="line">s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"http://git.xx.git"</span>, <span class="symbol">:commit</span> =&gt; <span class="string">""</span> &#125;</div><div class="line"></div><div class="line">s.platform              = <span class="symbol">:ios</span>, <span class="string">'7.0'</span></div><div class="line">s.ios.deployment_target = <span class="string">'7.0'</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  s.default_subspec = <span class="string">'framework'</span></div><div class="line"></div><div class="line"><span class="comment">#public</span></div><div class="line">  s.subspec <span class="string">'source'</span> <span class="keyword">do</span> <span class="params">|source|</span></div><div class="line"></div><div class="line"></div><div class="line">    source.dependency <span class="string">'LJStability/SDK'</span></div><div class="line">    source.dependency <span class="string">'LJStability/FoundationContainer'</span></div><div class="line">    source.dependency <span class="string">'LJStability/KVO'</span></div><div class="line">    source.dependency <span class="string">'LJStability/Notification'</span></div><div class="line">    source.dependency <span class="string">'LJStability/NSNull'</span></div><div class="line">    source.dependency <span class="string">'LJStability/NSTimer'</span></div><div class="line">    source.dependency <span class="string">'LJStability/SmartKit'</span></div><div class="line">    source.dependency <span class="string">'LJStability/DanglingPointerStability'</span></div><div class="line">    source.dependency <span class="string">'LJStability/Record'</span></div><div class="line"></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'framework'</span> <span class="keyword">do</span> <span class="params">|framework|</span></div><div class="line"></div><div class="line">    framework.ios.vendored_frameworks = <span class="string">'Pod/*.framework'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  </div><div class="line"><span class="comment">#  private</span></div><div class="line">  s.subspec <span class="string">'SDK'</span> <span class="keyword">do</span> <span class="params">|sdk|</span></div><div class="line">    sdk.source_files = <span class="string">'LJStability/Classes/*'</span></div><div class="line">    sdk.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'FoundationContainer'</span> <span class="keyword">do</span> <span class="params">|foundationContainer|</span></div><div class="line">    foundationContainer.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'KVO'</span> <span class="keyword">do</span> <span class="params">|kvo|</span></div><div class="line"> </div><div class="line">    kvo.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'Notification'</span> <span class="keyword">do</span> <span class="params">|notification|</span></div><div class="line">    notification.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'NSNull'</span> <span class="keyword">do</span> <span class="params">|nSNull|</span></div><div class="line"></div><div class="line">    nSNull.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'NSTimer'</span> <span class="keyword">do</span> <span class="params">|nSTimer|</span></div><div class="line"></div><div class="line">    nSTimer.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'SmartKit'</span> <span class="keyword">do</span> <span class="params">|smartKit|</span></div><div class="line"></div><div class="line">    smartKit.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'DanglingPointerStability'</span> <span class="keyword">do</span> <span class="params">|danglingPointerStability|</span></div><div class="line"></div><div class="line">  <span class="keyword">end</span></div><div class="line">  s.subspec <span class="string">'Record'</span> <span class="keyword">do</span> <span class="params">|record|</span></div><div class="line">    record.requires_arc = <span class="literal">true</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment"># dependencys</span></div><div class="line">      s.dependency <span class="string">'Crashlytics'</span></div><div class="line">      s.dependency <span class="string">'JRSwizzle'</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>上面的关于公司内部文件我删除了，以上部分只是一份参考。<br>调用方如图<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%A1%88/usedependencySubspec.png" alt=""></p>
<h3 id="后续优化"><a href="#后续优化" class="headerlink" title="后续优化"></a>后续优化</h3><p>至此，我们的私有库组件二进制的方案已经演示完毕。<br>这里我要总结下我的看法 :<br>    CocoaPods只是一个工具，我们在使用的时候要么把这个工具用的熟练到极致，要么我们修改这个工具创造出更适合的工具。<br><code>强烈建议学下ruby，自己去定制CocoaPods</code><br>不过我们上面的教程虽然给业务方解决了问题，但是其中还是有很多人工成本在里面的，人工编写podspec文件，人工打包静态库，人工lint podspec。这些都是重复性且没有技术含量的工作。<br>所以我们后续优化的点有以下:</p>
<ol>
<li>根据规范自动的生成podspec文件</li>
<li>自动的打包静态库</li>
<li>更新podspec文件的多个subspec</li>
<li>自动校验podspec的文件是否正确</li>
</ol>
<h2 id="第三方库二进制方案"><a href="#第三方库二进制方案" class="headerlink" title="第三方库二进制方案"></a>第三方库二进制方案</h2><p>关于第三方库，由于podspec文件并不在我们控制，所以我们不能自己去发布并且修改podspec,网上有的方案是使用prepare_command。文后有参考链接这里不做讨论了。<br>但是可以预见的随着公司规模的扩大，我们最好的做法就是对于第三方代码和podspec文件完全做镜像。我们自己控制这些库，也就不存在第三方库一说了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://mdsb100-xiabigao.daoapp.io/2016/07/15/ios-cocoapodszu-jian-ping-hua-er-jin-zhi-hua-fang-an-ji-xiang-xi-jiao-cheng/" target="_blank" rel="external">CocoaPods组件平滑二进制化解决方案 ​​​​</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTYzMzcwOQ==&amp;mid=2650948341&amp;idx=1&amp;sn=bf12097fe33d3bb553fab040a394eab6&amp;mpshare=1&amp;scene=23&amp;srcid=0515n9WefWwsmEZQMGRdWcqN#rd" target="_blank" rel="external">Pod 预编译，减少不必要的生命浪费</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTYzMzcwOQ==&amp;mid=2650948487&amp;idx=1&amp;sn=213a822249d48feae28a7aff182cd295&amp;chksm=8d1c1945ba6b9053e189b7f4b5d16e95cc18e61ac12f93f81bd778f1df981fc6341f9d7071a0&amp;mpshare=1&amp;scene=23&amp;srcid=0515bBA7snAAtOREqJNYAU9Q#rd" target="_blank" rel="external">I have a pod, I have a carthage, En…</a></li>
<li><a href="https://imfong.com/post/Talk-iOS-Library-Binary-Practice" target="_blank" rel="external">谈谈CocoaPods组件二进制化方案</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#为什么要做二进制&quot;&gt;为什么要做二进制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#二进制需求&quot;&gt;二进制需求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#二进制实施方案&quot;&gt;二进制实施方案&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件化-动态库实战续</title>
    <link href="http://valiantcat.com/2017/05/15/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98%E7%BB%AD/"/>
    <id>http://valiantcat.com/2017/05/15/组件化-动态库实战续/</id>
    <published>2017-05-15T03:26:49.000Z</published>
    <updated>2017-05-15T08:42:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<ul>
<li><a href="#回忆之前">回忆之前</a></li>
<li><a href="#不建议在组件化的项目中使用swift来写业务">不建议在组件化的项目中使用Swift来写业务。</a></li>
<li><a href="#动态库过多问题">动态库过多问题</a></li>
<li><a href="#结合公司目前的情况的解决方案">结合公司目前的情况的解决方案</a></li>
<li><a href="#组件化部分动态库实战">组件化部分动态库实战</a></li>
<li><a href="#未解决的问题">未解决的问题</a></li>
<li><a href="#参考">参考</a></li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="回忆之前"><a href="#回忆之前" class="headerlink" title="回忆之前"></a>回忆之前</h1><blockquote>
<p> 上篇文章中我们已经完美的解决了 使用<code>swift第三方库</code> ，使用<code>混编的组件</code>,使用<code>use_framework!</code>,但是会带来别的问题。<br>果然是生命不息，折腾不止啊。</p>
</blockquote>
<h1 id="不建议在组件化的项目中使用swift来写业务"><a href="#不建议在组件化的项目中使用Swift来写业务。" class="headerlink" title="不建议在组件化的项目中使用Swift来写业务。"></a>不建议在组件化的项目中使用Swift来写业务。</h1><p>Q: C++/C 静态库依赖问题<br>A: 回想下我们在做C或者C++开发的时候。如果一个静态库依赖另外一个静态库(A依赖B)。那么被依赖库B升级的时候A用重新编译吗？  不一定，如果是一些方法的新增，维护，不一定会让A重复编译；但是如果修改了B里面的数据结构，A里面又用到了这些数据结构，那么很大可能性我们就要重新编译A了。<br>Q: Objective-C 静态库依赖问题<br>A: 回想下我们在iOS中出现上述的依赖问题，貌似也没有见到要重新编译A的情景。主要是Objc2.0引入了 non-fragile特性，同时OC是严重依赖于Runtime的，只要接口兼容，就算你修改了B中的数据结构，一般也是不需要重新编译A的。如果你不明白non-fragile 请看文后的参考链接<br>Q: Swift中库依赖问题<br>A: 由于Swift不和OC一样，所有的OC方法都是通过Runtime动态调度的。Swift对于方法是存在静态调度和动态调度2种的。所以Swift的库依赖极易引起<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3" target="_blank" rel="external">二进制兼容性问题</a>。更多关于Swift库二进制接口(ABI)兼容性问题，请参考文后链接。</p>
<p>Q: 为什么不建议在组件化的项目中使用Swift或者和OC混编来写业务？<br>A: 首先在组件化初期的时候，我们能做到的一般是基础库抽离，业务组件分离这些。但是一般来说我们这时候的壳工程，接入这些分离的组件的时候都是使用源码接入，这时候问题暂时显现不出来。<br>第二步。当我们的组件化的脚步越走越远的时候，我们出于多方面的考虑可能有以下需求。</p>
<ol>
<li>开发时重复编译是痛点。我们可能更希望提供的是二进制版本，节省下大量的编译耗时；</li>
<li>我们可能要做权限管理。有时候一个公司业务和人员规模都非常庞大。我们基础库设计到跨业务，跨APP使用。我们希望不同团队有不同基础组件的读写权限。那么我们更可能偏向提供二进制库加文档的形式。</li>
</ol>
<p>综上: 由于使用Swift开发ABI不兼容问题更易出现。在组件化的项目中，不建议使用Swift或者混编。</p>
<h1 id="动态库过多问题"><a href="#动态库过多问题" class="headerlink" title="动态库过多问题"></a>动态库过多问题</h1><p>上面说到的问题(麻烦)其实是带给开发者的麻烦，但是动态库多了会给用户带来麻烦(APP启动耗时)。用了混编的项目我们在<code>Podfile</code>里面势必要写<code>use_framework!</code>,上篇文章中我们也说到用了这个指令。<code>CocoaPods</code>会帮我们把所有的库全部编译为动态库。这些动态库是在APP启动时做去加载的。我们在组件化的时候，自己的业务组件马上接近上百个。可以预想到以后随着组件化的越来越深入，这些库会越来越多。这个时间可能会达到1s的量级。对于用户 这是不可接受的。关于动态库过多导致的启动慢的问题请参考文后的参考链接。</p>
<h1 id="结合公司目前的情况的解决方案"><a href="#结合公司目前的情况的解决方案" class="headerlink" title="结合公司目前的情况的解决方案"></a>结合公司目前的情况的解决方案</h1><p>我们公司目前的情况: Swift第三方库个别，混编组件个别。既然都是个别的，我们总不能因为这些个别的特殊case让APP原本的1个二进制文件变成 1个二进制文件+上百个动态库framework。这肯定是不合理的。<br>解决办法</p>
<ol>
<li>不使用Swift，包括第三方库和混编组件</li>
<li>部分组件(含有Swift)动态库化，其他部分仍旧整合进app的二进制中<br>首先来看办法1直观感觉是不合适。首先很多公司的项目在做组件化的时候项目已经达到一定程度(没有一定规模也没必要做组件化)，这就意味着大部分APP是有历史包袱的。首先重写这些已有的组件或者功能肯定是有风险的，在公司业务多。用户量大的情况下，影响面会更大，虽然这样是一劳永逸的，但是同时风险是更大的。我们在做组件化的工作中，改善大家开发的痛点，提高开发效率才是主要目标。至于重构甚至重写则是业务方的重心。<br>第二种办法就是做到部分组件动态库化。<br>我们来回忆下静态库的特点。静态库和主工程链接的时候会把库里面的代码复制到可执行文件中。对于这部分符号在APP启动时会省去load，rebase ，binding的时间。那么在iOS平台中嵌入式动态库的特点是不把库里面的代码复制到可执行文件中，而是单独复制到APP里面的frameworks路径下。所以通常来说动态库节省内存。在iOS平台上做不到。静态库的缺点是会让APP安装包增大。那么我们自己做的嵌入式动态库也会有这个问题。并且还会导致APP启动变慢。那岂不是优点变成了缺点~~.<br><code>以上讨论只在正常项目且上架到APP Store渠道，越狱开发和企业版证书发布不做讨论</code></li>
</ol>
<h1 id="组件化部分动态库实战"><a href="#组件化部分动态库实战" class="headerlink" title="组件化部分动态库实战"></a>组件化部分动态库实战</h1><p>上篇文章中我们知道 只要你的组件库中使用到了Swift。以<code>源码</code>的方式提供给壳工程使用的时候一定要加上<code>use_framework!</code>, 那么就变成前文说到了上百个动态库了。  那么我们如果不以源码的形式引入呢。对于这些含有Swift的下层组件是无依赖的。我们直接将其编译为动态库提供二进制。那么我们在主工程使用的时候就不需要加入<code>use_framework!</code>.<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#use_frameworks!</span></div><div class="line"></div><div class="line">source <span class="string">'https://github.com/ValiantCat/LJWXSDK'</span></div><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span>  <span class="comment">#官方仓库的地址</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">target <span class="string">'LJA_Example'</span> <span class="keyword">do</span></div><div class="line">  pod <span class="string">'LJA'</span>, <span class="symbol">:path</span> =&gt; <span class="string">'../'</span></div><div class="line">  pod <span class="string">'LJB'</span>, <span class="symbol">:path</span> =&gt; <span class="string">'../'</span></div><div class="line"></div><div class="line">    pod <span class="string">'LJCharts'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>那么我们拉下来的项目结构是这样的<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98%E7%BB%AD/projectView.png" alt="项目结构"><br>但是我们运行发现<code>libswiftCore.dylib</code>无法加载。<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98%E7%BB%AD/imageNotFound.png" alt="swift库加载失败"><br>出现这个原因呢是因为Xcode不知道你使用了Swift代码，所以并没有把Swift的运行时环境(也就是swift运行的动态库)复制进APP目录。那么解决办法其实很简单。我们在壳工程新建一个swift空文件即可。<br>以下是主工程是否有swift文件APP目录下动态库的对比<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98%E7%BB%AD/doesnothaveSwiftFile.png" alt="没有swift文件"><br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98%E7%BB%AD/doeshaveswiftFile.png" alt="有Swift文件"><br>到这里其实这篇文章就好了。剩下的其他组件就继续使用静态库即可。我们可以愉快的玩耍了。</p>
<h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h1><p>前面说的问题文中已经解决。但是我觉得有一点不爽。那就是我还需要手动得在壳工程添加空的Swift文件。那么我们能不能这一步也自动化呢。<br>首先我建了一个空工程，往里面添加了一个空的Swift文件。然后diff了一下两次的project文件。<br>以下是diff结果<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98%E7%BB%AD/diffresult.png" alt="工程文件对比结果"><br>我们知道podspec和Podfile其实都是ruby代码。Xcode如何知道我们是否有swift其实也是通过工程的配置来知晓的。那么我们其实可以在Podfile去写ruby代码修改工程文件。这样的话使用方就不需要疑惑为什么要加个空的swift文件了。<br>以下是代码<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Pod设置 =================================</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_config</span> <span class="params">(config)</span></span></div><div class="line"></div><div class="line">  config.build_settings[<span class="string">'CLANG_ENABLE_MODULES'</span>] = <span class="string">'YES'</span></div><div class="line">  config.build_settings[<span class="string">'SWIFT_VERSION'</span>] = <span class="string">'3.0'</span></div><div class="line"></div><div class="line">  <span class="comment"># config.target_attributes["LastSwiftMigration"] = "0830"</span></div><div class="line"></div><div class="line">   <span class="keyword">if</span> config.name == <span class="string">"Debug"</span> <span class="keyword">then</span></div><div class="line">      config.build_settings[<span class="string">'SWIFT_OPTIMIZATION_LEVEL'</span>] = <span class="string">'-Onone'</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#    elsif config.name == "Release" then</span></div><div class="line"><span class="comment">#    config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'</span></div><div class="line"><span class="comment">#    config.build_settings['SWIFT_VERSION'] = '3.0'</span></div><div class="line"><span class="comment">#    end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">post_install <span class="keyword">do</span> <span class="params">|installer|</span></div><div class="line"></div><div class="line"></div><div class="line">    projects = [</div><div class="line">    <span class="string">"SwiftConfig"</span></div><div class="line">    ]</div><div class="line"></div><div class="line">    projects.each <span class="keyword">do</span> <span class="params">|proj|</span></div><div class="line">        path = <span class="string">"%s.xcodeproj"</span> % [proj]</div><div class="line"></div><div class="line">        single_project = Xcodeproj::Project.open(path)</div><div class="line"></div><div class="line">        single_project.targets.each <span class="keyword">do</span> <span class="params">|target|</span></div><div class="line"></div><div class="line">            target.build_configurations.each <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line">                print path, <span class="string">' '</span>, target.name, <span class="string">' '</span>, config.name</div><div class="line">                puts <span class="string">""</span></div><div class="line"></div><div class="line">                update_config config</div><div class="line">            <span class="keyword">end</span></div><div class="line">            target.attributes.methods.each <span class="keyword">do</span> <span class="params">|xx|</span></div><div class="line">              puts xx</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        single_project.save</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>不过加入这段代码后发现。我虽然确实成功的修改了工程文件。但是发现Xcode依旧没有把Swift运行时的库给我复制进APP里面。<br>所以这还算是一个不完美的地方。后续有结果的话更新此文。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://onk2m6gtu.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E6%88%982%E9%83%A8%E5%88%86%E5%8A%A8%E6%80%81%E5%8C%96Componment.zip" target="_blank" rel="external">文中的示例代码</a></li>
<li><a href="https://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html" target="_blank" rel="external">Objective-C类成员变量深度剖析</a></li>
<li><a href="http://www.jianshu.com/p/5860f5542f21#" target="_blank" rel="external">Swift库二进制接口(ABI)兼容性研究</a></li>
<li><a href="http://www.jianshu.com/p/0d3db4422954" target="_blank" rel="external">Swift 性能相关</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;mid=2651113098&amp;idx=1&amp;sn=9edba2142c80f1082b95675c1a836a33&amp;chksm=844c6f57b33be641ee86cda33e066d0684d07d5d9e553a06f19f12763fee85a75224d9381603&amp;mpshare=1&amp;scene=23&amp;srcid=0515gXgQIPveCb19fV7OrGMh#rd" target="_blank" rel="external">今日头条iOS客户端启动速度优化实践</a></li>
<li><a href="https://github.com/keith/swift-staticlibs" target="_blank" rel="external">将Swift代码编译为静态库</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#回忆之前&quot;&gt;回忆之前&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#不建议在组件化的项目中使用swift来写业务&quot;&gt;不建议在组件化的项目中使用Swift来写业务。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#动态库
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件化-动态库实战</title>
    <link href="http://valiantcat.com/2017/04/24/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/"/>
    <id>http://valiantcat.com/2017/04/24/组件化-动态库实战/</id>
    <published>2017-04-24T03:17:41.000Z</published>
    <updated>2017-04-25T10:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<ul>
<li><a href="#起因">起因</a></li>
<li><a href="#理论功底">理论功底</a><ul>
<li><a href="#动态库和静态库">动态库和静态库</a><ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#静态库和动态库的区别">静态库和动态库的区别</a></li>
<li><a href="#举个例子-ios项目中使用embeded-framework">举个例子， iOS项目中使用Embeded Framework</a></li>
<li><a href="#静态库和动态库如何构建和加载">静态库和动态库如何构建和加载</a></li>
<li><a href="#静态库和动态库依赖关系">静态库和动态库依赖关系</a></li>
</ul>
</li>
<li><a href="#xcode-项目结构">Xcode 项目结构</a><ul>
<li><a href="#ios依赖管理事实上的标准">iOS依赖管理事实上的标准</a></li>
</ul>
</li>
<li><a href="#解决问题">解决问题</a><ul>
<li><a href="#制作动态库">制作动态库</a></li>
</ul>
</li>
<li><a href="#剖析下动态库framework吧">剖析下动态库Framework吧</a><ul>
<li><a href="#回过头来看embened-framework">回过头来看Embened Framework</a></li>
<li><a href="#why-swift-does-not-support-staic-libraies">Why Swift does not Support Staic Libraies</a></li>
<li><a href="#cocoapods-使用use_framework">CocoaPods 使用Use_framework!</a></li>
<li><a href="#动态库framework的文件结构">动态库Framework的文件结构</a><ul>
<li><a href="#更愉快的导入文件">更愉快的导入文件</a></li>
</ul>
</li>
<li><a href="#资源问题">资源问题</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#参考">参考</a></li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<hr>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><blockquote>
<p> 去年，链家网iOS端，之前由于所有的业务端代码都是混乱管理，造成开发有很多痛点<code>无法单测</code> <code>团队成员提交代码冲突机率大</code> <code>CI配合效果差</code> <code>功能性代码多端无法复用</code> <code>单仓库代码量大</code> <code>编译时间长</code> 等等痛点，领导和组内多次沟通开始着手组件化开发，希望能改进这些开发中的痛点，成立组件化团队。<br> 组件化的方案大同小异，基础性代码封装私有库，业务组件交互交由中间件负责，项目依赖工具用 iOS项目事实上的标准 <code>CocoaPods</code><br>前期的基础性组件拆分都较为顺利，从依赖树的叶子节点开发是最合适的方案。<br>随着组件抽离的越来越多，私有库的依赖体系也越来越复杂，慢慢过渡到了业务组件。业务组件用了Swift的第三方组件，用了Swift库的同学都知道必须加上<code>use_frameworks!</code>，这个标记是说Pod管理的依赖全部编译为<code>动态库</code>，然后呢我们的很多组件又依赖了诸如百度地图，微信分享等<code>静态库</code>，于是我在执行 <code>pod install</code> 报了一个没有碰见过的错误</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[!] The <span class="string">'Pods-LJA_Example'</span> target has transitive dependencies that <span class="keyword">include</span> static <span class="symbol">binaries:</span> (<span class="regexp">/Users/nero</span><span class="regexp">/Desktop/</span>Static_Dynamic/Componment/Example/Pods/libWeChatSDK/libWeChatSDK.a)</div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/installError.png" alt="installError"></p>
<blockquote>
<p>这就尴尬了，于是一阵疯狂的搜索 google stackoverflow 等，然而并没有什么卵用，而且上面催得急，根本没时间处理这些<code>小问题</code> 业务重构是最主要的，以至于我们的业务组件没有做到独立仓库拆分。<br>直到最近终于找到了解决办法:(   主要是自己的功力不够深厚</p>
</blockquote>
<h1 id="理论功底"><a href="#理论功底" class="headerlink" title="理论功底"></a>理论功底</h1><h2 id="动态库和静态库"><a href="#动态库和静态库" class="headerlink" title="动态库和静态库"></a>动态库和静态库</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>首先静态库和动态库都是以二进制提供代码复用的代码库</p>
<ul>
<li>静态库 常见的是 <code>.a</code></li>
<li>动态库常见的是 <code>.dll(windows)</code> <code>.dylib(mac)</code> <code>so(linux)</code></li>
<li>framework(in Apple):  Framework是Cocoa/Cocoa Touch程序中使用的一种资源打包方式，可以将代码文件、头文件、资源文件、说明文档等集中在一起，方便开发者使用。<br>也就是说我们的framework其实是资源打包的方式，和静态库动态库的本质是没有关系的</li>
</ul>
</blockquote>
<h3 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a>静态库和动态库的区别</h3><p>静态库: 链接时会被完整的复制到可执行文件中，所以如果两个程序都用了某个静态库，那么每个二进制可执行文件里面其实都含有这份静态库的代码<br>动态库: 链接时不复制，在程序启动后用dyld加载，然后再决议符号，所以理论上动态库只用存在一份，好多个程序都可以动态链接到这个动态库上面，达到了节省内存(不是磁盘是内存中只有一份动态库)，还有另外一个好处，由于动态库并不绑定到可执行程序上，所以我们想升级这个动态库就很容易，windows 和linux上面一般插件和模块机制都是这样实现的。</p>
<p>But我们的苹果爸爸在iOS平台上规定不允许存在动态库，并且所有的IPA都需要经过苹果爸爸的私钥加密后才能用，基本你用了动态库也会因为签名不对无法加载，(越狱和非APP store除外)。于是就把开发者自己开发动态库掐死在幻想中。<br>直到有一天，苹果爸爸的iOS升级到了8，iOS出现了<code>APP Extension</code>，<code>swift</code>编程语言也诞生了，由于iOS 主APP需要和Extension共享代码，Swift语言的机制也只能有动态库，于是苹果爸爸尴尬了，不过这难不倒我们的苹果爸爸，毕竟我是爸爸，规则是我来定，我想怎样就怎样，于是提出了一个概念<code>Embedded Framework</code>，这种动态库允许<code>APP</code> 和 <code>APP Extension</code>共享代码，但是这份动态库的生命被限定在一个APP进程内。简单点可以理解为 被阉割的动态库。</p>
<h3 id="举个例子-ios项目中使用embeded-framework"><a href="#举个例子，-iOS项目中使用Embeded-Framework" class="headerlink" title="举个例子，  iOS项目中使用Embeded Framework"></a>举个例子，  iOS项目中使用Embeded Framework</h3><p>如果你把某个自己开发的动态库(系统的不算，毕竟苹果是爸爸)放在了<code>Linked Frameworks and Libraries</code>里面，程序一启动就会报<code>Reason: Image Not Found</code>，你只能把它放在<code>Embeded Binaries</code>里面才能正常使用，<br>看图: <img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/useEmbededFramework.png" alt=""></p>
<h3 id="静态库和动态库如何构建和加载"><a href="#静态库和动态库如何构建和加载" class="headerlink" title="静态库和动态库如何构建和加载"></a>静态库和动态库如何构建和加载</h3><p>简单点，说话的方式简单点~~ </p>
<hr>
<p>上面的介绍貌似有点抽象啊 套用在美团技术分享大会上的话就是:<br>静态库: 一堆目标文件(.o/.obj)的打包体(并非二进制文件)<br>动态库: 一个没有main函数的可执行文件</p>
<hr>
<p>这里我们来复习下C语言的基本功，编译和链接<br>编译:将我们的源代码文件编译为目标文件<br>链接:将我们的各种目标文件加上一些第三方库，和系统库链接为可执行文件。<br> 由于某个目标文件的符号(可以理解为变量，函数等)可能来自其他目标文件，其实链接这一步最主要的操作就是 决议符号的地址。</p>
<ul>
<li>若符号来⾃静态库(本质就是.o的集合包)或 .o，将其纳⼊链接产物，并确定符号地址</li>
<li>若符号来⾃动态库，打个标记，等启动的时候再说—交给dyld去加载和链接符号</li>
</ul>
<p>于是链接加装载就有了不同的情况</p>
<ol>
<li>Load 装载：将库⽂件载⼊内存<ul>
<li>Static Loading：启动时</li>
<li>Dynamic Loading：启动后（使⽤时）</li>
</ul>
</li>
<li>Link 链接：决议符号地址<ul>
<li>Static Linking：构建（链接）时</li>
<li>Dynamic Linking：运⾏时（启动时或使⽤时）</li>
</ul>
</li>
</ol>
<p>然后组合起来就是2*2 = 4了</p>
<ol>
<li>Static Loading + Static Linking</li>
<li>Static Loading + Dynamic Linking</li>
<li>Dynamic Loading + Dynamic Linking</li>
<li><del>Dynamic Loading + Static Linking</del><br>第一种是纯静态库相关了<br>第二种就是静态加载(启动时)，动态链接 ，链接时，动态库参与链接，但是这时候只是给符号打了标记告诉我这个符号来自与动态库，程序启动时，iOS或者Mac OS操作系统的dyld自动 load+link。<br>既然全部都是自动的。那么符号的调用方完全不知道你到底是源码还是静态库，动态库 。<br>第三种收到调用dlopen + performSelector 通常iOS的APP不适用这里不讨论<br>第四种，没见过，个人也不是特别懂<br>有需求请参看文后的<code>程序员的自我修养</code>一书</li>
</ol>
<h3 id="静态库和动态库依赖关系"><a href="#静态库和动态库依赖关系" class="headerlink" title="静态库和动态库依赖关系"></a>静态库和动态库依赖关系</h3><p>既然有2种库，那么依赖关系又是2*2喽</p>
<ol>
<li>libA.a dependency libB.a</li>
<li>UIKit.dylib dependency Foundation.dylib</li>
<li>libA.a dependency Foundation.dylib</li>
<li>MyXX.dylib dependency libA.a</li>
</ol>
<p>第一种 静态库互相依赖，这种情况非常常见，制作静态库的时候只需要有被依赖的静态库头文件在就能编译出来。但是这就意味者你要收到告诉使用者你的依赖关系<br>幸运的是 <code>CocoaPod</code>就是这样做的<br>第二种动态库依赖动态库，两个动态库是相互隔离的具有<code>隔离性</code>，但是制作的静态库的时候需要被依赖动态库参与链接，但是具体的符号决议交给<code>dyld</code>来做。<br>第三种，静态库依赖动态库，也很常见，静态库制作的时候也需要动态库参与链接，但是符号的决议交给dyld来做。<br>第四种，动态库依赖静态库，这种情况就有点特殊了。首先我们设想动态库编译的时候需要静态库参与编译，但是静态库交由dyld来做符号决议，but 这和我们前面说的就矛盾了啊。静态库本质是一堆.o的打包体，首先并不是二进制可执行文件，再者你无法保证主程序把静态库参与链接共同生成二进制可执行文件。这就尴尬了。<br>怎么办？<br>目前的编译器的解决办法是，首先我无法保证主程序是否包含静态库，再者静态库也无法被<code>dyld</code>加载，那么我直接把你静态库的.o偷过来，共同组成一个新的二进制。也被称做<code>吸附性</code></p>
<p>那么我有多份动态库都依赖同样的静态库，这就尴尬了，每个动态库为了保证自己的正确性会把静态库吸附进来。然后两个库包含了同样的静态库，于是问题就出现了。 看到这里想必前面出现的错误你已经能猜出来了把~_~</p>
<p>后面再详细解释</p>
<p>先来个总结<br>可执⾏⽂件（主程序或者动态库）在构建的链接阶段</p>
<ul>
<li>遇到静态库，吸附进来</li>
<li>遇到动态库，打标记，彼此保持独⽴</li>
</ul>
<h2 id="xcode-项目结构"><a href="#Xcode-项目结构" class="headerlink" title="Xcode 项目结构"></a>Xcode 项目结构</h2><p>target-对于一个产物(app,.a ,.framework)<br>project-一个项目包含多个target<br>workspace:一个包含多个target<br>schema: 指定了一个产物是按照何种的依赖关系，编译-链接到最终的一个产物</p>
<h3 id="ios依赖管理事实上的标准"><a href="#iOS依赖管理事实上的标准" class="headerlink" title="iOS依赖管理事实上的标准"></a>iOS依赖管理事实上的标准</h3><p>这么多年，Apple的博客和文档也就告诉了我们什么是静态库 什么是动态库，如何制作等。但是并没有给我们提供一系列的依赖管理工具。所以CocoaPods成了事实上的标准。<br>通常CocoaPods管理的工程结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">• CocoaPods</div><div class="line">      + App.workspace</div><div class="line">            + App.project</div><div class="line">            • Pods.project</div><div class="line">                    • pod target =&gt; .a</div></pre></td></tr></table></figure></p>
<p>那么当我们按下CMD+B的时候，整个项目按照先编译被依赖Pod，然后依赖其他Pod的Pod也被构建出来，最终所有的组件被编译为一个<code>lib-Pods-XXXAPP.a</code>被添加进项目进去。资源通过CocoaPods提供的脚本也一并被复制进去。想了解CocoaPods做了什么的读者可以参看后面的链接</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>这么多理论功底的建立，相信我们已经能分析出来之前<code>pod install</code>的原因了。就是用了<code>use_framework</code>那么我们的所有Pod都会以动态库(Embeded Framework)的形式去构建，于是那些非开源的库(如 百度地图，微信分享)如果被多个Pod依赖(组件化开发中太常见了)于是被吸附到动态库里面，所以CocoaPod直接就不让我们install成功。因为你现在的依赖管理就是错误的。<br>在听取美团叶樉老师分享的时候 他们的出发点是因为要绕过苹果爸爸在iOS9以下对__text段60M的限制使用了动态库方案，我们是因为某些swift库必须要用到(历史遗留原因)动态库。美团的做法是摘除依赖关系，自定义CocoaPods(开源的本来就是用着不爽我就改)。但是我是个小菜鸡啊。我也不会ruby(以后会学的)，但是叶樉老师给我提了别的idea。  前面我们知道 动态库和动态库是<code>隔离性</code>，动态库依赖静态库具有<code>吸附性</code>，那么我们可以自定义一个动态库把百度地图这种静态库吸附进来。对外整体呈现的是动态库特性。其他的组件依赖我们自定义的动态库，由于<code>隔离性</code>的存在，不会出现问题。</p>
<h3 id="制作动态库"><a href="#制作动态库" class="headerlink" title="制作动态库"></a>制作动态库</h3><p>1 创建动态库项目这里以wx举例<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/createDynamicFramework.png" alt=""></p>
<p>2 按照微信的官方文档。添加依赖库(我是因为pod install巨慢 所以我直接拽进来了)<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/wxDdependency.png" alt=""></p>
<p>3 将wx的PublicHeader暴露出来，注意由于我并没有使用到wx相关API所以链接器帮我们链接动态库 的时候可能并不会把wx静态库吸附进来。我们手动在build Setting的other link flags加上<code>-all_load</code>标记<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/publicHeader.png" alt=""></p>
<p>4.在Schema里面跳转编译配置为Release ，并且选择所有的CPU架构<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/SchemaRelease.png" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/buildArchive.png" alt=""></p>
<p>5 然后选择模拟器或者Generic iOS Device运行编译就会生成对应版本的Framework了。<br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/releaseFrameworl.png" alt=""></p>
<p>6.但是为了保证开发者使用的时候是真机模拟器都能正常使用，我们需要合并不同架构<br>这里在<code>Build Phases</code>里添加以下脚本，真机和模拟器都Build一遍之后就会在工程目录下生成Products文件夹，</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;ACTION&#125;</span>"</span> = <span class="string">"build"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">INSTALL_DIR=<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</div><div class="line">DEVICE_DIR=<span class="variable">$&#123;BUILD_ROOT&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</div><div class="line">SIMULATOR_DIR=<span class="variable">$&#123;BUILD_ROOT&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</div><div class="line"><span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>"</span> ]</div><div class="line"><span class="keyword">then</span></div><div class="line">rm -rf <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">mkdir -p <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>"</span></div><div class="line">cp -R <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>/"</span> <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>/"</span></div><div class="line"><span class="comment">#ditto "$&#123;DEVICE_DIR&#125;/Headers" "$&#123;INSTALL_DIR&#125;/Headers"</span></div><div class="line">lipo -create <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span> -output <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span></div><div class="line">open <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>"</span></div><div class="line">open <span class="string">"<span class="variable">$&#123;SRCROOT&#125;</span>/Products"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/fatframework.png" alt=""></p>
<p>于是我们有了我们自己的私有动态库LJWXSDK，那么我们来验证我们之前的问题<br>首先指定一个LJWXSDK.podspec这里我直接传到了我的<a href="https://github.com/ValiantCat/LJWXSDK" target="_blank" rel="external">Github</a>上面</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to run `pod lib lint LJPod.podspec' to ensure this is a</span></div><div class="line"><span class="comment"># valid spec before submitting.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Any lines starting with a # are optional, but their use is encouraged</span></div><div class="line"><span class="comment"># To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'LJWXSDK'</span></div><div class="line">  s.version          = <span class="string">'0.1.0'</span></div><div class="line">  s.summary          = <span class="string">'A short description of LJWXSDK.'</span></div><div class="line"></div><div class="line"></div><div class="line">  s.description      = <span class="string">&lt;&lt;-DESC</span></div><div class="line">  TODO: Add long description of the pod here.</div><div class="line">  DESC</div><div class="line"></div><div class="line">  s.homepage         = <span class="string">'https://github.com/ValiantCat/LJWXSDK'</span></div><div class="line"></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'ValiantCat'</span> =&gt; <span class="string">'519224747@qq.com'</span> &#125;</div><div class="line">  s.source = &#123; <span class="symbol">:http</span>  =&gt; <span class="string">'http://onk2m6gtu.bkt.clouddn.com/LJWXSDK.framework.zip'</span> &#125;</div><div class="line"></div><div class="line"></div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line">  s.default_subspec = <span class="string">'zip'</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'zip'</span> <span class="keyword">do</span> <span class="params">|zip|</span></div><div class="line">  </div><div class="line">    puts <span class="string">'-------------------------------------------------------------------'</span></div><div class="line">    puts <span class="string">'Notice:LJWXSDK is zip now'</span></div><div class="line">    puts <span class="string">'-------------------------------------------------------------------'</span></div><div class="line"></div><div class="line">    zip.ios.vendored_frameworks = <span class="string">'*.framework'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>注意上面我是把二进制压缩丢进了七牛的oss文件存储。毕竟免费还快。</p>
<p>然后通过pod lib create创建了一个pod用来验证之前我们的传递性依赖问题，<br>文件夹结构如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Example</div><div class="line">│   ├── LJA</div><div class="line">│   │   ├── Base.lproj</div><div class="line">│   │   │   ├── LaunchScreen.storyboard</div><div class="line">│   │   │   └── Main.storyboard</div><div class="line">│   │   ├── Images.xcassets</div><div class="line">│   │   │   └── AppIcon.appiconset</div><div class="line">│   │   │       └── Contents.json</div><div class="line">│   │   ├── LJA-Info.plist</div><div class="line">│   │   ├── LJA-Prefix.pch</div><div class="line">│   │   ├── LJAppDelegate.h</div><div class="line">│   │   ├── LJAppDelegate.m</div><div class="line">│   │   ├── LJViewController.h</div><div class="line">│   │   ├── LJViewController.m</div><div class="line">│   │   ├── en.lproj</div><div class="line">│   │   │   └── InfoPlist.strings</div><div class="line">│   │   └── main.m</div><div class="line">│   ├── LJA.xcodeproj</div><div class="line">│   ├── LJA.xcworkspace</div><div class="line">│   ├── Podfile</div><div class="line">│   ├── Podfile.lock</div><div class="line">│   ├── Pods</div><div class="line">│   │   ├── Headers</div><div class="line">│   │   ├── LJWXSDK</div><div class="line">│   │   │   └── LJWXSDK.framework</div><div class="line">│   │   │       ├── Headers</div><div class="line">│   │   │       │   ├── LJWXSDK.h</div><div class="line">│   │   │       │   ├── WXApi.h</div><div class="line">│   │   │       │   ├── WXApiObject.h</div><div class="line">│   │   │       │   └── WechatAuthSDK.h</div><div class="line">│   │   │       ├── Info.plist</div><div class="line">│   │   │       ├── LJWXSDK</div><div class="line">│   │   │       ├── Modules</div><div class="line">│   │   │       │   └── module.modulemap</div><div class="line">│   │   │       ├── _CodeSignature</div><div class="line">│   │   │       │   └── CodeResources</div><div class="line">│   │   │       └── read_me.txt</div><div class="line">│   │   ├── Local\ Podspecs</div><div class="line">│   │   │   ├── LJA.podspec.json</div><div class="line">│   │   │   ├── LJB.podspec.json</div><div class="line">│   │   │   └── LJWXSDK.podspec.json</div><div class="line">│   │   ├── Manifest.lock</div><div class="line">│   │   ├── Pods.xcodeproj</div><div class="line">│   │   │   ├── project.pbxproj</div><div class="line">│   │   │   ├── project.xcworkspace</div><div class="line">│   │   ├── Target\ Support\ Files</div><div class="line">│   │   │   ├── LJA</div><div class="line">│   │   │   │   ├── Info.plist</div><div class="line">│   │   │   │   ├── LJA-dummy.m</div><div class="line">│   │   │   │   ├── LJA-prefix.pch</div><div class="line">│   │   │   │   ├── LJA-umbrella.h</div><div class="line">│   │   │   │   ├── LJA.modulemap</div><div class="line">│   │   │   │   └── LJA.xcconfig</div><div class="line">│   │   │   ├── LJB</div><div class="line">│   │   │   │   ├── Info.plist</div><div class="line">│   │   │   │   ├── LJB-dummy.m</div><div class="line">│   │   │   │   ├── LJB-prefix.pch</div><div class="line">│   │   │   │   ├── LJB-umbrella.h</div><div class="line">│   │   │   │   ├── LJB.modulemap</div><div class="line">│   │   │   │   └── LJB.xcconfig</div><div class="line">│   │   │   ├── Pods-LJA_Example</div><div class="line">│   │   │   │   ├── Info.plist</div><div class="line">│   │   │   │   ├── Pods-LJA_Example-acknowledgements.markdown</div><div class="line">│   │   │   │   ├── Pods-LJA_Example-acknowledgements.plist</div><div class="line">│   │   │   │   ├── Pods-LJA_Example-dummy.m</div><div class="line">│   │   │   │   ├── Pods-LJA_Example-frameworks.sh</div><div class="line">│   │   │   │   ├── Pods-LJA_Example-resources.sh</div><div class="line">│   │   │   │   ├── Pods-LJA_Example-umbrella.h</div><div class="line">│   │   │   │   ├── Pods-LJA_Example.debug.xcconfig</div><div class="line">│   │   │   │   ├── Pods-LJA_Example.modulemap</div><div class="line">│   │   │   │   └── Pods-LJA_Example.release.xcconfig</div><div class="line">│   │   │   └── Pods-LJA_Tests</div><div class="line">│   │   │       ├── Info.plist</div><div class="line">│   │   │       ├── Pods-LJA_Tests-acknowledgements.markdown</div><div class="line">│   │   │       ├── Pods-LJA_Tests-acknowledgements.plist</div><div class="line">│   │   │       ├── Pods-LJA_Tests-dummy.m</div><div class="line">│   │   │       ├── Pods-LJA_Tests-frameworks.sh</div><div class="line">│   │   │       ├── Pods-LJA_Tests-resources.sh</div><div class="line">│   │   │       ├── Pods-LJA_Tests-umbrella.h</div><div class="line">│   │   │       ├── Pods-LJA_Tests.debug.xcconfig</div><div class="line">│   │   │       ├── Pods-LJA_Tests.modulemap</div><div class="line">│   │   │       └── Pods-LJA_Tests.release.xcconfig</div><div class="line">│   │   └── libWeChatSDK</div><div class="line">│   │       ├── README.md</div><div class="line">│   │       ├── WXApi.h</div><div class="line">│   │       ├── WXApiObject.h</div><div class="line">│   │       ├── WechatAuthSDK.h</div><div class="line">│   │       └── libWeChatSDK.a</div><div class="line">├── LICENSE</div><div class="line">├── LJA</div><div class="line">│   ├── Assets</div><div class="line">│   └── Classes</div><div class="line">│       └── LJA.m</div><div class="line">├── LJA.podspec</div><div class="line">├── LJB</div><div class="line">│   ├── Assets</div><div class="line">│   └── Classes</div><div class="line">│       └── LJB.m</div><div class="line">├── LJB.podspec</div><div class="line">├── README.md</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/testframework.png" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/dependencyDynamicLibrary.png" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/useDynamicFramework.png" alt=""></p>
<p>测试工程我也丢在7牛上面。<a href="http://onk2m6gtu.bkt.clouddn.com/Componment.zip" target="_blank" rel="external">下载</a>测试即可<br>编译运行。完美。我们又可以愉快的和swift第三方库配合使用。<br>很多人可能会问 诸如百度地图 微信这种sdk为什么官方不支持动态库版(所说的都是embeded Framework)，猜测是为了兼容更低iOS7版本吧<br>很多人会觉得麻烦的要死。首先每个公司多多少少都有历史包袱，麻烦也要做，再者这是一次对基本功的补充，即便你们没有用到，但是为了学习，这篇教程所做的也值得你尝试一次。</p>
<h2 id="剖析下动态库framework吧"><a href="#剖析下动态库Framework吧" class="headerlink" title="剖析下动态库Framework吧"></a>剖析下动态库Framework吧</h2><p>上述解决了我们一开始遇到的问题。but既然动态库和静态库压根就不一回事，所以里面还是有很多细节值得我们去了解的。</p>
<h3 id="回过头来看embened-framework"><a href="#回过头来看Embened-Framework" class="headerlink" title="回过头来看Embened Framework"></a>回过头来看Embened Framework</h3><p>首先我们之前记得如果一个动态库加在<code>LinkedFrameworksand Libraies</code>程序启动就会报ImageNotFound，如果放在<code>EmbededBinaries</code>里面就可以。这是为什么呢。我们拿MacoView来看下两种情况下可执行文件的细节</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/loadEmbededFramework.png" alt=""></p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/loadSystemFramework.png" alt=""></p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/appContentFiles.png" alt=""></p>
<p>其中@rpth这个路径表示的位置可以查看<a href="http://www.jianshu.com/p/cd614e080078" target="_blank" rel="external">Xcode 中的链接路径问题</a><br>这样我们就知道了其实加在<code>EmbededBinaries</code>里面的东西其实会被复制一份到xx.app里面，所以这个名字起得还是不错的直译就是<code>嵌入的框架</code></p>
<h3 id="why-swift-does-not-support-staic-libraies"><a href="#Why-Swift-does-not-Support-Staic-Libraies" class="headerlink" title="Why Swift does not Support Staic Libraies"></a>Why Swift does not Support Staic Libraies</h3><p>造成这个的主要原因是Swift的运行时库(不等同于OC的runtime概念)，由于Swift的ABI不稳定，静态库会导致最终的目标程序中包含重复的运行库，相关可以看下最后的参考文章<a href="https://github.com/ksm/SwiftInFlux#static-libraries" target="_blank" rel="external">SwiftInFlux#static-libraries</a>。等到我们的SwiftABI稳定之后，我们的静态库支持可能就又会出现了。当然也可能不出，Swift伴随诞生的SPM(Swift，Package Manager)，可能有更好的<code>官方的</code>包依赖管理工具。让我们期待吧。</p>
<h3 id="cocoapods-使用use_framework"><a href="#CocoaPods-使用Use-framework" class="headerlink" title="CocoaPods 使用Use_framework!"></a>CocoaPods 使用Use_framework!</h3><p>既然加了Swift的第三方库之后就需要在<code>Podfile</code>里面加上<code>use_framework!</code> 那么CocoaPods就会帮我们生成动态库，但是奇怪的是，我们并没有在主工程的<code>embeded binaries</code>看到这个动态库，这又是什么鬼。其实是CocoaPods使用脚本帮我们加进去了。脚本位置在主工程的 <code>build Phase</code>下的 <code>Emded Pods frameworks</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"<span class="variable">$&#123;SRCROOT&#125;</span>/Pods/Target Support Files/Pods-LJA_Example/Pods-LJA_Example-frameworks.sh"</span></div></pre></td></tr></table></figure>
<h3 id="动态库framework的文件结构"><a href="#动态库Framework的文件结构" class="headerlink" title="动态库Framework的文件结构"></a>动态库Framework的文件结构</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Headers</div><div class="line">│   ├── LJWXSDK.h</div><div class="line">│   ├── WXApi.h</div><div class="line">│   ├── WXApiObject.h</div><div class="line">│   └── WechatAuthSDK.h</div><div class="line">├── Info.plist</div><div class="line">├── LJWXSDK</div><div class="line">├── Modules</div><div class="line">│   └── module.modulemap</div><div class="line">└── _CodeSignature</div><div class="line">    └── CodeResources</div></pre></td></tr></table></figure>
<ol>
<li>Headers  一般是头文件。非private里面的头文件都会在里面</li>
<li>info.plist 配置信息，不深究</li>
<li>Modules   这个文件夹里有个module.modulemap文件，后面在讲解</li>
<li>二进制文件，这就是上面提到的<code>不带 main的二进制文件了</code>，.o的打包体</li>
<li>_codeSignature 签名文件 (苹果爸爸的约束)</li>
<li>more  资源文件。这里暂时没用到，所以没有 ，但是这个也是个大坑</li>
</ol>
<h4 id="更愉快的导入文件"><a href="#更愉快的导入文件" class="headerlink" title="更愉快的导入文件"></a>更愉快的导入文件</h4><p><code>@class，@protocol</code> 不说了就是声明一个类，并不导入。<br><code>#import &lt;&gt;, #import&quot;&quot;</code>是加强版的<code>#include&lt;&gt;，#include&quot;&quot;</code> 防止重复导入的。<br><code>#import&lt;&gt;</code> : 通过 build setting里面中的 header Search Path里面去找<br><code>#import&quot;&quot; :</code> 第一步先搜索user Header search Path 再搜索 header search Path 。所以对我们的framework来说，<code>CocoaPod</code> 帮我们加到了 Header search Path 目前2种导入方式都是可以支持的。<br>上面的导入方式都带了 某个framework的路径 <xx xx.h=""> “xx/xx.h” ，我们在开发自己主工程的时候会发现我们导入主工程其他类是不需要导入前缀的。 这又是怎么回事。<br>看下面的配置<img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/no-recursive.png" alt=""> 目前的配置是non-recursive。如果把non去掉意思就是我可以递归的去查找某些framework下面的头文件了。  但是Xcode的效率肯定就会有影响。<br>还是不建议修改的好。</xx></p>
<hr>
<p>大家都知道iOS7之后多了@import，这又是什么鬼。<br>简单理解这个方式叫做Module导入，好处就是使用了@import之后不需要在project setting手动添加 framework，系统会自动加载，而且效率更高。<br>最主要的是swift也只能这样用。<br>导入的时候系统会查找如果有模块同名的文件就会导入这个文件。如果没有CocoaPods帮我们生成一个<code>module-umbrela.hl</code>文件，然后就是导入的这个文件。</p>
<p>回过头来看我们的framework的结构 里面有个<code>Modules</code>文件夹，里面有个文件<code>module.modulemap</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">framework <span class="keyword">module</span> LJWXSDK &#123;</div><div class="line">  umbrella header <span class="string">"LJWXSDK.h"</span></div><div class="line"></div><div class="line">  <span class="keyword">export</span> *</div><div class="line">  <span class="keyword">module</span> * &#123; <span class="keyword">export</span> * &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到其实被暴露的header就是这个文件，之前我在按照<code>#import &quot;/&quot;</code>的时候有个警告</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E7%BB%84%E4%BB%B6%E5%8C%96-%E5%8A%A8%E6%80%81%E5%BA%93%E5%AE%9E%E6%88%98/missSubModule.png" alt=""><br>而且按照@import导入的东西发现没有导入可用的头文件就是因为并没有在 umbrella header的头文件中加入其他头文件。<br>加入之后我们就可以完美的使用<code>@import</code> ，并且<code>#import&quot;/&quot;</code> 也不会报warning<br>更多关于<code>umbrella Header</code> 参看文后参考</p>
<h3 id="资源问题"><a href="#资源问题" class="headerlink" title="资源问题"></a>资源问题</h3><p>首先我们来看常见的资源文件:主要分为图片和其他类资源那么加载图片和加载其他资源都是怎么做的？<br>1:  <code>[UIimage imageNamed:]</code><br>2:  <code>[NSbundle bundleForclass[XXX class]]</code><br>其实方式1去本质就是去<code>mainBundle</code>去拿资源，方式2从<code>XXX</code>所在的框架里面去拿。<br>前面也说道framework只是资源的打包方式，本质上是有两种的。<br>我们这个framework如果本质是静态库，那么无需改变使用方式，资源最终都会打包到<code>Main Bundle</code>里面<br>如果我们这个framework本质是动态库，那么我们的资源就发生了变化，资源就会被存放在 framework里面。所以我们需要使<code>[NSbundle bundleForclass[XXX class]]</code>。需要注意的是很多人为了简单，下意识的使用<code>self class</code> 传递，但是有可能这个<code>self实例</code>不在资源所属的framework。所以会出现资源加载 失败。一定要谨慎使用。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://item.jd.com/10362683979.html" target="_blank" rel="external">程序员的自我修养，链接，装载 和库</a><br><a href="https://www.zybuluo.com/qidiandasheng/note/603907" target="_blank" rel="external">iOS里的动态库和静态库</a><br><a href="https://www.quora.com/Systems-Programming-What-is-the-exact-difference-between-Dynamic-loading-and-dynamic-linking" target="_blank" rel="external">Systems Programming: What is the exact difference between Dynamic loading and dynamic linking?</a><br><a href="http://draveness.me/cocoapods.html" target="_blank" rel="external">CocoaPods 都做了什么？</a><br><a href="https://www.codeproject.com/articles/187181/dynamic-linking-of-imported-functions-in-mach-o" target="_blank" rel="external">Dynamic Linking of Imported Functions in Mach-O</a><br><a href="https://www.zybuluo.com/qidiandasheng/note/602118" target="_blank" rel="external">OS里的导入头文件</a><br><a href="http://blog.startry.com/2015/08/25/Renaming-umbrella-header-for-iOS-framework/" target="_blank" rel="external">iOS - Umbrella Header在framework中的应用</a><br><a href="https://github.com/ksm/SwiftInFlux#static-libraries" target="_blank" rel="external">SwiftInFlux#static-libraries</a><br><a href="https://www.zybuluo.com/qidiandasheng/note/602118" target="_blank" rel="external">iOS里的导入头文件</a><br><a href="http://blog.startry.com/2015/08/25/Renaming-umbrella-header-for-iOS-framework/" target="_blank" rel="external">iOS - Umbrella Header在framework中的应用</a><br><a href="https://stackoverflow.com/questions/18947516/import-vs-import-ios-7" target="_blank" rel="external">@import vs #import - iOS 7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#起因&quot;&gt;起因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#理论功底&quot;&gt;理论功底&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#动态库和静态库&quot;&gt;动态库和静态库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一次关于IconFont的调研</title>
    <link href="http://valiantcat.com/2017/03/25/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8EIconFont%E7%9A%84%E8%B0%83%E7%A0%94/"/>
    <id>http://valiantcat.com/2017/03/25/一次关于IconFont的调研/</id>
    <published>2017-03-25T12:04:21.000Z</published>
    <updated>2017-03-26T03:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<!-- index-menu -->
<!-- toc-->
<blockquote>
<p>上周在虎哥的直播上承诺放出调研IconFont的经过，周末就坚持者写完这个吧。</p>
</blockquote>
<h1 id="调研原因"><a href="#调研原因" class="headerlink" title="调研原因"></a>调研原因</h1><p>用户在APP Store下载需要的APP，APP包体积是一个用户比较敏感的数据，过大的APP会对产品的推广产生不良的影响，比如:占用过大的手机存储空间。下载消耗较多网络流量(即便是wifi，后续也可能因为升级过程较为缓慢，导致用户长时间不升级，造成市面上的软件版本碎片化严重)。所以减少APP体积会带来很多正面影响。</p>
<h1 id="掌链现状"><a href="#掌链现状" class="headerlink" title="掌链现状"></a>掌链现状</h1><blockquote>
<p>我们以<code>掌上链家APP7.7.0</code>举例分析: 现在在Itunes Store下载的IPA体积大约在<code>91.1M</code>，即便<code></code>公司在iOS9之后新增了<code>APP Slicing</code>功能，在我自己的iPhone 6 Plus下载的APP安装包依然达到了<code>81.7M</code>. 安装包瘦身主要包含资源瘦身和代码段瘦身，这篇文章主要调研资源瘦身。</p>
</blockquote>
<p><em>资源的主要部分就是图片，请看下面数据</em></p>
<p>我们把iPA解压之后里面的<code>Assert.car</code>资源包的体积大约在<code>34.1M</code> 。 使用软件导出内部的资源文件发现<code>3X系列的图片</code>大小约为<code>18.1M</code>，<code>2X系列的图片</code>大小约为<code>19.4M</code>，两份加起来大于34.1M是因为软件导出的图片部分没有后缀名默认两份都会存在。所以可以看出我们的图片还是有很大的优化空间的。</p>
<p>相关数据请看以下图片<br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/01.png" alt=""><br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/02.png" alt=""><br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/03.png" alt=""><br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/04.png" alt=""><br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/05.png" alt=""></p>
<h1 id="iconfont"><a href="#IconFont" class="headerlink" title="IconFont"></a>IconFont</h1><p>首先要介绍下<a href="http://baike.baidu.com/link?url=GFEvj353kbrZkKiMUswo32x-flN8Z8hvaxbz7zfZ3SocI9j2upeHa0WEERA18ufDt3iD7MhM3PhR1Rd3sd1Up_sNQb7Nek0DI5-94Cz5MKIyURomGbYWndlPMQpgudaa" target="_blank" rel="external">矢量图</a>。<br>鉴于矢量图占用尺寸小，放大不失真，我们完全可用一套图来替换iOS传统的2x和3x系列图片，不仅仅是iOS，Android平台也不用切多份图了。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>减小体积，字体文件比图片要小</li>
<li>图标保真缩放，解决2x/3x乃至将来的nx图问题</li>
<li>方便更改颜色大小，图片复用</li>
</ol>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ol>
<li>适用于纯色icon</li>
<li>需要维护字体库</li>
</ol>
<h1 id="字体管理"><a href="#字体管理" class="headerlink" title="字体管理"></a>字体管理</h1><p>既然设计到字体，我们就要制作字体，制作字体有两种办法，一种是自己手动去做比如使用FontForge工具，另外一种是托管到阿里的<a href="http://www.iconfont.cn/" target="_blank" rel="external">iconfont平台</a>，我们的UE做字体设计完全没有意义，可以托管给平台。 托管给平台的好处:</p>
<ol>
<li>大大的降低了接入难度</li>
<li>更方便项目管理。和RD对接更方便</li>
</ol>
<p>而且iconFont可以和fontForge双重使用，FontForge工具可以再压缩这个字体文件。榨干最后一点剩余空间。</p>
<h1 id="demo"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h1><p>在<a href="http://www.iconfont.cn/" target="_blank" rel="external">iconfont平台</a>建立一个项目，随便去购买几个图标(免费的即可)， <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/06.png" alt="06">,解压后的文件夹有一个字体文件，双击安装。 mac和windows都有对应的工具管理字体<img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/07.png" alt="07">。<br> 近20张icon只占用了10k的资源空间，占用空间极小<br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96-iconFont%E8%B0%83%E7%A0%94/08.png" alt="08"></p>
<p>具体的代码我们这里不再赘述，后面的demo具体展示， 不过我们要讲一讲使用的方案</p>
<ol>
<li>UILabel作为Icon</li>
<li>UIButton的titleLabel作为Icon</li>
<li>根据字体生成UIImage </li>
</ol>
<p>鉴于将我们本来的icon当作字体使用，会让我们在项目中添加的控件方式有所变化，而且不容易控制颜色和图标大小。所以我这里推荐第三种方案。</p>
<p>更详细的方案是我们建立字体组件。将这一块功能单独管理，便于后期迭代和维护，而且屏蔽底层使用直接暴露出对应的图片接口可以让上层无感使用。</p>
<h1 id="后期如何接入"><a href="#后期如何接入" class="headerlink" title="后期如何接入"></a>后期如何接入</h1><h2 id="首期工作"><a href="#首期工作" class="headerlink" title="首期工作"></a>首期工作</h2><p>这里建议拿掌链下手:原因有一下几点</p>
<ol>
<li>掌链面向实际用户，做出来的效果更明显</li>
<li>掌链的APP安装包也最大，也最有瘦身的价值</li>
<li>掌链在经过组件化之后资源管理方式较为整齐，后期处理可以分次，灰度过度。 首期可能要麻烦UI同学，整理之前图标的对应的SVG格式，创建对应的字体库文件。工作量可能较大(约千张icon)。组件负责同学建立对应组件。 推荐的模式是可以在IconFont建立项目组，UI为owner，RD为member，方便协作和通知。</li>
</ol>
<h2 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h2><p>待稳定后，后续迭代更加简单，只需UI同学更新对应的图标，建立新字体，然后组件管理者可以更新。 对APP安装和UI与RD业务迭代效率都有很大提高。</p>
<h1 id="code"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><p>文件夹见DEMO</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="ui参考"><a href="#UI参考" class="headerlink" title="UI参考"></a>UI参考</h2><p><a href="http://www.iconfont.cn" target="_blank" rel="external">http://www.iconfont.cn</a> <a href="https://icomoon.io" target="_blank" rel="external">https://icomoon.io</a> <a href="http://fontello.com" target="_blank" rel="external">http://fontello.com</a> <a href="http://fontawesome.io/icons/" target="_blank" rel="external">http://fontawesome.io/icons/</a></p>
<h2 id="rd参考"><a href="#RD参考" class="headerlink" title="RD参考"></a>RD参考</h2><p>Android：<a href="https://github.com/mikepenz/Android-Iconics" target="_blank" rel="external">https://github.com/mikepenz/Android-Iconics</a></p>
<p>iOS： <a href="https://github.com/PrideChung/FontAwesomeKit" target="_blank" rel="external">https://github.com/PrideChung/FontAwesomeKit</a></p>
<p><a href="http://johnwong.github.io/mobile/2015/04/03/using-icon-font-in-ios.html" target="_blank" rel="external">使用IconFont减小iOS应用体积</a></p>
<hr>
<p>  华丽的分割线 </p>
<hr>
<h1 id="沟通结果"><a href="#沟通结果" class="headerlink" title="沟通结果"></a>沟通结果</h1><p>经过沟通发现掌上链家并不太适合这样的方式，原因如下</p>
<ol>
<li>之前的icon很多是用ps做的 如果改用iconfont很多图层效果无法实现</li>
<li>即便新的icon用Sketch制作矢量图，但是icon在掌链中能制作矢量图的占比较小，且对设计的人力要求过大。</li>
<li><p>位图(png，jpg)等才是占用资源大户。<br>后期考虑的方案</p>
</li>
<li><p>压缩大图 推荐使用<a href="http://ppduck.com/" target="_blank" rel="external">PPDUCK</a>(收费) <a href="https://imageoptim.com/mac" target="_blank" rel="external">imageOption</a>，<a href="https://www.baidu.com/link?url=KkC7lFY89TwZELeYuV93DGrVaUInl3IYeq69FIHm0vp6mG8NrKBif_ewcW-9aZKC&amp;wd=&amp;eqid=cf83ff7b00071ce80000000358d65ecf" target="_blank" rel="external">]tinyPng</a></p>
</li>
<li>删除重复资源(上海链家合并期间部分资源重复，但是由于工期太短没有剔除)</li>
<li>替换旧icon ,且可以统一UI风格</li>
</ol>
<h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><blockquote>
<p> 我尝试使用了上面推荐的三个压缩软件进行压缩，对比如下</p>
<ol>
<li>imageOption可以使图片减少30%左右，但是压缩巨慢，压缩2500张图片耗费12H以上并且，CPU一直维持在70%左右，但是图片是无损压缩，可以放心使用</li>
<li>PPDuck压缩2500张图片需要花费5分钟不到，效果达到了惊人的70%，但是缺点也很明显，收费😂😂😂,不过我已经买了会员，有需要统一处理大批量的同学可以私信我,无偿帮忙，一般这种需求不会经常出现，在某次做包体积优化的时候才会出现一次。</li>
<li>tinyPng，TinyPng的压缩也很厉害，缺点是需要上传图片到网站，再下载回来，也很耗时，且很麻烦，不过github有开源的工具TinyPng4MAC,可以使用。但是2500张经常会让程序Crash</li>
</ol>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之所以写这篇文章，是想记录一下经过，并且向看这个文章的小伙伴们树立一个我自己的观点。无论技术有多优秀，我们最终是要落实到业务的，所以不要为了技术而技术，做事情要有始有终。很多人也会经常有困惑说我整天忙于业务，不知道如何提升，我这里想说的是所有人一开始就是做业务的，那些技术大牛更是，只有自己意识到自己的开发中涉及到的不足，私下补上自己的基本功，并且深入下去才能提高，一味的找理由说自己业务忙没时间学习都是借口(当然996这样无限制体力劳动的公司可以走人了)。</p>
<p>最后代码部分真的很简单 我就写了几行代码，最后放在<a href="https://github.com/ValiantCat/IconFontDemo/tree/master" target="_blank" rel="external">GitHub</a>上面供参考了；</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- index-menu --&gt;
&lt;!-- toc--&gt;
&lt;blockquote&gt;
&lt;p&gt;上周在虎哥的直播上承诺放出调研IconFont的经过，周末就坚持者写完这个吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;调研原因&quot;&gt;&lt;a href=&quot;#调研原因&quot; clas
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自动检测第三方Pod小工具</title>
    <link href="http://valiantcat.com/2017/03/13/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%96%B9Pod%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://valiantcat.com/2017/03/13/自动检测第三方Pod小工具/</id>
    <published>2017-03-13T13:59:05.000Z</published>
    <updated>2017-03-14T02:21:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<ul>
<li><a href="#需求原因">需求原因</a></li>
<li><a href="#尝试方案">尝试方案</a><ul>
<li><a href="#检测更新">检测更新</a><ul>
<li><a href="#备份逻辑">备份逻辑</a></li>
<li><a href="#检测更新-1">检测更新</a></li>
</ul>
</li>
<li><a href="#通知开发者">通知开发者</a></li>
<li><a href="#完整演示">完整演示</a></li>
<li><a href="#后记">后记</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="需求原因"><a href="#需求原因" class="headerlink" title="需求原因"></a>需求原因</h1><blockquote>
<p>做了半年的组件化了，原本的项目由一个集中式的仓库开发被拆分为几十个基础组件，还有各种业务组件。仓库在逻辑上分离也给开发和测试带来了很多好处。当然也有不好的地方。业务方的同事对这方面更为敏感，由于开发的时候壳工程有原来的依赖十几个第三方Pod变成了现在依赖将近上百个Pod，频繁的install 或者 update，偶尔会意外造成某些库更新，这些更新可能是不稳定的，而且QA由于不知道这些修改，会导致突然有些bug出现，有时候会造成不必要的沟(Si)通(Bi)。 所以业务方的同学提了一个模糊的需求: 我能不能在每次install 或者update的时候自动检测到第三方Pod的更新，来给我提示，让我重新check这些Pod是否真的需要更新或者是不稳定的版本。<code>之所以说是模糊的，可能确实由于我们确实也不太知道我们需要怎么做，只是有痛点。</code></p>
<p>不过既然有了痛点，就要去解决。先做出来一般之后在修改。</p>
</blockquote>
<h1 id="尝试方案"><a href="#尝试方案" class="headerlink" title="尝试方案"></a>尝试方案</h1><blockquote>
<p>我收到这个需求的时候，也确实有点懵逼，因为可能最初只是一点抱怨，说的也不明确，我刚开始也没什么思路。不过仔细想了想之后发现，可以把需求整理为2个核心目标。</p>
</blockquote>
<ol>
<li>检测更新</li>
<li>通知开发者有变化</li>
</ol>
<h2 id="检测更新"><a href="#检测更新" class="headerlink" title="检测更新"></a>检测更新</h2><p>作为一个iOS开发者我们要熟悉我们使用的工具，我们知道Pod如何来绑定版本的变化，使用的是当前工作目录的<code>Podfile.lock</code>文件，那么我在每次Pod更新前，我用脚本去分析下新旧文件，如果更新了则是有库发送了变化，再去通知开发者。 说起来简单，不过我这种shell 0基础选手怎么办，当然是学了 这里找到了<a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="external">shell30分钟入门教程</a> 说起来30分钟不过我这种笨人学了3个小时才练习完，不过shell脚本确实非常实用，推荐读者去学习下，在平时的开发中确实能帮到自己。</p>
<p>学完shell之后，我写了个脚本要求开发者使用我的脚本进行Pod install 或者 update等。不能再直接终端执行这个命令 。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%96%B9Pod%E5%B0%8F%E5%B7%A5%E5%85%B7/1.png" alt="install"> 代码逻辑如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"请输入Pod command 相关参数 "</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"1 ： install"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"2 ： update"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"3 ： install --verbose --no-repo-update"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"4 ： update --verbose --no-repo-update"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"5 ： 自定义参数"</span></div><div class="line">podcommandParam=<span class="string">"install"</span></div><div class="line"><span class="keyword">while</span>  <span class="built_in">read</span> podCommandInputParam</div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="keyword">case</span> <span class="variable">$&#123;podCommandInputParam&#125;</span> <span class="keyword">in</span></div><div class="line">    1)</div><div class="line">    podcommandParam=<span class="string">"install"</span></div><div class="line">    <span class="built_in">break</span></div><div class="line">    ;;</div><div class="line">    2)</div><div class="line">    podcommandParam=<span class="string">"update"</span></div><div class="line">    <span class="built_in">break</span></div><div class="line">    ;;</div><div class="line">    3)</div><div class="line">    podcommandParam=<span class="string">"install --verbose --no-repo-update"</span></div><div class="line">    <span class="built_in">break</span></div><div class="line">    ;;</div><div class="line">    4)</div><div class="line">    podcommandParam=<span class="string">"update --verbose --no-repo-update"</span></div><div class="line">    <span class="built_in">break</span></div><div class="line">    ;;</div><div class="line">    5)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"请输入自定义参数"</span></div><div class="line">    <span class="built_in">read</span> podcommandParam</div><div class="line">    <span class="built_in">break</span></div><div class="line">    ;;</div><div class="line">    *)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"输入有错请重新输入"</span></div><div class="line">    ;;</div><div class="line">  <span class="keyword">esac</span></div><div class="line"></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"您选择的是-------<span class="variable">$&#123;podcommandParam&#125;</span>"</span></div></pre></td></tr></table></figure>
<h3 id="备份逻辑"><a href="#备份逻辑" class="headerlink" title="备份逻辑"></a>备份逻辑</h3><p>到这一步我们就可以去做备份功能了。 Q: 为什么备份？ A: 每次执行Pod命令 <code>CocoaPod</code>都会进行原地修改，涉及到三个东西 <code>*.xcworkspace</code> <code>Podfile.lock</code> <code>Pods/</code> ，回忆一下以往执行命令的时候，你执行pod命令的时候可能还报过错，但是发现整个的几千个文件瞬间都发送变化了，真是非常恶心。有了备份之后我们还可以在pod执行错误的时候恢复这三个东西的原来面目，不用我们每次再用sourcetree去重置文件。</p>
<p>Pod 命令执行完有两种情况</p>
<ol>
<li>执行成功 —-&gt; 检测更新 –&gt; 删除备份</li>
<li>执行失败——&gt; 恢复文件，删除备份—&gt;并报错</li>
</ol>
<p>下面是基本的代码逻辑</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">beforePod</span></span>() &#123;</div><div class="line"></div><div class="line">  <span class="comment">#先复制一份原始的lock文件 和 Pods文件夹</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"正在备份资源"</span></div><div class="line">  cp  <span class="variable">$&#123;oriPodLockName&#125;</span> <span class="variable">$&#123;backPodLockName&#125;</span>  &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  cp <span class="_">-a</span> <span class="variable">$&#123;oriPodsDIR&#125;</span>   <span class="variable">$&#123;backPodsDIR&#125;</span>  &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  cp <span class="_">-a</span> <span class="variable">$&#123;currentworkSpace&#125;</span> <span class="variable">$&#123;backworkSpaceDIR&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">afterPod</span></span>() &#123;</div><div class="line">  <span class="built_in">echo</span> <span class="string">"资源后续清理"</span></div><div class="line">  rm <span class="variable">$&#123;backPodLockName&#125;</span>  &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  rm -rf <span class="variable">$&#123;backPodsDIR&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  rm -rf <span class="variable">$&#123;backworkSpaceDIR&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">recoverPod</span></span>() &#123;</div><div class="line">  <span class="built_in">echo</span> <span class="string">"正在恢复原始文件"</span></div><div class="line">  mv <span class="_">-f</span> <span class="variable">$&#123;backPodLockName&#125;</span> <span class="variable">$&#123;oriPodLockName&#125;</span></div><div class="line"></div><div class="line">  rm -rf <span class="variable">$&#123;oriPodsDIR&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  cp <span class="_">-a</span> <span class="variable">$&#123;backPodsDIR&#125;</span>   <span class="variable">$&#123;oriPodsDIR&#125;</span>  &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  rm -rf <span class="variable">$&#123;backPodsDIR&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  <span class="comment"># mv -f $&#123;backPodsDIR&#125; $&#123;oriPodsDIR&#125;</span></div><div class="line">  rm -rf <span class="variable">$&#123;currentworkSpace&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  cp <span class="_">-a</span> <span class="variable">$&#123;backworkSpaceDIR&#125;</span>   <span class="variable">$&#123;currentworkSpace&#125;</span>  &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line">  rm -rf <span class="variable">$&#123;backworkSpaceDIR&#125;</span> &gt;&gt; <span class="variable">$&#123;logFile&#125;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检测更新"><a href="#检测更新-1" class="headerlink" title="检测更新"></a>检测更新</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"-------------------------------当前发生变更的pod库---------------------------------"</span> &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"--------------------------------------------------------------------------------"</span> &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="keyword">for</span> (( i = 0; i &lt; 3; i++ )); <span class="keyword">do</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">""</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">### something</span></div><div class="line">diff <span class="variable">$&#123;oriPodLockName&#125;</span> <span class="variable">$&#123;backPodLockName&#125;</span>  -H &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------------------------当前发生变更的第三方文件统计----------------------------"</span> &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"--------------------------------------------------------------------------------"</span> &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="keyword">for</span> (( i = 0; i &lt; 3; i++ )); <span class="keyword">do</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">""</span></div><div class="line"><span class="keyword">done</span></div><div class="line">diff <span class="variable">$&#123;backPodsDIR&#125;</span> <span class="variable">$&#123;oriPodsDIR&#125;</span> -r -B <span class="_">-a</span> | diffstat &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"-------------------------当前发生变更的第三方文件变化详细统计-------------------------"</span> &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"--------------------------------------------------------------------------------"</span> &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="keyword">for</span> (( i = 0; i &lt; 3; i++ )); <span class="keyword">do</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">""</span></div><div class="line"><span class="keyword">done</span></div><div class="line">diff <span class="variable">$&#123;backPodsDIR&#125;</span> <span class="variable">$&#123;oriPodsDIR&#125;</span> -r -B -b &gt;&gt; <span class="variable">$&#123;diffchangeFile&#125;</span></div></pre></td></tr></table></figure>
<h2 id="通知开发者"><a href="#通知开发者" class="headerlink" title="通知开发者"></a>通知开发者</h2><p>目前我做的是直接打开文件来给开发者看</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">open <span class="_">-a</span> Atom     <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [  $? != 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line">  open <span class="_">-a</span> Xcode <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [  $? != 0 ]</div><div class="line"><span class="keyword">then</span></div><div class="line">  open  <span class="variable">$&#123;diffchangeFile&#125;</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<h2 id="完整演示"><a href="#完整演示" class="headerlink" title="完整演示"></a>完整演示</h2><p>这是一个失败的演示:</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%96%B9Pod%E5%B0%8F%E5%B7%A5%E5%85%B7/checkError.gif" alt="checkErr"></p>
<p>这是一个成功的演示</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E7%AC%AC%E4%B8%89%E6%96%B9Pod%E5%B0%8F%E5%B7%A5%E5%85%B7/checkSuccss.gif" alt="checkSuccess"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote>
<p>后面拿着给业务方的同学看了，业务方感叹效率，觉得做的很快，不过还有几点不足(其实就是不满意喽),。</p>
<ol>
<li>我们这么大的团队(30iOS 左右)靠开发者主动使用脚本这个约束并不是特别好，如果有新人入职不知道怎么办，有时候着急忘记了怎么办。</li>
<li>开发者万一没有仔细看log’怎么办，我们需要一个留存的证据 ，比如邮件，这样在出bug的时候就嘿嘿嘿的甩锅给他喽。</li>
</ol>
</blockquote>
<p>后面的话和安卓的朋友一起沟通说可以放在server端去做，我们使用的CR平台是gerrit，gerrit能检测到开发者merge代码。可以在这个时候去做，检测 并且可以直接利用邮件系统发给开发组的全组同学，大大降低出现风险的机会。 不过作为一次学习的记录还是总结一下分享给大家。 <a href="https://github.com/ValiantCat/CheckPodsUpdate/" target="_blank" rel="external">代码地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#需求原因&quot;&gt;需求原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#尝试方案&quot;&gt;尝试方案&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#检测更新&quot;&gt;检测更新&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#备份逻辑&quot;&gt;备份
    
    </summary>
    
    
      <category term="Shell CocoaPod" scheme="http://valiantcat.com/tags/Shell-CocoaPod/"/>
    
  </entry>
  
  <entry>
    <title>制作Swift和Objective-C Mixed的Pod</title>
    <link href="http://valiantcat.com/2016/12/27/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/"/>
    <id>http://valiantcat.com/2016/12/27/制作Swift和Objective-C-Mixed的Pod/</id>
    <published>2016-12-27T06:29:11.000Z</published>
    <updated>2017-03-13T04:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<!-- tocstop -->
<!-- index-menu -->
<ul>
<li><p>知识背景</p>
<ol>
<li><a href="https://guides.cocoapods.org/using/getting-started.html" target="_blank" rel="external">What is CocoaPods</a></li>
<li><p><a href="https://guides.cocoapods.org/using/using-cocoapods.html" target="_blank" rel="external">What did CocoaPods do?</a></p>
<blockquote>
<p>In Xcode, with references directly from the ruby source, it:</p>
<ol>
<li>Creates or updates a workspace.</li>
<li>Adds your project to the workspace if needed.</li>
<li>Adds the CocoaPods static library project to the workspace if needed.</li>
<li>Adds libPods.a to: targets =&gt; build phases =&gt; link with libraries.</li>
<li>Adds the CocoaPods Xcode configuration file to your app’s project.</li>
<li>Changes your app’s target configurations to be based on CocoaPods’s.</li>
<li><p>Adds a build phase to copy resources from any pods you installed to your app bundle. i.e. a ‘Script build phase’ after all other build phases with the following:</p>
<ul>
<li>Shell: /bin/sh</li>
<li>Script: ${SRCROOT}/Pods/PodsResources.sh</li>
</ul>
</li>
</ol>
</blockquote>
</li>
</ol>
</li>
</ul>
<blockquote>
<p>大意是，CocoaPods是一个依赖管理工具，使用CocoaPods可以自动的去分析依赖，然后通过脚本去将第三方依赖复制编译为静态库然后链接进项目。~~~等。</p>
</blockquote>
<ul>
<li>制作Pod</li>
</ul>
<blockquote>
<p>有时候我们有把代码做成一个轮子给别人用情况，我们需要按照官方的教程<a href="https://guides.cocoapods.org/making/index.html" target="_blank" rel="external">Making CocoaPods</a>去制作。</p>
<p>教程分为2类 : </p>
<ol>
<li>发布公共Pod给所有开发者使用。</li>
<li>制作私有Pod。 方法较为简单。自行查阅资料即可。这里不再赘述。</li>
</ol>
</blockquote>
<hr>
<ul>
<li>Swift和Objective-C Mixed</li>
</ul>
<blockquote>
<p>参考官方的文档(文末指出)，混编里面包含有2种调用情况:</p>
<p>Question1.  Swift调用Objective-C<br>   Question2. Objective-C调用Swift</p>
</blockquote>
<p>这里我新建一个项目 命名为Mixed(Single View Application)， 创建一个文件夹Classes用于存放源代码<br>  创建一个Objective-C Class O 继承自NSObject 创建一个Swift Class S 继承自NSObject</p>
<ul>
<li>Answer1: 为Swift源代码添加一个 XXX.h头文件这里为Mixed-Bridging-Header 在这个文件中导入需要访问的Objective-C 源代码的头文件。</li>
</ul>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/01.png" alt="headerConfig"></p>
<p>有时候Xcode反应会稍微延迟一点。手动编译一下即可。做完这个配置，Swift即可访问Objective-C 源代码。<br> 代码如图:<br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/02.png" alt="swiftAccessObjc"></p>
<ul>
<li>Answer2: Objective-C 访问Swift源代码 需要导入系统为项目生成的头文件，默认为Module+Swift.h 当然自己也是可以修改的， 导入之后，编译一下(Xcode有时候有缓存，没事就应该编译一下😒)<br>具体代码配置如图<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/03.png" alt="ObjcAccessSwift"></li>
</ul>
<p>至此混编项目测试完成。</p>
<ul>
<li>制作Pod 创建Mixed.podspec文件 键入如下内容</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">    s.name             = <span class="string">"Mixed"</span></div><div class="line">    s.version          = <span class="string">"0.0.1"</span></div><div class="line">    s.summary          = <span class="string">"链家网混编组件"</span></div><div class="line">    s.description      = <span class="string">"链家网混编组件混编测试"</span></div><div class="line">    s.license          = &#123;<span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span>&#125;</div><div class="line">    s.homepage         = <span class="string">'http://XXXDomain/XXX.privateGit/Mixed.html'</span></div><div class="line">    s.author           = &#123; <span class="string">"男神寒"</span> =&gt; <span class="string">"519224747@qq.com"</span> &#125;</div><div class="line">    s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"http://http://XXXDomain/XXX.privateGit/Mixed.git"</span>, <span class="symbol">:commit</span> =&gt; <span class="string">"bb1e3eb2d55468252f68fb4c1881ecc68517757a"</span> &#125;</div><div class="line">    s.platform              = <span class="symbol">:ios</span>, <span class="string">'8.0'</span></div><div class="line">    s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line">    s.public_header_files = <span class="string">'Mixed/Classes/*.h'</span></div><div class="line">    s.source_files = <span class="string">'Mixed/Classes/*.&#123;h,m,swift&#125;'</span></div><div class="line"></div><div class="line">    s.requires_arc = <span class="literal">true</span></div><div class="line">    s.pod_target_xcconfig = &#123; <span class="string">'SWIFT_VERSION'</span> =&gt; <span class="string">'2.3'</span> &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>接下来可使用Cocoapods提高的命令行工具 pod spec lint Mixed.podspec 去校验，但是这个方法需要完整的去编译所有项目去检测，在我的电脑需要编译很久，我一般都习惯直接安装测试。</p>
<p>按照如下文件夹格式存放 并提交到私有仓库<br> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/04.png" alt="podSpecSource"><br>接下来新建一个测试工程MixedTest 在Podfile里面输入</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">source <span class="string">'http://http://http://XXXDomain/XXX.privateGit/privatePodPodSpec.git'</span>  <span class="comment">#我们自己的私有spec仓库的地址</span></div><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span>  <span class="comment">#官方仓库的地址</span></div><div class="line">use_frameworks! <span class="comment">#一定要加上 Swift只支持动态库的形式</span></div><div class="line"></div><div class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></div><div class="line"></div><div class="line">inhibit_all_warnings!</div><div class="line"></div><div class="line">target <span class="string">'MixedTest'</span> <span class="keyword">do</span></div><div class="line">    pod <span class="string">'Mixed'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>然后进行pod install，完成之后编译然后不出意外的编译出错(😄😄😄😄) <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/05.png" alt="compile Error"> 接下来进行分析错误，由于Swift只支持动态库(并非完全意义的动态库)，所以我们的代码在Pod之后实际上是一个动态的Framework，在这个名为Mixed的FrameWork里面，Objectice-C源代码是存放在Mixed的命名空间，所以不需要Mixed-Bridging-Header.h也是可以的。而且也能正常的访问。所以问题出现在Objective-C调用Swift的部分。 由于Swift是有命名空间的概念的。制作之后的Mixed-Bridging-Header位于Mixed的命名空间内。由于CocoaPods对源代码做的操作只是简单的复制。并不能修改源代码。我们就需要在源头做手脚。 修改源工程的设置<img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/06.png" alt="newSetting"> 编译通过，然后更新Mixed.podspec文件然后重新提交 重新安装 这时候编译MixedTest项目，发现虽然文件找到了但是还报错。<img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%B6%E4%BD%9CSwift%E5%92%8CObjective-C-Mixed%E7%9A%84Pod/07.png" alt="undefineIdtntify"> 进入Mixed-Swift.h文件后发现除了一些系统的定义，并没有找到我们定义的Swift代码。 经查询资料得知，Swift的默认访问权限是internal，这个访问权限是无法被外部访问的，所以需要修改被Objective-C访问到的Swift源代码相关的访问权限为Public(Swift2.3) 或者open/public(Swift3.x)。 至此提交，安装，编译通过。</p>
<ul>
<li>References</li>
</ul>
<ol>
<li><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216" target="_blank" rel="external">sing Swift with Cocoa and Objective-C (Swift 3.0.1)</a></li>
<li><a href="https://cocoapods.org" target="_blank" rel="external">CocoaPods</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;!-- tocstop --&gt;
&lt;!-- index-menu --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;知识背景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.
    
    </summary>
    
    
      <category term="cocoapods" scheme="http://valiantcat.com/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>利用VPS搭建科学上网工具</title>
    <link href="http://valiantcat.com/2016/10/30/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://valiantcat.com/2016/10/30/利用VPS搭建科学上网工具/</id>
    <published>2016-10-30T04:46:06.000Z</published>
    <updated>2017-03-25T12:39:07.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<!-- tocstop -->
<!-- index-menu -->
<ul>
<li><p>VPN和VPS是什么</p>
<ol>
<li>VPN: 虚拟专用网络的功能是：在公用网络上建立专用网络，进行加密通讯。在企业网络中有广泛应用。VPN网关通过对数据包的加密和数据包目标地址的转换实现远程访问。VPN有多种分类方式，主要是按协议进行分类。VPN可通过服务器、硬件、软件等多种方式实现。</li>
<li>VPS:（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务</li>
</ol>
</li>
</ul>
<ul>
<li><p>痛点: 之前由于一直需要科学上网工具，随购买VPN使用，速度倒是可以，但是由于在公司内部一旦连接上VPN，公司内网相关资源就无法访问，诸如git，mail，wiki等。需要再断开，VPN每次拨号时间虽然不长，但是也需要5s左右，由于经常需要频繁切换网络环境，较为繁琐，所以专用VPS内搭建SS给自己专线使用，而且ss支持动态代理，不需要代理的网络链接自动切换。而且速度对自己非常满意，并且月流量带宽远大于之前购买的VPN。鉴于搭建环境较为繁琐，特意记录一下，以便朋友们有需要可以参考。</p>
</li>
<li><p>SS是什么?</p>
</li>
</ul>
<blockquote>
<p>[Shadowsocks（中文名称：影梭）是使用Python、C++、C#等语言开发的、基于Apache许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks使用Socks5代理方式。 Shadowsocks分为服务器端和客户端。在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。 在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。在2015年8月22日，Shadowsocks原作者Clowwindy称受到了中国政府的压力，宣布停止维护此项目并移除其用户页面所载的源代码。<a href="https://zh.wikipedia.org/wiki/Shadowsocks" target="_blank" rel="external">wiki</a></p>
<p>ss相当于在本机和服务器之间建立一条隧道，可以定义哪些流量走隧道。ss不能保证身份的可匿。 <em>注: ss被屏蔽，以下称呼用$代替</em></p>
</blockquote>
<ul>
<li><p>准备资源</p>
<ol>
<li>vultr帐号</li>
<li>paypal或者vista信用卡</li>
<li>mac(terminal) /windows putty</li>
</ol>
</li>
</ul>
<p>vultr 的优点，价格低，带宽大，优惠活动多，文档丰富， <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B71.png" alt="price"> 最近vultr有优惠活动。新注册的用户将会或者20$的优惠活动，建议通过我的邀请链接<a href="http://www.vultr.com/?ref=7021753-3B" target="_blank" rel="external">http://www.vultr.com/?ref=7021753-3B</a>去注册， 然后一定要支付金额才能使用。赠送的金额必须先充值才能使用vultr， 强烈建议充值10$,强烈建议充值10$,强烈建议充值10$,只有充值10$以上我才能收到邀请奖励，当作辛苦记录的稿费。</p>
<blockquote>
<p>注: 不要试图试用之后去再申请帐号，vultr会检测支付帐号，如果重复申请帐号，使用了一个paypal去支付，会被vultr封号。</p>
</blockquote>
<p>强烈建议使用paypal(类似中国的支付宝)去支付，优点是</p>
<ol>
<li>有的使用者并没有双币信用卡，paypal支持银联的卡片。</li>
<li>vultr目前无法解绑信用卡。</li>
</ol>
<p>充值过程: <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B72.png" alt="pay"></p>
<ul>
<li>购买一个服务器 <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B73.png" alt="server"></li>
</ul>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B74.png" alt="debian7"></p>
<p>这里本人选择的是debin7 64位的操作系统，可能有些人偏爱，CentOS，Ubuntu，这些操作系统对我们搭建SS大同小异。价格选择5$即可，个人觉得满足5个人使用足够了，可以和小伙伴一起购买使用。</p>
<blockquote>
<p>注： vultr的服务器只要添加就会开始收费，暂停是没用的，如果不需要使用了 一定要删除服务器。</p>
</blockquote>
<p>之后等待install，进入running状态之后点击操作系统 <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B75.png" alt="debian"> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B76.png" alt="debian"></p>
<p>这时候可以ping一下ip地址，如果可以ping的通就可以进行下一步了。 打开终端输入 ssh root@ip 询问回答YES，密码在server面板 点击复制，直接粘贴进终端，注意终端是不会显示密码的，并不是没有输入，。链接成功，如下图所示： <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B77.png" alt="ssh"></p>
<ul>
<li>安装$R就是ss的服务端。 简单的三个命令 分开输入。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1\. wget --no-check-certificate https://raw.githubusercontent.com/teddysun/$_install/master/$R.sh</div><div class="line"></div><div class="line">2\. chmod +x $R.sh</div><div class="line"></div><div class="line">3\. ./$R.sh 2&gt;&amp;1 | tee $sR.log</div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B78.png" alt="download"> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B79.png" alt="chmod"> <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B710.png" alt="install"> 这里我密码输入的是123456， 端口号默认就好。 接下来自动完成后输出信息 <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B711.png" alt="install"></p>
<p>现在我们的ss理论就好了，下面附上ssR相关的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/shadowsocks status //检测状态</div><div class="line">/etc/init.d/shadowsocks stop   // 关闭服务</div><div class="line">/etc/init.d/shadowsocks start  //启动服务</div></pre></td></tr></table></figure>
<p>如果有想修改密码 去编辑配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>编辑完之后重启服务即可 有些朋友和小伙伴分享的时候习惯一人一个帐号，可以配置多帐号，下面是配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_ipv6&quot;: &quot;[::]&quot;,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;port_password&quot;:&#123;</div><div class="line">        &quot;8989&quot;:&quot;12345611&quot;,</div><div class="line">        &quot;8888&quot;:&quot;123432311&quot;,</div><div class="line">        &quot;7777&quot;:&quot;123ddsff45611&quot;,</div><div class="line">        &quot;8900&quot;:&quot;478xcvx456456&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;protocol&quot;:&quot;origin&quot;,</div><div class="line">    &quot;protocol_param&quot;: &quot;&quot;,</div><div class="line">    &quot;obfs&quot;:&quot;plain&quot;,</div><div class="line">    &quot;obfs_param&quot;: &quot;&quot;,</div><div class="line">    &quot;redirect&quot;: &quot;&quot;,</div><div class="line">    &quot;dns_ipv6&quot;: false,</div><div class="line">    &quot;fast_open&quot;: false,</div><div class="line">    &quot;workers&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是本人亲测，有问题，不过一个帐号可以同时多人多设备在线，所以这里以后先挖坑，以后再填。</p>
<p>下面分享一个锐速的一键脚本，什么是锐速，总之是提升连接速度的好东西。安装即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</div></pre></td></tr></table></figure>
<p>装完之后自动会运行， 下面是检测锐速的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/serverspeeder/bin/serverSpeeder.sh status // 状态</div><div class="line">/serverspeeder/bin/serverSpeeder.sh restart// 重启</div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B712.png" alt="install"></p>
<p>如果想让锐速开机自启动 可以 vi /etc/rc.local 在最后输入 /serverspeeder/bin/serverSpeeder.sh start 保存即可</p>
<ul>
<li>使用ss 先去下载ss对应的客户端软件 <a href="https://shadowsocks.com/client.html" target="_blank" rel="external">ss下载</a></li>
</ul>
<p>我这里下载mac端 ，iOS 由于被下架，只能去寻找替代品，在app store 输入 $ 搜索，里面有很多替代品，我下载的是netkit 1元， 也可以使用surge，之类替代的。</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B713.png" alt="配置"> 打开即可科学上网。</p>
<p>注意 如果你是mac10.11之后，手动关闭了Rootless，貌似会导致无法上网，需要关闭。重启电脑即可。</p>
<ul>
<li>VPN补充</li>
</ul>
<p>vps里面也是可以搭建VPN的，这里给一个简单搭建IPSpecVPN的教程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1\.  wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/dev-debian/one-key-ikev2.sh</div><div class="line"></div><div class="line">2\.  chmod +x one-key-ikev2.sh</div><div class="line"></div><div class="line">3\.  bash one-key-ikev2.sh</div></pre></td></tr></table></figure>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B714.png" alt="配置"> 这里输入1 其他默认即可</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B715.png" alt="result"> 开机自启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vi /etc/rc.local</div><div class="line">/usr/local/sbin/ipsec start</div></pre></td></tr></table></figure>
<p>mac配置如下 <img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B716.png" alt="result"> iPhone系统原生支持。</p>
<p>有时候系统vpn会挂掉，会导致ss也无法使用，解决办法就是重新安装vpn，。</p>
<ul>
<li>免密码登录，ssh登录远程电脑需要输入密码， 这里可以配置免密登录，需要你的ssh配置，生成过程通github配置，没有配置可自行搜索</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1   scp ~/.ssh/id_rsa.pub root@xx.xx.xx.xx:/root/id_rsa.pub // 第一句需要在本机执行。</div><div class="line">2   cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</div><div class="line">3   chmod 600 .ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>执行即可。</p>
<hr>
<p>有时候我们利用ss下载大文件还是比较慢，怎么办，我们可以远程在VPS上下载大文件，然后搭建一个web服务器，再通过专线下载回来即可。 写累了 先挖个坑，以后续上。<br><br>给我发个红包催更新吧</p>
<hr>
<p>ss默认在终端下是无法翻墙的可以使用命令<br>  开启翻墙<br>  <code>export ALL_PROXY=socks5://127.0.0.1:1080</code></p>
<p>  关闭翻墙<br>  <code>unset ALL_PROXY</code></p>
<p>这些都是一次性的<br>可以设置终端别名用来翻墙 </p>
<p>编辑 ~/.bash_profile<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</div><div class="line">    <span class="built_in">unset</span> ALL_PROXY</div><div class="line"></div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"已关闭代理"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</div><div class="line">    <span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</div><div class="line">    <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"已开启代理"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行<code>source  ~/.bash_profile</code><br>下次使用<code>proxy_on</code> 和<code>proxy_off</code> 即可</p>
<p><img src="http://ompeszjl2.bkt.clouddn.com/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7weixin.png" alt="weChat"></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;!-- tocstop --&gt;
&lt;!-- index-menu --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VPN和VPS是什么&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VPN: 虚拟专用网络的功能是：在公用网络上建立专用网络，进行加密通讯。在企业网络中有广泛应用。VPN网关通
    
    </summary>
    
    
      <category term="VPS" scheme="http://valiantcat.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Effective_C++读书笔记</title>
    <link href="http://valiantcat.com/2016/09/14/Effective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://valiantcat.com/2016/09/14/Effective-C-读书笔记/</id>
    <published>2016-09-14T03:01:57.000Z</published>
    <updated>2017-03-13T04:24:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<!-- tocstop -->
<!-- index-menu -->
<blockquote>
<p>学习知识只写在本子上也不方便记忆，这里做份记录方便后续查看</p>
</blockquote>
<ol>
<li><p>视C++为一个语言联邦</p>
<p>C++  支持多语言范式:</p>
<pre><code>+  procedural，过程式
+ object-oriented 面向对象式
+ functional 函数式 
+ generic 范形式
+ metaprogramming  元编程
</code></pre></li>
<li><p>使用const ，enum，inline 代替#define</p>
<p><code>#</code>define是一个容易检查的预处理指令，将更多的工作交给编译器而不是预处理骑<br>对于单纯的常量使用是const 和 enum更合适<br>对于内联函数使用inline更合适，在其他 情况才使用MACROS</p>
</li>
<li><p>更多的使用const</p>
<ul>
<li>对于参数仅仅const不同其实也是重载的，  </li>
<li>const能接受 non-const 和const 如果成员方法是logical contenes，可以使用mutable  也去掉 const对编译器加上的  bitwess contess </li>
<li>当const 和non const方法内容一样时 可以使用 non-const调用const方法 ，内部使用 static_caste&lt;&gt;  转换加上const，然后使用  const_caste&lt;&gt;去掉const</li>
</ul>
</li>
<li><p>确定对象先出初始化再使用</p>
<ul>
<li>为内置数据类型手动初始化</li>
<li>使用成员初始化列表初始化 ，而不是赋值，提升效率</li>
<li>如果有不同的static有初始化顺序依赖关系。使用local-static代替 全局 static对象</li>
</ul>
</li>
<li><p>了解C++默默编写并调用了那些函数</p>
<ul>
<li>默认构造函数</li>
<li>拷贝构造函数</li>
<li>析构函数(系统默认生成的是非virtual 除非有base声明为virtual)</li>
<li>拷贝赋值运算符</li>
<li>移动构造函数 (c11新增)</li>
<li>移动赋值运算符 (c11新增)</li>
</ul>
<blockquote>
<p> 如果类里面有引用或者const成员 系统是不会生成 copy = 和 移动=函数的<br> 有动态内存管理的类需要自己实现方法 避免内存泄漏或者重复释放内存导致问题</p>
</blockquote>
</li>
<li><p>如果不想使用编译器自动生成的函数，就拒绝它</p>
<ul>
<li>在类的private声明一个 拷贝构造函数和赋值运算符(只有声明) ，其他调用就会编译出错，但是友元和其他成员调用没事 ，但是会产生链接错误， 引入第二种方法。</li>
<li>建立一个base类 将 拷贝构造函数和赋值运算符(只有声明)声明为私有，然后当前类私有继承自 base即可</li>
</ul>
</li>
<li><p>为多态基类声明virtual析构函数</p>
<ul>
<li>当作基类的 如果有一个virtual成员函数 一般就有一个Virtual析构函数</li>
<li>动态内存管理的也适合有个virtual析构函数(系统的std::string 的析构函数不是 virtual 所以集成的话如果有多态体现就会有内存泄漏的风险 STL很多这样，)</li>
<li>不适合做基类的不要实现virtual 析构函数，因为有了虚函数表 效率会降低</li>
<li>需要抽象类的时候 一般声明析构函数为纯虚函数是最好的 ，你还必须给析构函数提供<code>定义</code> 不定义在有子类的时候链接会出错</li>
</ul>
</li>
<li><p>别让异常逃离析构函数(析构函数不要<code>抛出</code>异常)</p>
<blockquote>
<p> 假设 vector<type> ts (10,0)   10个元素有一个有异常 后续了能造成内存泄漏</type></p>
<ul>
<li>析构函数绝对不能抛出异常 如果有这样的需求 比如数据库链接对象 在析构时要关闭链接 可能抛出异常 可以使用两种方案 </li>
</ul>
<ol>
<li>使用try{} catch   (…){  std::abort(); }</li>
<li>使用try{} catch   (…){  someLog()); }</li>
</ol>
<ul>
<li>如果用户需要对异常作出反应，可以重新设计一个对外可以暴露的方法让用户去操作  如 public clos() </li>
</ul>
</blockquote>
</li>
<li><p>绝对不要在构造函数和析构函数中调用virtual函数</p>
</li>
</ol>
<blockquote>
<p>java系列不同，请注意<br>因为在继承构造顺序中，假设你在构造函数中调用virtual函数，其实这时候子类还没有实例化，virtual调用的还是非virtual 的，这时候即使使用了dynamic_cast 拿到的也是父类，  在析构函数调用virtual，子类已经被释放。</p>
<p> 还有的时候非常难意识到你调用virtual函数，如多个构造函数调用了某个抽取出来的方法，但是这个方法里面调用了virtual函数，这也是有问题的，而且难以debug<br>如何解决，建议一种方案  ，比如  在构造函数调用的virtual函数 更改为non-virtual，并指定参数，用子类在构造函数初始化时传递。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Transcation &#123;</div><div class="line"> public :</div><div class="line">     explicit Transcation(const std::string &amp; info) &#123;</div><div class="line">   //      .....</div><div class="line">   log(info);</div><div class="line">     &#125;   </div><div class="line">     void logT(const std::string &amp; info) &#123; // non-virtual </div><div class="line">    // do something          </div><div class="line">         </div><div class="line">     &#125; </div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">class SubT : public Trancastion &#123;</div><div class="line">public :</div><div class="line">    explicit SubT(XX,const std::string &amp;info) : someInstanceVar(XX), Transcation(info) &#123;&#125;    </div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ol>
<li><p>在赋值运算符中返回一个 refresence to  *this</p>
<blockquote>
<p> 如何实现 连锁赋值，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> T &#123;</div><div class="line">   T &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> T &amp; t) &#123;</div><div class="line">       ...</div><div class="line">   <span class="keyword">return</span> *<span class="keyword">this</span>;        </div><div class="line"></div><div class="line">   &#125;     </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<hr>
<ol>
<li>在operator= 处理 “自我赋值”<blockquote>
<p>假设在赋值运算符中 *this 和 传递进来的对象执行的是同一个对象时，可能会出现问题，比如 delete old， new Type(param) , param 可能是old  这时候会出问题。<br>通常做法是</p>
</blockquote>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">T&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> T &amp; t ) &#123;</div><div class="line">   <span class="keyword">if</span> t == *<span class="keyword">this</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span>&#125; </div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;xxval </div><div class="line">    <span class="keyword">this</span>-&gt; xxxval = <span class="keyword">new</span> XXXVal(xxval)</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个代码在有异常的时候也算有问题的 因为在new的时候发生异常可能导致后续的return 失败 *this执行了一个被释放的内存<br>新的实现</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">T &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> T &amp;t) &#123;</div><div class="line">XXXval * xxxvalOriginal = <span class="keyword">this</span>-&gt; xxxVal    <span class="comment">// 保留原本的xxxval     </span></div><div class="line"><span class="keyword">this</span>-&gt;xxxVal =  <span class="keyword">new</span> XXXVal(t.xxxval); <span class="comment">// new copy  如果失败了 也不影响</span></div><div class="line"><span class="keyword">delete</span> xxxValOriginal; <span class="comment">// delete old </span></div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者使用新的 copy  swap技术</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Widget &#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(widget &amp;rhs)</span></span>; &#123;交换*<span class="keyword">this</span>  和rhs 详情参见条款<span class="number">29</span>   &#125;</div><div class="line">    Widget &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Widget rhs)&#123; <span class="comment">// by Reference </span></div><div class="line">        Widget temp(rhs) <span class="comment">// copy cons        </span></div><div class="line">        swap(temp);</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>)</div><div class="line">    &#125;    </div><div class="line">    或者可以重写 接受参数为值传递的赋值运算符</div><div class="line">     Widget &amp; <span class="keyword">operator</span>=(Widget rhs)&#123; <span class="comment">// by value</span></div><div class="line"> <span class="comment">// 已经copy过了</span></div><div class="line">        swap(rhs</div><div class="line">        </div><div class="line">        );</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>)</div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结: 要注意异常性安全 ，通常会解决自我赋值安全。</p>
</blockquote>
<hr>
<ol>
<li>复制对象时不要忘记每一个成员<blockquote>
<p>copy constructor 和  copy assignmaent成为copying函数， </p>
</blockquote>
</li>
<li>新增了成员变量，要修改所有的构造函数，拷贝构造函数，赋值运算符，赋值运算符变种+= </li>
<li><p>如果是继承的有基类，需要在拷贝构造函数的成员初始化列表调用父类的拷贝构造函数()，如果不写调用默认的构造函数，(不是没有调用)， 在赋值运算符 手动调用一次 基类的赋值运算符 <code>BASECLASS::operator=(rhs)</code></p>
</li>
<li><p>以对象管理资源</p>
<blockquote>
<p>在使用工厂方法创建对象时一般会返回一个指针， 这就依赖调用者再使用完毕后delete这个指针， 但是使用的函数如果出现 early return 或者 异常等会导致delete语句无法调用， 所以我们可以使用只能指针来管理  auto_ptr<class> 这个指针在自己释放后会调用包含数据的析构函数<br>auto_ptr指针是单一只能指针，在出现copy 赋值或者copy构造函数时旧的指针会清空为null 避免重复释放内存，但是这个指针在使用时会有其他复制多次出现的问题，而且无法支持stl容易，  更好的办法是使用引用计数指针 ，share_ptr,而且能用在stl容器中<br>但是但是 这些智能指针都不使用 delete []，使用的是delete版本</class></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Investement &#123;&#125;</div><div class="line"><span class="function">Investement *<span class="title">factory</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">caller</span><span class="params">()</span> </span>&#123;</div><div class="line">    Investement *ptr = factor()</div><div class="line"><span class="comment">//    xxxxx  假设这里出现return  throw 可能就会有问题 </span></div><div class="line"><span class="keyword">delete</span> ptr;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">caller1</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">auto_ptr</span>&lt;Investement&gt; ptr = factor()</div><div class="line"></div><div class="line">&#125;    </div><div class="line"><span class="keyword">void</span> caller2() &#123;</div><div class="line">    <span class="comment">// 1 较好的办法</span></div><div class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Investement&gt; ptr = factor()</div><div class="line"></div><div class="line">&#125;    </div><div class="line"><span class="built_in">std</span>::shared_prt&lt;Investement &gt; factory();</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在资源管理时小心copying行为</p>
<blockquote>
<p> 1 禁止复制<br> 使用引用技术式的只能指针，注意可以使用 std::tr1::share_ptr，因为在某些时刻我们可能是在引用计数为0时做个额外操作，而不是析构这个对象、</p>
</blockquote>
</li>
<li><p>在资源管理类中提供对原始资源的访问</p>
<blockquote>
<p>有时候我们使用了智能指针，但是在某些API的调用他们需要的是原始指针，那么我们可以通过shard_ptr.get()返回原始指针。<br>这就引出了一个问题<br>1 提供get方法转换<br>2 实现一个隐式转换 operartor TOClass() const;但是这种可能带来隐藏问题的方式需要提供斟酌考虑是否采用</p>
</blockquote>
</li>
<li><p>成对使用new和delete时要采取匹配的形式</p>
<blockquote>
<p>new 和 delete  ，new []和delete[] 配合</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>用独立的语句来将指针放进智能指针中</p>
<blockquote>
<p>举个例子<br>void  process(std::tr1::shared_prt<widget>,int priority)<br>在调用时你可能这样</widget></p>
<p>process(std::tr1::shared_prt<widget>(new Widget),XXXprority())<br>系统给你出现的顺序可能是</widget></p>
<ol>
<li>new Widget</li>
<li>call XXXprority()</li>
<li>std::tr1::shared_ptr的构造函数<br>but  这时候 2 的函数调用出现了异常，  就会出现内存泄漏 ，因此更合适的办法应该是这样<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>  <span class="title">process</span><span class="params">(<span class="built_in">std</span>::tr1::shared_prt&lt;Widget&gt;,<span class="keyword">int</span> priority)</span></span>&#123;&#125;</div><div class="line"><span class="comment">// 不实用匿名指针</span></div><div class="line"><span class="built_in">std</span>::tr1::<span class="built_in">shared_ptr</span>&lt;Widget&gt; w1(<span class="keyword">new</span> Widget);</div><div class="line">process(w1,XXpriority());</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
</li>
<li><p>让接口容易被正确使用</p>
</li>
</ol>
<ul>
<li>促进正确使用的办法包括接口的一致性，以及与内置类型的行为兼容</li>
<li>组织误用的方法包括简历新的类型，限制类型上的操作。束缚对象值，以及消除客户的资源管理在责任</li>
<li>shared_ptr支持定制删除器(custom deleter),这可防范DLL问题，可被用来自动解除互斥锁。                  </li>
</ul>
<ol>
<li>设计class犹如设计type<ul>
<li>新的对象如何被创建和销毁 (构造函数和析构函数，自定义new运算符)</li>
<li>对象的初始化和对象的赋值的差别(赋值和拷贝构造函数)</li>
<li>新的对象如果被passwd By Value传递如何书写</li>
<li>新的对象的合法值(需要约束数据是否合理)</li>
<li>新的type的继承体系 比如析构函数</li>
<li>新的Type和其他类型的转换</li>
<li>什么杨的函数和操作符是合理的</li>
<li>访问控制符</li>
<li>是否应该抽象与类型  类型模板</li>
</ul>
</li>
<li>宁以pass-By-ference-to-const 替换pass-by-Value<blockquote>
<p>copy value的代价非常昂贵 一般可以使用reference代替 ，为了避免别人修改 可以指定const<br>还可以避免对象分割，  假设一个函数接受的是父类对象  那么传递一个子类的话经过 copy，子类信息会丢失 。没有多态性体现</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Window&#123;&#125;</div><div class="line"><span class="keyword">class</span> DebugWidow: <span class="keyword">public</span> Widow&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dosomething</span><span class="params">(Window w)</span> </span>&#123;&#125; <span class="comment">// pass By Value</span></div><div class="line"><span class="comment">// doSomethng(DebugWindow())</span></div><div class="line">改写为<span class="function"><span class="keyword">const</span> reference</span></div><div class="line"><span class="keyword">void</span> <span class="title">dosomething</span><span class="params">(<span class="keyword">const</span> Window &amp; w)</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<blockquote>
<p>系统内置类型和stl一般建议使用 pass by value</p>
</blockquote>
<ol>
<li><p>必须返回对象时，别妄想返回去reference</p>
<blockquote>
<p>绝不要返回一个指向localStack对象的指针引用，也不要返回heap-Allocated的指针或者引用，这种时候 直接返回对象就好了 copy by value 也无所谓</p>
</blockquote>
</li>
<li><p>将成员变量声明为private</p>
<blockquote>
<p>封装的思想不再赘述</p>
</blockquote>
</li>
<li><p>宁以non-member。non-friend替换member函数</p>
<blockquote>
<p>封装指的是封装数据。越多的函数可以访问数据，封装性就越低。<br>外部的函数做的事情够用就好，没必要声明为成员函数，因为成员函数可以访问所有数据<br>在组织代码结构时可以将class和 对class操作的函数放在同一个命名空间，但是不放在同一个文件中，这样在需要的时候才需导入头文件。</p>
</blockquote>
</li>
<li><p>若所有参数皆需类型转换，请为此采用non-member函数</p>
<blockquote>
<p>如果你需要为某个函数的所有参数(包括 被this指针所值的那个隐喻参数)进行类型转换，那么这个函数必须是个non-member函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Rational &#123;</div><div class="line">    <span class="comment">// 如果是成员运算符</span></div><div class="line">    Rational(<span class="keyword">int</span> numerator = <span class="number">0</span>, <span class="keyword">int</span> denominator = <span class="number">1</span>); <span class="comment">//这里没有explicit</span></div><div class="line">    <span class="keyword">const</span> Rational <span class="keyword">operator</span>*(<span class="keyword">const</span> Ration &amp;rhs) <span class="keyword">const</span>;</div><div class="line">    调用<span class="function">Rational <span class="title">oneEight</span><span class="params">(<span class="number">1</span>,<span class="number">8</span>)</span></span></div><div class="line">    Rational <span class="title">OneHalf</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></div><div class="line">Ration     result  =  oneEight * <span class="number">2</span><span class="comment">//成功 ， 因为当前相当于 oneEight.operator*(Ration(2))  2位于已有对象的参数列表里</span></div><div class="line">Ration     result  = <span class="number">2</span> * oneEight<span class="comment">// 这里失败  因为2没有成员函数调用，也没有全局函数可供调用，隐式转换必须位于已有对象 这里没有已有对象 所以不能转换将2转换为Rational对象</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line">改写为non-member函数</div><div class="line"><span class="keyword">const</span> ration <span class="keyword">operator</span>*(<span class="keyword">const</span> Rational &amp;lhs, <span class="keyword">const</span> Rational &amp;rhs)&#123;&#125;</div><div class="line">这时候调用皆能通过</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>考虑写出一个不抛出异常的swap函数<br>如果std::swap效率不够或者是不满足使用条件可以考虑以下几种事情。</p>
<ol>
<li>提供一个public swap成员函数，让它搞笑的置换你的类型的2个对象值，(必须不能抛出异常)</li>
<li>在你的class 或者 class template所在的命名空间内提供一个non-member swap并令他调用上述swap成员函数。</li>
<li>如果你编写的是一个class 而不是class Template 为你的class具体化一个std::swap并令它调用你的swap函数。</li>
<li>客户如果调用swap函数 请使用using::std::swap  然后直接调用swap函数 ，系统会为你寻找最合适的swap函数</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;!-- tocstop --&gt;
&lt;!-- index-menu --&gt;
&lt;blockquote&gt;
&lt;p&gt;学习知识只写在本子上也不方便记忆，这里做份记录方便后续查看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;视C++为一个语言联邦&lt;/p
    
    </summary>
    
    
      <category term="C++" scheme="http://valiantcat.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>干货集中营-ReactiveCocoa+RXSwift+MVVM</title>
    <link href="http://valiantcat.com/2016/07/25/%E5%B9%B2%E8%B4%A7%E9%9B%86%E4%B8%AD%E8%90%A5-ReactiveCocoa+RXSwift+MVVM/"/>
    <id>http://valiantcat.com/2016/07/25/干货集中营-ReactiveCocoa+RXSwift+MVVM/</id>
    <published>2016-07-25T03:39:03.000Z</published>
    <updated>2017-03-13T14:09:43.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>学习函数响应式编程已经接近两个月的时间。说实话坚持下来实在不易。两个月的时间看过近150篇博文，算下来啃下来一本千页的技术书籍也差不多。不过随着知识面的拓广，学习起来也更加顺利。本篇文章主要整理下自己收集的学习路线。其中包括了函数式编程的思想，ReactiveCocoa2.x(主要是Objective-C部分的函数响应式编程框架)，ReactiveCocoa4.x(扩充了Swift部分的支持)，RXSwift(ReactiveX系列)，加上函数式编程对MVVM架构的帮助和影响。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#写在之前">写在之前</a></li>
<li><a href="#知识必备">知识必备</a></li>
<li><a href="#思想的建立">思想的建立</a></li>
<li><a href="#reactivecocoa2x">ReactiveCocoa2.x</a></li>
<li><a href="#mvvm-with-reactivecocoa">MVVM With ReactiveCocoa</a></li>
<li><a href="#reactivecocoa4x">ReactiveCocoa4.x</a></li>
<li><a href="#rxswift">RXSwift</a></li>
<li><a href="#速查表">速查表</a></li>
<li><a href="#学习交流">学习交流</a></li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h1><blockquote>
<p>这篇文章中不适合新手，没有码过2年业务的程序员我觉得可以了解下，不一定非要学习使用这个，因为你的经验往往不足，在学习之后可能觉得自己能驾驭(要上天)，但是随着业务的复杂度上升，类似RAC的重量级框架带来的副作用，调试的困难性等会让你后悔莫及。 </p>
<p>面向对象编程是一个被大众易于接受的方式，也就意味着更容易协同工作。函式响应式编程虽然不是一个新的话题，但是引入iOS项目实际开发还是要抱谨慎态度，毕竟学习函数式编程的路线还是比较陡峭，这就意味者在团队开发中，需要斟酌如何引用，如何培养新手，如何控制对框架的不良使用在项目中蔓延。</p>
<p>MVC是一个非常成熟的架构，在业务开始复杂的时候，合理的将网络请求，数据持久化等相关与控制器耦合不严重的公共抽取出来，足够满足日常开发需求。 对MVVM的理解的差异性也会写出让团队成员写出截然不同的风格。</p>
<p>说了这么多废话，其实是想表达，如果想在项目中使用要谨慎，谨慎 ，再谨慎，不过我们可以从其中学习到很多以前我们从来没思考过的问题，甚至是一种全新的思维方式，有时候一些巧妙的实现，会让你感叹到计算机科学的神奇，也可以在你跳槽的时候成为你的加分项。</p>
</blockquote>
<h1 id="知识必备"><a href="#知识必备" class="headerlink" title="知识必备"></a>知识必备</h1><p>需要你对Objective-C，block有比较清晰的了解,由于后面部分代码是由Swift实现，建议你掌握Swift，(由于Swift的特性，对于函数式编程更容易实现，也更好理解，毕竟你看写博文的作者几乎每个都掌握的，所以去学习吧。)，如果你用过Swift的高阶函数，map，FlatMap，reduce，Filter等，会更加容易理解。</p>
<h1 id="思想的建立"><a href="#思想的建立" class="headerlink" title="思想的建立"></a>思想的建立</h1><blockquote>
<p>这部份主要奠定自己的函数式思想的建立，对函数(闭包，block)作为一等公民有新的理解。</p>
<p>这一部分可能学习的时间最久，需要的知识面也可能更广，也最容易让人放弃，因为你不知道你花了大把时间学习的是什么(jb玩意)。</p>
<p>不过坚持下来，你将会更加理解函数式编程，在学习接下来的ReactiveCocoa和RXSwift的时候只是把思想代码化。</p>
</blockquote>
<p>首先来篇自己写的</p>
<ul>
<li><a href="http://valiantcat.com/2016/06/03/%E4%BB%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%88%B0%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">从函数调用到函数式编程</a></li>
</ul>
<p>本文让你对如何实现链式编程有个简单的认识。文中包括了Objective-C和Swift两个版本。</p>
<ul>
<li><a href="http://nshipster.cn/reactivecocoa/" target="_blank" rel="external">Reactive​Cocoa</a></li>
</ul>
<p>来自Mattt Thompson发布在 <a href="nshipster.com">NShipster</a>让你对引入RAC这类FRP(Functional Reactive Programming)框架对编程范式的改变有个直观的印象。</p>
<ul>
<li><a href="http://limboy.me/tech/2013/06/19/frp-reactivecocoa.html" target="_blank" rel="external">ReactiveCocoa与Functional Reactive Programming</a></li>
</ul>
<p>来自蘑菇街的<a href="http://limboy.me/" target="_blank" rel="external">limboy</a>解释下RAC和FRP的关系。</p>
<ul>
<li><a href="http://www.jianshu.com/p/e63261712172" target="_blank" rel="external">深入浅出－iOS Reactive Cocoa的常见用法</a></li>
</ul>
<p>简书上看到的文章，从最基本的Demo开始。</p>
<ul>
<li><a href="http://www.jianshu.com/p/87ef6720a096" target="_blank" rel="external">最快让你上手ReactiveCocoa之基础篇</a></li>
<li><a href="http://www.jianshu.com/p/e10e5ca413b7" target="_blank" rel="external">最快让你上手ReactiveCocoa之进阶篇</a></li>
</ul>
<p>在这里直接推荐了两篇使用的文章。貌似会比较突然，但是作者觉得，Talk  is cheap ，show me the code.(别装逼了，亮代码吧)   思想总归是要用代码来实现的，这部份内容偏实用，预计需要一周的时间才能掌握的差不多，可能你在学习的过程中，会遗忘，没关系，思想的建立是一步一步的，学习这些代码还是为了更好的建立思想(我也没指望你一遍掌握RAC)，至于代码这篇文章，反正你是要看好几遍的，第一次忘了就忘了。</p>
<ul>
<li><a href="https://github.com/benjycui/introrx-chinese-edition" target="_blank" rel="external">Reactive Programming入门</a></li>
</ul>
<p>之前的文章都是 functional Programming，和reactive programming，这里偶然看到一篇响应式编程思想入门，强烈推荐。</p>
<ul>
<li><a href="http://www.jianshu.com/p/25922584bc43" target="_blank" rel="external">iOS Reactive Cocoa使用浅析</a></li>
</ul>
<ul>
<li><a href="http://blog.devtang.com/2016/01/03/reactive-cocoa-discussion/index.html" target="_blank" rel="external">ReactiveCocoa 讨论会</a></li>
</ul>
<p>这篇文章中讲到了RAC自带的debug插件，在学习RAC过程中的实践，以及一些技术博文链接。</p>
<hr>
<p>在学习过程中我们可能经常会听见一些比较函数式风格的名词，比如monad，functor等，学到这里我找到了另外比较好的资料。</p>
<ol>
<li><a href="https://www.objccn.io/products/functional-swift/" target="_blank" rel="external">函数式 Swift</a></li>
<li><a href="http://leichunfeng.github.io/blog/2015/11/08/functor-applicative-and-monad" target="_blank" rel="external">Functor、Applicative 和 Monad</a></li>
<li><a href="http://www.mokacoding.com/" target="_blank" rel="external">Swift Functors, Applicatives, and Monads in Pictures</a>英文版</li>
<li><a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="external">Functors, Applicatives, And Monads In Pictures</a>英文版</li>
</ol>
<p>第一本书籍可能花费的时间很长，不过这本书也是最有深度的，可以从中学到更多函数式的思想。</p>
<h1 id="reactivecocoa2x"><a href="#ReactiveCocoa2-x" class="headerlink" title="ReactiveCocoa2.x"></a>ReactiveCocoa2.x</h1><p>非常不错的RAC入门教程</p>
<ol>
<li><a href="http://benbeng.leanote.com/post/ReactiveCocoaTutorial-part1" target="_blank" rel="external">ReactiveCocoa入门教程——第一部分</a>对应的<a href="https://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1" target="_blank" rel="external">英文版</a></li>
<li><a href="http://benbeng.leanote.com/post/ReactiveCocoaTutorial-part2" target="_blank" rel="external">ReactiveCocoa入门教程——第二部分
</a>对应的<a href="http://www.raywenderlich.com/62796/reactivecocoa-tutorial-pt2" target="_blank" rel="external">英文版</a></li>
</ol>
<hr>
<p>来自sunnyxx的博文。</p>
<ol>
<li><a href="http://blog.sunnyxx.com/2014/03/06/rac_1_macros/" target="_blank" rel="external">Reactive Cocoa Tutorial [1] = 神奇的Macros</a></li>
<li><a href="http://blog.sunnyxx.com/2014/03/06/rac_2_racstream/" target="_blank" rel="external">Reactive Cocoa Tutorial [2] = 百变RACStream</a></li>
<li><a href="http://blog.sunnyxx.com/2014/03/06/rac_3_racsignal/" target="_blank" rel="external">Reactive Cocoa Tutorial [3] = RACSignal的巧克力工厂</a></li>
<li><a href="http://blog.sunnyxx.com/2014/04/19/rac_4_filters/" target="_blank" rel="external">Reactive Cocoa Tutorial [4] = 只取所需的Filters</a></li>
</ol>
<hr>
<p>学了这么多来一篇RAC结构分享的文章</p>
<ul>
<li><a href="http://leichunfeng.github.io/blog/2015/12/25/reactivecocoa-v2-dot-5-yuan-ma-jie-xi-zhi-jia-gou-zong-lan" target="_blank" rel="external">ReactiveCocoa v2.5 源码解析之架构总览</a></li>
</ul>
<hr>
<p>用了这么久的RAC，你可能不止一次听到冷热信号，也可能没有意识到有些什么是不对的，这里给出来自美团的对冷热信号的分析。</p>
<ol>
<li><a href="http://tech.meituan.com/RACSignalSubscription.html" target="_blank" rel="external">RACSignal的Subscription深入分析 - 美团点评技术团队</a></li>
<li><a href="http://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-1.html" target="_blank" rel="external">细说ReactiveCocoa的冷信号与热信号（一）</a></li>
<li><a href="http://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-2.html" target="_blank" rel="external">细说ReactiveCocoa的冷信号与热信号（二）：为什么要区分冷热信号</a></li>
<li><a href="http://tech.meituan.com/talk-about-reactivecocoas-cold-signal-and-hot-signal-part-3.html" target="_blank" rel="external">细说ReactiveCocoa的冷信号与热信号（三）：怎么处理冷信号与热信号</a></li>
</ol>
<hr>
<p>美团博文最后给出了一个冷热信号可以转换的方法，但是没有讲清楚，这里有篇外国博文作为补充。</p>
<ul>
<li><a href="https://spin.atomicobject.com/2014/06/29/replay-replaylast-replaylazily/" target="_blank" rel="external">Comparing replay, replayLast, and replayLazily</a></li>
</ul>
<hr>
<p> 这里补充一篇对RAC的概述</p>
<ul>
<li><a href="http://limboy.me/tech/2013/12/27/reactivecocoa-2.html" target="_blank" rel="external">说说ReactiveCocoa 2</a></li>
</ul>
<hr>
<p>RAC项目实战</p>
<ol>
<li><a href="http://limboy.me/tech/2014/06/06/deep-into-reactivecocoa2.html" target="_blank" rel="external">ReactiveCocoa2实战</a></li>
<li><a href="http://ios.jobbole.com/82356/" target="_blank" rel="external">这样好用的ReactiveCocoa，根本停不下来</a></li>
<li><a href="http://williamzang.com/blog/2016/06/27/ios-kai-fa-xia-de-han-shu-xiang-ying-shi-bian-cheng/" target="_blank" rel="external">iOS开发下的函数响应式编程</a></li>
</ol>
<hr>
<p>如果你认认真真的学习到了这里，想必以及有了不错的进步，接下来我们可以看下RAC的源码实现了，看下这个庞然大物是如何实现这些神奇的功能的。</p>
<ol>
<li><a href="http://www.jianshu.com/p/d262f2c55fbe" target="_blank" rel="external">RAC核心元素与信号流</a></li>
<li><a href="http://ios.jobbole.com/85019/" target="_blank" rel="external">剖析@weakify 和 @strongify</a></li>
<li><a href="http://www.jianshu.com/p/baeebca1f6f4" target="_blank" rel="external">ReactiveCocoa源码阅读之前序</a></li>
<li><a href="http://www.jianshu.com/p/d5e4dc7e592e" target="_blank" rel="external">ReactiveCocoa源码阅读之RACSignal(一)</a></li>
<li><a href="http://www.jianshu.com/p/bcdea71ba824" target="_blank" rel="external">ReactiveCocoa源码阅读之RACSignal(二)</a></li>
<li><a href="http://www.jianshu.com/p/7c1ddba2b3a4" target="_blank" rel="external">ReactiveCocoa源码阅读之bind函数</a></li>
<li><a href="http://www.jianshu.com/p/f939bf6afc93" target="_blank" rel="external">ReactiveCocoa源码阅读之攻略flatten</a></li>
<li><a href="http://www.jianshu.com/p/f3b00e90035d" target="_blank" rel="external">ReactiveCocoa源码阅读之switchToLatest/combineLatestWith</a></li>
<li><a href="http://www.jianshu.com/p/a151e5cb0aae" target="_blank" rel="external">ReactiveCocoa源码阅读之RACScheduler</a></li>
</ol>
<h1 id="mvvm-with-reactivecocoa"><a href="#MVVM-With-ReactiveCocoa" class="headerlink" title="MVVM With ReactiveCocoa"></a>MVVM With ReactiveCocoa</h1><p>这部份主要讲了RAC在MVVM中的表现，以及如何利用RAC在MVVM中做数据绑定这项核心操作。</p>
<ol>
<li><a href="http://www.jianshu.com/p/b2fe0920e3aa" target="_blank" rel="external">MVVM与ReactiveCocoa的运用(Part1)</a></li>
<li><a href="https://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1" target="_blank" rel="external">MVVM Tutorial with ReactiveCocoa: Part 1/2</a></li>
<li><a href="http://www.jianshu.com/p/b51344f4f3a3" target="_blank" rel="external">MVVM与ReactiveCocoa的运用(Part2)</a></li>
<li><a href="https://www.raywenderlich.com/74131/mvvm-tutorial-with-reactivecocoa-part-2" target="_blank" rel="external">MVVM Tutorial with ReactiveCocoa: Part 2/2</a></li>
<li><a href="http://leichunfeng.github.io/blog/2016/02/27/mvvm-with-reactivecocoa" target="_blank" rel="external">MVVM With ReactiveCocoa</a></li>
</ol>
<h1 id="reactivecocoa4x"><a href="#ReactiveCocoa4-x" class="headerlink" title="ReactiveCocoa4.x"></a>ReactiveCocoa4.x</h1><p>在学习这部份的时候发现没有合适的入门教程，所以就自己摸索着翻译了部分。可以参看</p>
<ol>
<li><a href="http://valiantcat.com/2016/07/21/ReactiveCocoa-Swift%E9%83%A8%E5%88%86%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-Signal/">ReactiveCocoa-Swift部分入门指南-Signal</a></li>
<li><a href="http://valiantcat.com/2016/07/20/ReactiveCocoa-Swift%E9%83%A8%E5%88%86%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-SignalProducer/">ReactiveCocoa-Swift部分入门指南-SignalProducer</a></li>
</ol>
<hr>
<p>一份Reactive4文档翻译</p>
<ol>
<li><a href="http://www.jianshu.com/p/fccba7be1ca1" target="_blank" rel="external">ReactiveCocoa 4 文档翻译目录</a></li>
</ol>
<hr>
<p>ReactiveCocoa4的详细讲解</p>
<ol>
<li><a href="http://www.jianshu.com/p/0ea216239efb" target="_blank" rel="external">ReactiveCocoa 4 图解之一——事件（Event）
</a></li>
<li><a href="http://www.jianshu.com/p/ba5247d713a9" target="_blank" rel="external">ReactiveCocoa 4 图解之二——监听器（Observer）
</a></li>
<li><a href="http://www.jianshu.com/p/7a4a1d005aee" target="_blank" rel="external">ReactiveCocoa 4 图解之三——存根（Disposable)</a></li>
<li><a href="">至于四作者并没给出，估计是挖的坑忘记填</a></li>
<li><a href="http://www.jianshu.com/p/f0c945e5b2fe" target="_blank" rel="external">ReactiveCocoa 4 图解之五——信号（Signal)</a></li>
<li><a href="http://www.jianshu.com/p/617063a81136" target="_blank" rel="external">ReactiveCocoa 4 图解之六——信号发生器（SignalProducer）</a></li>
</ol>
<h1 id="rxswift"><a href="#RXSwift" class="headerlink" title="RXSwift"></a>RXSwift</h1><p>使用自带教程入门</p>
<ol>
<li><a href="http://blog.callmewhy.com/2015/09/21/rxswift-getting-started-0/" target="_blank" rel="external">RxSwift 入坑手册 Part0 - 基础概念</a></li>
<li><a href="http://blog.callmewhy.com/2015/09/23/rxswift-getting-started-1/" target="_blank" rel="external">RxSwift 入坑手册 Part1 - 示例实战</a></li>
</ol>
<p>快速指南系列</p>
<ol>
<li><a href="http://www.jianshu.com/p/86df22e912e9" target="_blank" rel="external">RxSwift快速指南(一)</a></li>
<li><a href="http://www.jianshu.com/p/78309ae003c4" target="_blank" rel="external">RxSwift快速指南(二)</a></li>
<li><a href="http://www.jianshu.com/p/3bdb246881d4" target="_blank" rel="external">RxSwift快速指南(三)</a></li>
<li><a href="http://www.jianshu.com/p/401847dddfc5" target="_blank" rel="external">RxSwift快速指南(四)</a></li>
</ol>
<h1 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h1><p>文末给出了我自己整理的RAC和RXSwift速查表，毕竟谁也不可能记得住那么多方法和小技巧的。</p>
<ul>
<li><a href="http://valiantcat.com/2016/07/22/ReactiveCocoa%E5%92%8CRXSwift%E9%80%9F%E6%9F%A5%E8%A1%A8/">ReactiveCocoa和RXSwift速查表</a></li>
</ul>
<h1 id="学习交流"><a href="#学习交流" class="headerlink" title="学习交流"></a>学习交流</h1><p>这里给出本人的iOS技术交流群，有兴趣探讨技术问题的小伙伴们可以加群交流</p>
<p>1群 173499350<br>2群 532084214</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;学习函数响应式编程已经接近两个月的时间。说实话坚持下来实在不易。两个月的时间看过近150篇博文，算下来啃下来一本千页的技术书籍也差不多。不过随着知识面的拓广，学习起来也更加顺利。本篇文章主要整理下自己收集的学习路线。其中包括了函数式编程的
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://valiantcat.com/tags/ReactiveCocoa/"/>
    
      <category term="RXSwift" scheme="http://valiantcat.com/tags/RXSwift/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa和RXSwift速查表</title>
    <link href="http://valiantcat.com/2016/07/22/ReactiveCocoa%E5%92%8CRXSwift%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://valiantcat.com/2016/07/22/ReactiveCocoa和RXSwift速查表/</id>
    <published>2016-07-22T06:44:22.000Z</published>
    <updated>2017-03-13T03:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>在经历两个月漫长的学习时间之后，对ReactiveCocoa和RXSwift等函数响应式编程框架的学习已经有了一个非常清晰的概念。不过面对那么多的API和速记方法，脑袋实在记不住太多好用的小技巧。特在此整理了速查表。方便日后学习使用。</p>
<p>期中RAC-OC语言部分感谢 <a href="http://www.jianshu.com/p/a4fefb434652?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">iOS ReactiveCocoa 最全常用API整理（可做为手册查询）</a>作者提供的整理。加上了自己的一些补充。</p>
<p>下面是速记表</p>
<hr>
<h1 id="reactivecocoa-objective-c部分"><a href="#ReactiveCocoa-Objective-C部分" class="headerlink" title="ReactiveCocoa-Objective-C部分"></a>ReactiveCocoa-Objective-C部分</h1><p><img src="http://ompeszjl2.bkt.clouddn.com/ReactiveCocoa%E5%92%8CRXSwift%E9%80%9F%E6%9F%A5%E8%A1%A8/ReactiveCocoa-Objective-C.png" alt="ReactiveCocoa-Objective-C"></p>
<hr>
<h1 id="reactivecocoa-swift部分"><a href="#ReactiveCocoa-Swift部分" class="headerlink" title="ReactiveCocoa-Swift部分"></a>ReactiveCocoa-Swift部分</h1><p><img src="http://ompeszjl2.bkt.clouddn.com/ReactiveCocoa%E5%92%8CRXSwift%E9%80%9F%E6%9F%A5%E8%A1%A8/ReactiveCocoaV4.x-Swift.png" alt="ReactiveCocoa-Swift"></p>
<hr>
<h1 id="rxswift部分"><a href="#RXSwift部分" class="headerlink" title="RXSwift部分"></a>RXSwift部分</h1><p><img src="http://ompeszjl2.bkt.clouddn.com/ReactiveCocoa%E5%92%8CRXSwift%E9%80%9F%E6%9F%A5%E8%A1%A8/RXSwift.png" alt="RXSwift"></p>
<hr>
<h1 id="速查表原文地址"><a href="#速查表原文地址" class="headerlink" title="速查表原文地址"></a>速查表原文地址</h1><p>在学习过程中当然会有疏漏，所以把有Xmind制作的脑图放在<a href="https://github.com/ValiantCat/FRPCheatSheeta" target="_blank" rel="external">Github</a>上，有疑问的活理解错误的地方，请回复或指正，以便后续不断更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h1&gt;&lt;p&gt;在经历两个月漫长的学习时间之后，对ReactiveCocoa和RXSwift等函数响应式编程框架的学习已经有了一个非常清晰的概念。不过面对那
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://valiantcat.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa-Swift部分入门指南-Signal</title>
    <link href="http://valiantcat.com/2016/07/21/ReactiveCocoa-Swift%E9%83%A8%E5%88%86%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-Signal/"/>
    <id>http://valiantcat.com/2016/07/21/ReactiveCocoa-Swift部分入门指南-Signal/</id>
    <published>2016-07-21T03:00:44.000Z</published>
    <updated>2017-03-13T05:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习过ReactiCocoa(以下简称RAC)的同学一般都会使用Objective-C的部分，不过RAC3之后支持了Swift，目前RAC3.x支持的是Swift1.x系列，RAC4支持的是Swift2.x系列。今天花了一点时间学习了下Swift部分示例代码。这里做些记录。Swift是支持playground，可以使用Markdown编写文档，并且所见即所得的界面方便学习。更可以插入图片。方便阅读。</p>
<!-- toc -->
<ul>
<li><a href="#学习知识必备">学习知识必备</a></li>
<li><a href="#start">Start</a></li>
<li><a href="#playgroundutility">PlaygroundUtility</a></li>
<li><a href="#signal">Signal</a><ul>
<li><a href="#subscription">Subscription</a></li>
<li><a href="#empty">empty</a></li>
<li><a href="#never">Never</a></li>
</ul>
</li>
<li><a href="#operators">Operators</a><ul>
<li><a href="#uniquevalues-唯一值">uniqueValues 唯一值</a></li>
<li><a href="#map">map</a></li>
<li><a href="#maperror">mapError</a></li>
<li><a href="#filter">filter</a></li>
<li><a href="#ignorenil">ignoreNil</a></li>
<li><a href="#take">take</a></li>
<li><a href="#collect">collect</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="学习知识必备"><a href="#学习知识必备" class="headerlink" title="学习知识必备"></a>学习知识必备</h1><p>默认你已经学过RAC-OC部分， Swift语言，并对Monad，functional Programming有些简单的了解，或者，如果你学习了RXSwift更好。</p>
<h1 id="start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><pre><code>1.    git clone  git@github.com:ReactiveCocoa/ReactiveCocoa.git
    •    执行script/bootstrap 脚本
    •    如果你安装了 [Cartheage](https://github.com/Carthage/Carthage) 使用  carthage checkout
2.    打开 ReactiveCocoa.xcworkspace
3.    编译 Result-Mac scheme
4.    编译 ReactiveCocoa-Mac scheme
5.    在workSpace目录中打开ReactiveCocoa.playground
6.    Choose View &gt; Show Debug Area、
</code></pre><h1 id="playgroundutility"><a href="#PlaygroundUtility" class="headerlink" title="PlaygroundUtility"></a>PlaygroundUtility</h1><p>先来观察一下这个里面有两个方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">scopedExample</span><span class="params">(exampleDescription: String, <span class="number">_</span> action: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">	<span class="built_in">print</span>(<span class="string">"\n--- \(exampleDescription) ---\n"</span>)</div><div class="line">	action()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Example</span>(<span class="type">String</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>scopedExample 方便测试，并分割日志输出，Error也是为了测试方便。</p>
<h1 id="signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h1><p>一个<code>Signal</code>类型的实例，代表了一个有时序的并且可以被<code>观察</code> (类似订阅)的<code>事件流</code></p>
<p>信号通常被用来表示正在进行中的事件流，比如<code>通知</code>，<code>用户输入等</code>。用户(或者只要能造成事件的东西)产生的事件发送或者被接受，事件就被传递到信号上，并且被<code>推送</code>(push -Driven)到任何观察者哪里，并且所有观察者都是同时收到这些事件。</p>
<p>如果你想访问一系列的事件，就必须<code>观察</code>一个信号，观察一个信号并不会触发任何附作用，可以这样理解。信号是由生产者生产和推动(push)的，消费者(观察者)是不会对事件的生命周期有任何影响。在观察一个信号时，发送了什么事件，只能对这个事件做操作，因为信号是有时序的，不能随机的访问其他事件。</p>
<p>信号可以通过原函数去操作，比如 <code>filter</code>，<code>map</code>，<code>reduce</code>，也可以同时操作多个信号如<code>zip</code>，这些原函数只在 nextEvents生效(也就是对 comlete，failure等不生效)。<br>在一个信号的生命周期里，可以发送无数次的NextEvents事件，直到他们被终结，类似compleye，Faied，InterRuppet。终止事件没有数据值，所以他们必须被单独处理。</p>
<h2 id="subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p>一个信号通常被用来表示正在进行中的事件流,有时候他们被叫做热信号，这意味这订阅者可以错过一些在它订阅前发送的事件。订阅一个信号不会触发任何附作用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">        scopedExample(<span class="string">"Subscription"</span>) &#123;</div><div class="line">            <span class="comment">// Signal.pipe is a way to manually control a signal. the returned observer can be used to send values to the signal</span></div><div class="line">            <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NonError</span>&gt;.pipe()</div><div class="line"></div><div class="line">            <span class="keyword">let</span> subscriber1 = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NonError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber 1 received \($0)"</span>) &#125;)</div><div class="line">            <span class="keyword">let</span> subscriber2 = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NonError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber 2 received \($0)"</span>) &#125;)</div><div class="line"></div><div class="line">            <span class="built_in">print</span>(<span class="string">"Subscriber 1 subscribes to the signal"</span>)</div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(observer)"</span>)</div><div class="line">            signal.observe(subscriber1)</div><div class="line"></div><div class="line">            <span class="built_in">print</span>(<span class="string">"Send value `10` on the signal"</span>)</div><div class="line">            <span class="comment">// subscriber1 will receive the value</span></div><div class="line">            observer.sendNext(<span class="number">10</span>)</div><div class="line"></div><div class="line">            <span class="built_in">print</span>(<span class="string">"Subscriber 2 subscribes to the signal"</span>)</div><div class="line">            <span class="comment">// Notice how nothing happens at this moment, i.e. subscriber2 does not receive the previously sent value</span></div><div class="line">            signal.observe(subscriber2)</div><div class="line"></div><div class="line">            <span class="built_in">print</span>(<span class="string">"Send value `20` on the signal"</span>)</div><div class="line">            <span class="comment">// Notice that now, subscriber1 and subscriber2 will receive the value</span></div><div class="line">            observer.sendNext(<span class="number">20</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">--- <span class="type">Subscription</span> ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> <span class="number">1</span> subscribes to the signal</div><div class="line"><span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NonError</span>&gt;(action: (<span class="type">Function</span>))</div><div class="line"><span class="type">Send</span> value `<span class="number">10</span>` on the signal</div><div class="line"><span class="type">Subscriber</span> <span class="number">1</span> received <span class="number">10</span></div><div class="line"><span class="type">Subscriber</span> <span class="number">2</span> subscribes to the signal</div><div class="line"><span class="type">Send</span> value `<span class="number">20</span>` on the signal</div><div class="line"><span class="type">Subscriber</span> <span class="number">1</span> received <span class="number">20</span></div><div class="line"><span class="type">Subscriber</span> <span class="number">2</span> received <span class="number">20</span></div></pre></td></tr></table></figure>
<p>因为Swift有泛型的存在，这样的话我们可以把Signal当作任何数据类型的容器，而不是像OC中利用上帝类型(id)。更加方便传递数据。</p>
<p>首先我们通过Siganl.pipe()创建了一个信号和一个观察者。<br>奇怪的是，在RACOC部分中，我们很少主动创建观察者，我们通常直接订阅信号就可以。<br>在Siwft中，通过pipe创建的信号是个热信号，类似与OC中的RACSubject系列，在RACSubject继承自RACSiganl又继承自RACStream，RACStream是一个Monad,它可以代表数据和数据的一系列的操作如<code>map</code>,<code>flattenMap</code>,<code>bind</code><br>RACSubject又遵守了RACSubscriber协议，这个协议定义了可以发送数据的操作。<br>所以RACSubject即是一个信号，又是一个观察者。</p>
<p>在Swift部分的实现中，Signal并没有实现发送数据的方法。所以它需要一个内部的Observer去发送数据。所以它被pipe直接返回，</p>
<p>在外部我们需要自己实例化一个Observer观察者。去观察(订阅)事件，</p>
<p>可能在你查看pipe的实现的时候并不太好理解。把尾随闭包补全相对好理解点。</p>
<p><em>做个总结</em></p>
<ol>
<li>RACOC中：<blockquote>
<p> RACSubject = RACSignal + RACSubscriper<br>在订阅的时候，订阅者被放在了RACSubject内部存放，我们只需要去关注订阅的block实现即可。</p>
</blockquote>
</li>
<li>RACSwift中:<blockquote>
<p> Signal：Just is a Signal<br> 所以需要一个内部观者者去充当发送数据的工具。外部的订阅需要自己手动实例观察者</p>
</blockquote>
</li>
<li>热信号：<blockquote>
<p> 由于pipe方法返回的是热信号，所以一个订阅者会错过在订阅之前发送的事件。</p>
</blockquote>
</li>
</ol>
<h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><p>空信号直接发送一个interrupted事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">        scopedExample(<span class="string">"`empty`"</span>) &#123;</div><div class="line">            <span class="keyword">let</span> emptySignal = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NonError</span>&gt;.empty</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> observer = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NonError</span>&gt;(</div><div class="line">                failed: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"error not called"</span>) &#125;,</div><div class="line">                completed: &#123; <span class="built_in">print</span>(<span class="string">"completed not called"</span>) &#125;,</div><div class="line">                interrupted: &#123; <span class="built_in">print</span>(<span class="string">"interrupted called"</span>) &#125;,</div><div class="line">                next: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"next not called"</span>) &#125;</div><div class="line">            )</div><div class="line">            </div><div class="line">            emptySignal.observe(observer)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">--- `empty` ---</div><div class="line"></div><div class="line">interrupted called</div></pre></td></tr></table></figure>
<h2 id="never"><a href="#Never" class="headerlink" title="Never"></a>Never</h2><p>一个never信号不会发送任何事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`never`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> neverSignal = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.never</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> observer = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(</div><div class="line">        failed: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"error not called"</span>) &#125;,</div><div class="line">        completed: &#123; <span class="built_in">print</span>(<span class="string">"completed not called"</span>) &#125;,</div><div class="line">        interrupted: &#123; <span class="built_in">print</span>(<span class="string">"interrupted not called"</span>) &#125;,</div><div class="line">        next: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"next not called"</span>) &#125;</div><div class="line">    )</div><div class="line">    </div><div class="line">    neverSignal.observe(observer)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- `never` ---</div></pre></td></tr></table></figure>
<h1 id="operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><h2 id="uniquevalues-唯一值"><a href="#uniqueValues-唯一值" class="headerlink" title="uniqueValues 唯一值"></a>uniqueValues 唯一值</h2><p>仅从集合中发送一次相同事件—类似与arrryQueue变成了SetQueue</p>
<blockquote>
<p>注意：这会造成被发送的值被保留下来，用于以后发送的时候来检查是否重复，你可以编写一个函数来过滤重复值，这样可以减少内存消耗。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`uniqueValues`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.pipe()</div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received \($0)"</span>) &#125; )</div><div class="line">    <span class="keyword">let</span> uniqueSignal = signal.uniqueValues()</div><div class="line"></div><div class="line">    uniqueSignal.observe(subscriber)</div><div class="line">    observer.sendNext(<span class="number">1</span>)</div><div class="line">    observer.sendNext(<span class="number">2</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">    observer.sendNext(<span class="number">4</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">    observer.sendNext(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `uniqueValues` ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> received <span class="number">1</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">2</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">3</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">4</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">5</span></div></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>把每一个发送的值转换成新的值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`map`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.pipe()</div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received \($0)"</span>) &#125; )</div><div class="line">    <span class="keyword">let</span> mappedSignal = signal.<span class="built_in">map</span> &#123; $<span class="number">0</span> * <span class="number">2</span> &#125;</div><div class="line"></div><div class="line">    mappedSignal.observe(subscriber)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Send value `10` on the signal"</span>)</div><div class="line">    observer.sendNext(<span class="number">10</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `<span class="built_in">map</span>` ---</div><div class="line"></div><div class="line"><span class="type">Send</span> value `<span class="number">10</span>` on the signal</div><div class="line"><span class="type">Subscriber</span> received <span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="maperror"><a href="#mapError" class="headerlink" title="mapError"></a>mapError</h2><p>把收到的error值变成新的error值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`mapError`"</span>) &#123;    </div><div class="line">        <span class="keyword">let</span> userInfo = [<span class="type">NSLocalizedDescriptionKey</span>: <span class="string">"🔥"</span>]</div><div class="line">        <span class="keyword">let</span> code = error.code + <span class="number">10000</span></div><div class="line">        <span class="keyword">let</span> mappedError = <span class="type">NSError</span>(domain: <span class="string">"com.reactivecocoa.errordomain"</span>, code: code, userInfo: userInfo)</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NSError</span>&gt;.pipe()</div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NSError</span>&gt;(failed: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received error: \($0)"</span>) &#125; )</div><div class="line">    <span class="keyword">let</span> mappedErrorSignal = signal.mapError &#123; (error:<span class="type">NSError</span>) -&gt; <span class="type">NSError</span> <span class="keyword">in</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> mappedError</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mappedErrorSignal.observe(subscriber)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Send error `NSError(domain: \"com.reactivecocoa.errordomain\", code: 4815, userInfo: nil)` on the signal"</span>)</div><div class="line">    observer.sendFailed(<span class="type">NSError</span>(domain: <span class="string">"com.reactivecocoa.errordomain"</span>, code: <span class="number">4815</span>, userInfo: <span class="literal">nil</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- `mapError` ---</div><div class="line"></div><div class="line"><span class="type">Send</span> error `<span class="type">NSError</span>(domain: <span class="string">"com.reactivecocoa.errordomain"</span>, code: <span class="number">4815</span>, userInfo: <span class="literal">nil</span>)` on the signal</div><div class="line"><span class="type">Subscriber</span> received error: <span class="type">Error</span> <span class="type">Domain</span>=com.reactivecocoa.errordomain <span class="type">Code</span>=<span class="number">14815</span> <span class="string">"🔥"</span> <span class="type">UserInfo</span>=&#123;<span class="type">NSLocalizedDescription</span>=🔥&#125;</div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>用于过滤一些值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`filter`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.pipe()</div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received \($0)"</span>) &#125; )</div><div class="line">    <span class="comment">// subscriber will only receive events with values greater than 12</span></div><div class="line">    <span class="keyword">let</span> filteredSignal = signal.<span class="built_in">filter</span> &#123; $<span class="number">0</span> &gt; <span class="number">12</span> ? <span class="literal">true</span> : <span class="literal">false</span> &#125;</div><div class="line"></div><div class="line">    filteredSignal.observe(subscriber)</div><div class="line">    observer.sendNext(<span class="number">10</span>)</div><div class="line">    observer.sendNext(<span class="number">11</span>)</div><div class="line">    observer.sendNext(<span class="number">12</span>)</div><div class="line">    observer.sendNext(<span class="number">13</span>)</div><div class="line">    observer.sendNext(<span class="number">14</span>)</div><div class="line">&#125;</div><div class="line">--- `<span class="built_in">filter</span>` ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> received <span class="number">13</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">14</span></div></pre></td></tr></table></figure>
<h2 id="ignorenil"><a href="#ignoreNil" class="headerlink" title="ignoreNil"></a>ignoreNil</h2><p>在发送的值为可选类型中：如果有值，把值解包，如果是nil 丢弃掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`ignoreNil`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>?, <span class="type">NoError</span>&gt;.pipe()</div><div class="line">    <span class="comment">// note that the signal is of type `Int?` and observer is of type `Int`, given we're unwrapping</span></div><div class="line">    <span class="comment">// non-`nil` values</span></div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received \($0)"</span>) &#125; )</div><div class="line">    <span class="keyword">let</span> ignoreNilSignal = signal.ignoreNil()</div><div class="line"></div><div class="line">    ignoreNilSignal.observe(subscriber)</div><div class="line">    observer.sendNext(<span class="number">1</span>)</div><div class="line">    observer.sendNext(<span class="literal">nil</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">&#125;</div><div class="line">--- `ignoreNil` ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> received <span class="number">1</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="take"><a href="#take" class="headerlink" title="take"></a>take</h2><p>take(num)只取前num此值的信号</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`take`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.pipe()</div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received \($0)"</span>) &#125; )</div><div class="line">    <span class="keyword">let</span> takeSignal = signal.take(<span class="number">2</span>)</div><div class="line"></div><div class="line">    takeSignal.observe(subscriber)</div><div class="line">    observer.sendNext(<span class="number">1</span>)</div><div class="line">    observer.sendNext(<span class="number">2</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">    observer.sendNext(<span class="number">4</span>)</div><div class="line">&#125;</div><div class="line">--- `take` ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> received <span class="number">1</span></div><div class="line"><span class="type">Subscriber</span> received <span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h2><p>在发送complete事件之后，观察者会收到一个由之前事件组成的数组，</p>
<blockquote>
<p>注意: 如果在发送cimplete事件的时候，没有任何事件发送，观察者会收到一个空的数组</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`collect`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (signal, observer) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.pipe()</div><div class="line">    <span class="comment">// note that the signal is of type `Int` and observer is of type `[Int]` given we're "collecting"</span></div><div class="line">    <span class="comment">// `Int` values for the lifetime of the signal</span></div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;[<span class="type">Int</span>], <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber received \($0)"</span>) &#125; )</div><div class="line">    <span class="keyword">let</span> collectSignal = signal.collect()</div><div class="line"></div><div class="line">    collectSignal.observe(subscriber)</div><div class="line">    observer.sendNext(<span class="number">1</span>)</div><div class="line">    observer.sendNext(<span class="number">2</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">    observer.sendNext(<span class="number">4</span>)</div><div class="line">    observer.sendCompleted()</div><div class="line">&#125;</div><div class="line">--- `collect` ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> received [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<hr>
<p>Signal大致讲解到这里结束了。给自己挖个坑，下一篇整理下<a href="http://valiantcat.com/2016/07/20/ReactiveCocoa-Swift%E9%83%A8%E5%88%86%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-SignalProducer/">SignalProduce</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习过ReactiCocoa(以下简称RAC)的同学一般都会使用Objective-C的部分，不过RAC3之后支持了Swift，目前RAC3.x支持的是Swift1.x系列，RAC4支持的是Swift2.x系列。今天花了一点时间学习了下Swift部分示例代码。这里做些记录。
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://valiantcat.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa-Swift部分入门指南-SignalProducer</title>
    <link href="http://valiantcat.com/2016/07/20/ReactiveCocoa-Swift%E9%83%A8%E5%88%86%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-SignalProducer/"/>
    <id>http://valiantcat.com/2016/07/20/ReactiveCocoa-Swift部分入门指南-SignalProducer/</id>
    <published>2016-07-20T04:19:33.000Z</published>
    <updated>2017-03-13T05:28:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习过ReactiCocoa(以下简称RAC)的同学一般都会使用Objective-C的部分，不过RAC3之后支持了Swift，目前RAC3.x支持的是Swift1.x系列，RAC4支持的是Swift2.x系列。今天花了一点时间学习了下Swift部分示例代码。这里做些记录。Swift是支持playground，可以使用Markdown编写文档，并且所见即所得的界面方便学习。更可以插入图片。方便阅读。</p>
<!-- toc -->
<ul>
<li><a href="#学习知识必备">学习知识必备</a></li>
<li><a href="#playgroundutility">PlaygroundUtility</a></li>
<li><a href="#signalproducer">SignalProducer</a><ul>
<li><a href="#subscription">Subscription</a></li>
<li><a href="#empty">Empty</a></li>
<li><a href="#never">Never</a></li>
<li><a href="#buffer">buffer</a></li>
<li><a href="#startwithsignal">startWithSignal</a></li>
<li><a href="#startwithnext">startWithNext</a></li>
<li><a href="#startwithcompleted">startWithCompleted</a></li>
<li><a href="#startwithfailed">startWithFailed</a></li>
<li><a href="#startwithinterrupted">startWithInterrupted</a></li>
</ul>
</li>
<li><a href="#operators">operators</a><ul>
<li><a href="#lift">lift</a></li>
<li><a href="#map">map</a></li>
<li><a href="#maperror">mapError</a></li>
<li><a href="#filter">filter</a></li>
<li><a href="#take">take</a></li>
<li><a href="#observeon">observeOn</a></li>
<li><a href="#collect">collect</a></li>
<li><a href="#collectcount">collect(count:)</a></li>
<li><a href="#collectpredicate-matching-values-inclusively">collect(predicate:) matching values inclusively</a></li>
<li><a href="#collectpredicate-matching-values-exclusively">collect(predicate:) matching values exclusively</a></li>
<li><a href="#combinelatestwith">combineLatestWith</a></li>
<li><a href="#skip">skip</a></li>
<li><a href="#materialize">materialize</a></li>
<li><a href="#sampleon">sampleOn</a></li>
<li><a href="#combineprevious">combinePrevious</a></li>
<li><a href="#scan">scan</a></li>
<li><a href="#reduce">reduce</a></li>
<li><a href="#skiprepeats">skipRepeats</a></li>
<li><a href="#skipwhile">skipWhile</a></li>
<li><a href="#takeuntilreplacement">takeUntilReplacement</a></li>
<li><a href="#takelast">takeLast</a></li>
<li><a href="#ignorenil">ignoreNil</a></li>
<li><a href="#zipwith">zipWith</a></li>
<li><a href="#times">times</a></li>
<li><a href="#retry">retry</a></li>
<li><a href="#then">then</a></li>
<li><a href="#replaylazily">replayLazily</a></li>
<li><a href="#flatmaplatest">flatMap(.Latest)</a></li>
<li><a href="#flatmaperror">flatMapError</a></li>
<li><a href="#samplewith">sampleWith</a></li>
<li><a href="#logevents">logEvents</a></li>
</ul>
</li>
<li><a href="#reference">Reference</a></li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="学习知识必备"><a href="#学习知识必备" class="headerlink" title="学习知识必备"></a>学习知识必备</h1><p>默认你已经学过RAC-OC部分， Swift语言，并对Monad，functional Programming有些简单的了解，或者，如果你学习了RXSwift更好。</p>
<p>#Start </p>
<pre><code>1.    git clone  git@github.com:ReactiveCocoa/ReactiveCocoa.git
    •    执行   script/bootstrap 脚本
    •    如果你安装了 [Cartheage](https://github.com/Carthage/Carthage) 使用  carthage checkout
2.    打开 ReactiveCocoa.xcworkspace
3.    编译 Result-Mac scheme
4.    编译 ReactiveCocoa-Mac scheme
5.    在workSpace目录中打开ReactiveCocoa.playground
6.    Choose View &gt; Show Debug Area
</code></pre><h1 id="playgroundutility"><a href="#PlaygroundUtility" class="headerlink" title="PlaygroundUtility"></a>PlaygroundUtility</h1><p>先来观察一下这个里面有两个方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">scopedExample</span><span class="params">(exampleDescription: String, <span class="number">_</span> action: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">	<span class="built_in">print</span>(<span class="string">"\n--- \(exampleDescription) ---\n"</span>)</div><div class="line">	action()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Error</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Example</span>(<span class="type">String</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>scopedExample 方便测试，并分割日志输出，Error也是为了测试方便。</p>
<h1 id="signalproducer"><a href="#SignalProducer" class="headerlink" title="SignalProducer"></a>SignalProducer</h1><p>一个信号发生器，是SignalProducer类型的实例，它可以创建信号（signals）并施加附作用（side effects）。</p>
<p>信号发生器用来表示操作或者任务，比如网络请求，每一次对它调用start()将会生成一个新的潜在操作，并允许调用者观察它的结果。还有一个startWithSignal()方法，会给出产生的信号，允许在必要的情况下被监听多次。</p>
<p>根据start()方法的动作方式，被同一个信号发生器生成的信号可能会有不同的事件顺序或版本，甚至事件流完全不一样！和普通的信号不同，在观察者连接上之前，信号发生器不会开始工作（也就没有事件会生成），并且在每一个新的监听器连接上时其工作都会重新开始<code>一个单独的工作流</code>。</p>
<p>启动一个信号发生器会返回一个销毁器（disposable，我也不知道怎么翻译合适），它可用来打断或取消被生成信号的工作。</p>
<p>和信号一样，信号生成器可以通过map、filter等原函数操作。使用lift方法，所有信号的原函数可以被提升成为以信号生成器为对象的操作。除此以外，还有一些用来控制何时与如何启动信号生成器的原函数，比如times。</p>
<blockquote>
<p>补充，这段我是参考自<a href="http://www.jianshu.com/p/617063a81136" target="_blank" rel="external">ReactiveCocoa 4 图解之六——信号发生器（SignalProducer）</a>,不过我觉得说的相当之晦涩，在学习这部份的时候，我已经学习了，RAC-OC部分，RXSwift，冷热信号等概念。突然出了一个SignalProducer的概念会让读者很难理解，其实很容易就发现，SignalProducer会带来附作用(冷信号)，Signal不会带来副作用(热信号)，那他们就很好理解了，SignalProducer类似RACOC中的RACDynamicSignal，Signal类似RACSubject。<br>通过lift函数可以让热信号转变为冷信号。<br>如果想学习Signal部分参考文章底部链接</p>
</blockquote>
<h2 id="subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><p>一个信号生成器代表了一种可以在需要的时候才被启动的操作(不像Signal是自启动的)，这种信号是冷信号，在刚开始这个信号的状态也为冷(未激活)， 既然是冷信号，那么就意味这一个观察者不会错过任何被信号生成器发出的值。</p>
<blockquote>
<p>补充:  像signal 是创建的时候状态为cold(理解为未激活) ，被订阅时状态为hot    (理解为激活)。<br> 但是冷信号和热信号与状态为冷热是两个不同的概念。冷信号会带来附作用，热信号不会<br>这里我把副作用(side effect) 理解为附作用，有时候这是一个很必要的附加操作，并不一定都是无益的，不然就没有存在的价值了。<br>如果读者觉得理解的不对，请指出后续会继续修改。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"Subscription"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> producer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; &#123; observer, <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"New subscription, starting operation"</span>)</div><div class="line">        observer.sendNext(<span class="number">1</span>)</div><div class="line">        observer.sendNext(<span class="number">2</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> subscriber1 = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber 1 received \($0)"</span>) &#125;)</div><div class="line">    <span class="keyword">let</span> subscriber2 = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(next: &#123; <span class="built_in">print</span>(<span class="string">"Subscriber 2 received \($0)"</span>) &#125;)</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscriber 1 subscribes to producer"</span>)</div><div class="line">    producer.start(subscriber1)</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Subscriber 2 subscribes to producer"</span>)</div><div class="line">    <span class="comment">// Notice, how the producer will start the work again</span></div><div class="line">    producer.start(subscriber2)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- <span class="type">Subscription</span> ---</div><div class="line"></div><div class="line"><span class="type">Subscriber</span> <span class="number">1</span> subscribes to producer</div><div class="line"><span class="type">New</span> subscription, starting operation</div><div class="line"><span class="type">Subscriber</span> <span class="number">1</span> received <span class="number">1</span></div><div class="line"><span class="type">Subscriber</span> <span class="number">1</span> received <span class="number">2</span></div><div class="line"><span class="type">Subscriber</span> <span class="number">2</span> subscribes to producer</div><div class="line"><span class="type">New</span> subscription, starting operation</div><div class="line"><span class="type">Subscriber</span> <span class="number">2</span> received <span class="number">1</span></div><div class="line"><span class="type">Subscriber</span> <span class="number">2</span> received <span class="number">2</span></div></pre></td></tr></table></figure>
<blockquote>
<p>像不像是RACDynamicSignal的创建方式，这不过不同与Sinal的是 这里的发送信号的观察者是在内部通过 Signal.pipe() 生成的，不需要外部创建。<br>SignalProduce是冷信号，任何一个订阅者/观察者都不会错过任何事件<br>start方法类似与Signal的 signal.observe()方法，只不过Signal的方法只有一个作用，就是关联一个观察者，而SignalProduce的start方法还多了一个激活信号的功能。</p>
</blockquote>
<h2 id="empty"><a href="#Empty" class="headerlink" title="Empty"></a>Empty</h2><p>一个会立即调用complete事件的信号生成器</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*:</span></div><div class="line"> ### `empty`</div><div class="line"> A producer for a Signal that will immediately complete without sending</div><div class="line"> any values.</div><div class="line"> */</div><div class="line">scopedExample(<span class="string">"`empty`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> emptyProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.empty</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> observer = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(</div><div class="line">        failed: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"error not called"</span>) &#125;,</div><div class="line">        completed: &#123; <span class="built_in">print</span>(<span class="string">"completed called"</span>) &#125;,</div><div class="line">        interrupted: &#123; <span class="built_in">print</span>(<span class="string">"interrupted called"</span>) &#125;,</div><div class="line">        next: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"next not called"</span>) &#125;</div><div class="line">    )</div><div class="line">    </div><div class="line">    emptyProducer.start(observer)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `empty` ---</div><div class="line"></div><div class="line">completed called</div></pre></td></tr></table></figure>
<blockquote>
<p>Signal调用的是interrup方法，暂时不知道为什么，可能是为了区分语义把。Signal是有时序的，SignalProduce是没有时序的。使用中断更合适吧。</p>
</blockquote>
<h2 id="never"><a href="#Never" class="headerlink" title="Never"></a>Never</h2><p>一个什么都不会发送的信号生成器</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*:</span></div><div class="line"> ### `never`</div><div class="line"> A producer for a Signal that never sends any events to its observers.</div><div class="line"> */</div><div class="line">scopedExample(<span class="string">"`never`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> neverProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.never</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> observer = <span class="type">Observer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(</div><div class="line">        failed: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"error not called"</span>) &#125;,</div><div class="line">        completed: &#123; <span class="built_in">print</span>(<span class="string">"completed not called"</span>) &#125;,</div><div class="line">        next: &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">"next not called"</span>) &#125;</div><div class="line">    )</div><div class="line">    </div><div class="line">    neverProducer.start(observer)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `never` ---</div></pre></td></tr></table></figure>
<h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><blockquote>
<p>创建一个事件队列可以回放已经发送的事件。</p>
<p>当一个值被发送的时候，它会被放进缓冲区内，如果缓冲区已经溢出，就会丢弃旧的值，<br>这些被缓存的值将会被保留，直到这个信号被终结。当一个信号启动的时候，如果队列里没有任何值，所有被发送的新值都会被自动转发到观察者哪里，知道观察者收到一个终止事件。</p>
<p>当一个终止事件被发送到队列中，观察者不会再收到任何值，并且这个事件不会被计算buffer的缓冲区大小，所以没有缓存的值都会被丢弃。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`buffer`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (producer, observer) = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.buffer(<span class="number">2</span>)</div><div class="line">    </div><div class="line">    observer.sendNext(<span class="number">1</span>)</div><div class="line">    observer.sendNext(<span class="number">2</span>)</div><div class="line">    observer.sendNext(<span class="number">3</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> values: [<span class="type">Int</span>] = []</div><div class="line">    producer.start &#123; event <span class="keyword">in</span></div><div class="line">        <span class="keyword">switch</span> event &#123;</div><div class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Next</span>(value):</div><div class="line">            values.append(value)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(values)</div><div class="line">    </div><div class="line">    observer.sendNext(<span class="number">4</span>)</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(values)</div><div class="line">    </div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="keyword">let</span> subscriber = <span class="type">Observer</span>&lt;<span class="type">Int</span>,<span class="type">NoError</span>&gt;(next:&#123; bufferdValue <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(bufferdValue)"</span>)</div><div class="line">    &#125;)</div><div class="line">    producer.start(subscriber)</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `buffer` ---</div><div class="line"></div><div class="line">[<span class="number">2</span>, <span class="number">3</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Buffer更像RACReplaySubject，所以Buffer应该也算一个热信号</p>
</blockquote>
<h2 id="startwithsignal"><a href="#startWithSignal" class="headerlink" title="startWithSignal"></a>startWithSignal</h2><p>通过Producer返回一个Signal，当闭包调用时返会signal开始发送事件。<br>闭包返回一个Disposable 可以用来中断Signal或者完成。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`startWithSignal`"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> started = <span class="literal">false</span></div><div class="line">    <span class="keyword">var</span> value: <span class="type">Int</span>?</div><div class="line">    </div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: <span class="number">42</span>)</div><div class="line">        .on(next: &#123;</div><div class="line">            value = $<span class="number">0</span></div><div class="line">        &#125;)</div><div class="line">        .startWithSignal &#123; signal, disposable <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(signal)</div><div class="line">            </div><div class="line">            <span class="built_in">print</span>(value) <span class="comment">// nil </span></div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(value)</div><div class="line">&#125;</div><div class="line">--- `startWithSignal` ---</div><div class="line"></div><div class="line"><span class="type">ReactiveCocoa</span>.<span class="type">Signal</span>&lt;<span class="type">Swift</span>.<span class="type">Int</span>, <span class="type">Result</span>.<span class="type">NoError</span>&gt;</div><div class="line"><span class="literal">nil</span></div><div class="line"><span class="type">Optional</span>(<span class="number">42</span>)</div></pre></td></tr></table></figure>
<h2 id="startwithnext"><a href="#startWithNext" class="headerlink" title="startWithNext"></a>startWithNext</h2><p>通过信号生成器创建一个信号，并且给这个信号内部直接构建一个观察者，在指定的闭包中会直接订阅next事件。</p>
<p>返回一个Disposable，可以中断这个信号。中断之后这个闭包不会再被调用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`startWithNext`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: <span class="number">42</span>)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `startWithNext` ---</div><div class="line"></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其实类似与OC部分的[subscribeNext: ^(id value){}],观察者不用自己构建了</p>
<p>注意： 这个订阅只能接受next事件</p>
</blockquote>
<h2 id="startwithcompleted"><a href="#startWithCompleted" class="headerlink" title="startWithCompleted"></a>startWithCompleted</h2><p>同startWithNext， 只不过只能接受complete事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`startWithCompleted`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: <span class="number">42</span>)</div><div class="line">        .startWithCompleted &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"completed called"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `startWithCompleted` ---</div><div class="line"></div><div class="line">completed called</div></pre></td></tr></table></figure>
<h2 id="startwithfailed"><a href="#startWithFailed" class="headerlink" title="startWithFailed"></a>startWithFailed</h2><p>同startWithNext， 只不过只能接受Failer事件事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`startWithFailed`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NSError</span>&gt;(error: <span class="type">NSError</span>(domain: <span class="string">"example"</span>, code: <span class="number">42</span>, userInfo: <span class="literal">nil</span>))</div><div class="line">        .startWithFailed &#123; error <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(error)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `startWithFailed` ---</div><div class="line"></div><div class="line"><span class="type">Error</span> <span class="type">Domain</span>=example <span class="type">Code</span>=<span class="number">42</span> <span class="string">"(null)"</span></div></pre></td></tr></table></figure>
<h2 id="startwithinterrupted"><a href="#startWithInterrupted" class="headerlink" title="startWithInterrupted"></a>startWithInterrupted</h2><p>同startWithNext， 只不过只能接受interrupted事件事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`startWithInterrupted`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> disposable = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.never</div><div class="line">        .startWithInterrupted &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"interrupted called"</span>)</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    disposable.dispose()</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `startWithInterrupted` ---</div><div class="line"></div><div class="line">interrupted called</div></pre></td></tr></table></figure>
<h1 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h1><h2 id="lift"><a href="#lift" class="headerlink" title="lift"></a>lift</h2><blockquote>
<p>这个相对难理解点。大致类似与RAC-OC部分中的bind函数，monad中的bind函数</p>
<p>可以理解为所有的原函数都是通过lift去实现的，接用中间信号来实现一系列的信号变换</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`lift`"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> counter = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> transform: <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; -&gt; <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; = &#123; signal <span class="keyword">in</span></div><div class="line">        counter = <span class="number">42</span></div><div class="line">        <span class="keyword">return</span> signal</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: <span class="number">0</span>)</div><div class="line">        .lift(transform)</div><div class="line">        .startWithNext &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(counter)</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `lift` ---</div><div class="line"></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>把每个值都转换为新的值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`map`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: <span class="number">1</span>)</div><div class="line">        .<span class="built_in">map</span> &#123; $<span class="number">0</span> + <span class="number">41</span> &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `<span class="built_in">map</span>` ---</div><div class="line"></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="maperror"><a href="#mapError" class="headerlink" title="mapError"></a>mapError</h2><p>把收到的error转换为新的error</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`mapError`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NSError</span>&gt;(error: <span class="type">NSError</span>(domain: <span class="string">"mapError"</span>, code: <span class="number">42</span>, userInfo: <span class="literal">nil</span>))</div><div class="line">        .mapError &#123; <span class="type">Error</span>.<span class="type">Example</span>($<span class="number">0</span>.description) &#125;</div><div class="line">        .startWithFailed &#123; error <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(error)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- `mapError` ---</div><div class="line"></div><div class="line"><span class="type">Example</span>(<span class="string">"Error Domain=mapError Code=42 \"(null)\""</span>)</div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>过滤不符合条件的值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`filter`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .<span class="built_in">filter</span> &#123; $<span class="number">0</span> &gt; <span class="number">3</span>&#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- `<span class="built_in">filter</span>` ---</div><div class="line"></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="take"><a href="#take" class="headerlink" title="take"></a>take</h2><p>take(num)  只取前几次的值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`take`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .take(<span class="number">2</span>)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `take` ---</div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="observeon"><a href="#observeOn" class="headerlink" title="observeOn"></a>observeOn</h2><p>在指定的调度器上分发事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*:</span></div><div class="line"> ### `observeOn`</div><div class="line"> Forwards all events onto the given scheduler, instead of whichever</div><div class="line"> scheduler they originally arrived upon.</div><div class="line"> */</div><div class="line">scopedExample(<span class="string">"`observeOn`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    <span class="keyword">let</span> completion = &#123; <span class="built_in">print</span>(<span class="string">"is main thread? \(NSThread.currentThread().isMainThread)"</span>) &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> #available(<span class="type">OSX</span> <span class="number">10.10</span>, *) &#123;</div><div class="line">    baseProducer</div><div class="line">        .observeOn(<span class="type">QueueScheduler</span>(qos: <span class="type">QOS_CLASS_DEFAULT</span>, name: <span class="string">"test"</span>))</div><div class="line">        .startWithCompleted(completion)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    baseProducer</div><div class="line">        .startWithCompleted(completion)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- `observeOn` ---</div><div class="line"></div><div class="line"><span class="keyword">is</span> main thread? <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h2><p>在发送完成的时候将一系列的值聚合为一个数组</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`collect()`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; &#123; observer, disposable <span class="keyword">in</span></div><div class="line">            observer.sendNext(<span class="number">1</span>)</div><div class="line">            observer.sendNext(<span class="number">2</span>)</div><div class="line">            observer.sendNext(<span class="number">3</span>)</div><div class="line">            observer.sendNext(<span class="number">4</span>)</div><div class="line">            observer.sendCompleted()</div><div class="line">        &#125;</div><div class="line">        .collect()</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `collect()` ---</div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h2 id="collectcount"><a href="#collect-count" class="headerlink" title="collect(count:)"></a>collect(count:)</h2><p>在发送数据的时候(不需要发送complete)的时候将一系列的值聚合为数组，数组的长度为count，如果又很多数据，将会返回多个数组</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`collect(count:)`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; &#123; observer, disposable <span class="keyword">in</span></div><div class="line">            observer.sendNext(<span class="number">1</span>)</div><div class="line">            observer.sendNext(<span class="number">2</span>)</div><div class="line">            observer.sendNext(<span class="number">3</span>)</div><div class="line">            observer.sendNext(<span class="number">4</span>)</div><div class="line">        observer.sendNext(<span class="number">5</span>)</div><div class="line">        </div><div class="line"><span class="comment">//            observer.sendCompleted()</span></div><div class="line">        &#125;</div><div class="line">        .collect(<span class="built_in">count</span>: <span class="number">2</span>)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">--- `collect(<span class="built_in">count</span>:)` ---</div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h2 id="collectpredicate-matching-values-inclusively"><a href="#collect-predicate-matching-values-inclusively" class="headerlink" title="collect(predicate:) matching values inclusively"></a>collect(predicate:) matching values inclusively</h2><p>通过谓词将一系列的值聚合为一个数组，注意在发送complete时候，如果前面只剩下一个值，就不需要聚合，(因为没有其他元素和最后一个元素聚合)，直接返回一个只有一个元素的数组。 如果没有数据则返回一个空数组。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`collect(predicate:)` matching values inclusively"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; &#123; observer, disposable <span class="keyword">in</span></div><div class="line"><span class="comment">//            observer.sendNext(1)</span></div><div class="line"><span class="comment">//            observer.sendNext(2)</span></div><div class="line"><span class="comment">//            observer.sendNext(3)</span></div><div class="line"><span class="comment">//            observer.sendNext(4)</span></div><div class="line">            observer.sendCompleted()</div><div class="line">        &#125;</div><div class="line">        .collect &#123; values <span class="keyword">in</span> values.<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +) == <span class="number">3</span> &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `collect(predicate:)` matching values inclusively ---</div><div class="line"></div><div class="line">[]</div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>尝试把所有数据打开，看看什么结果，</li>
<li>尝试只注释4看什么结果</li>
</ol>
</blockquote>
<h2 id="collectpredicate-matching-values-exclusively"><a href="#collect-predicate-matching-values-exclusively" class="headerlink" title="collect(predicate:) matching values exclusively"></a>collect(predicate:) matching values exclusively</h2><p>和上一个不同的是，如果谓词成功就把之前的聚合在一起。 可以理解为把成功的界限当作分隔符</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`collect(predicate:)` matching values exclusively"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; &#123; observer, disposable <span class="keyword">in</span></div><div class="line">            observer.sendNext(<span class="number">1</span>)</div><div class="line">            observer.sendNext(<span class="number">2</span>)</div><div class="line">            observer.sendNext(<span class="number">3</span>)</div><div class="line">            observer.sendNext(<span class="number">4</span>)</div><div class="line">            observer.sendNext(<span class="number">5</span>)</div><div class="line">            observer.sendCompleted()</div><div class="line">        &#125;</div><div class="line">        .collect &#123; values, next <span class="keyword">in</span> next == <span class="number">3</span> || next == <span class="number">5</span>  &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `collect(predicate:)` matching values exclusively ---</div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>] <span class="comment">// 3满足了条件所以被分开</span></div><div class="line">[<span class="number">5</span>] <span class="comment">// 5也是</span></div></pre></td></tr></table></figure>
<h2 id="combinelatestwith"><a href="#combineLatestWith" class="headerlink" title="combineLatestWith"></a>combineLatestWith</h2><p>将第一个信号生成器的values 和被聚合信号生成器的最后一个值聚合为一个<code>元组</code> 。</p>
<p>新产生的信号生成器不会发送任何值，只是转发，任何一个原来的信号被中断，这个新的信号生成器也会中断</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`combineLatestWith`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> producer1 = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    <span class="keyword">let</span> producer2 = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span> ])</div><div class="line">    </div><div class="line">    producer1</div><div class="line">        .combineLatestWith(producer2)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(value)"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `combineLatestWith` ---</div><div class="line"></div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line">(<span class="number">4</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h2 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h2><p>skip(num), 跳过num此发送的事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`skip`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> producer1 = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    </div><div class="line">    producer1</div><div class="line">        .skip(<span class="number">2</span>)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `skip` ---</div><div class="line"></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="materialize"><a href="#materialize" class="headerlink" title="materialize"></a>materialize</h2><blockquote>
<p>将被发送的值(value)变成Event<value>, 允许他们被修改。换句话说把一个值变成一个Monad (在前文中写到Event就是一个monad) </value></p>
<p>当收到一个compelet或者Failure事件，这个新的信号生成器，会发送事件并且结束。当收到一个interruped事件，这个新的信号生成器也会中断</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`materialize`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .materialize()</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `materialize` ---</div><div class="line"></div><div class="line"><span class="type">NEXT</span> <span class="number">1</span></div><div class="line"><span class="type">NEXT</span> <span class="number">2</span></div><div class="line"><span class="type">NEXT</span> <span class="number">3</span></div><div class="line"><span class="type">NEXT</span> <span class="number">4</span></div><div class="line"><span class="type">COMPLETED</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 注意 value  如果不做materialize就是Int类型</span></div><div class="line"><span class="comment">// 现在是Event&lt;Int,NoError&gt;类型，也就是一个monad</span></div></pre></td></tr></table></figure>
<h2 id="sampleon"><a href="#sampleOn" class="headerlink" title="sampleOn"></a>sampleOn</h2><blockquote>
<ol>
<li><p>当Sampler(被操作的信号生成器)发送任何事件的时候，都转发原来信号生成器的最后一个值</p>
</li>
<li><p>如果当一个sampler (被操作的信号生成器)启动是，当前的值没有被观察者，没有任何事情发生</p>
</li>
<li><p>新产生的信号生成器从源信号生成器哪里发送数据，如果两个信号生成器任何一个complete或者interrupt 新产生的都会中断</p>
</li>
</ol>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*:</span></div><div class="line"> ### `sampleOn`</div><div class="line"> Forwards the latest value from `self` whenever `sampler` sends a Next</div><div class="line"> event.</div><div class="line"> </div><div class="line"> If `sampler` fires before a value has been observed on `self`, nothing</div><div class="line"> happens.</div><div class="line"> </div><div class="line"> Returns a producer that will send values from `self`, sampled (possibly</div><div class="line"> multiple times) by `sampler`, then complete once both input producers have</div><div class="line"> completed, or interrupt if either input producer is interrupted.</div><div class="line"> */</div><div class="line">scopedExample(<span class="string">"`sampleOn`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    <span class="keyword">let</span> sampledOnProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span> ])</div><div class="line">        .<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span> () &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> newProduce = baseProducer</div><div class="line">        .sampleOn(sampledOnProducer)</div><div class="line">        </div><div class="line">      newProduce  .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `sampleOn` ---</div><div class="line"></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line">sampler发送的<span class="number">2</span>次值都被变换成baseProduce 的comlete前的最后一个值</div></pre></td></tr></table></figure>
<h2 id="combineprevious"><a href="#combinePrevious" class="headerlink" title="combinePrevious"></a>combinePrevious</h2><p>向前合并，每发送一个值就结合历史发送数据的最后一个构造成一个新的元组返回。在第一个发送时由于没有历史数据，所以combinePrevioud传递了一个默认值。当作第一次的合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(&quot;`combinePrevious`&quot;) &#123;</div><div class="line">    SignalProducer&lt;Int, NoError&gt;(values: [ 1, 2, 3, 4 ])</div><div class="line">        .combinePrevious(42)</div><div class="line">        .startWithNext &#123; value in</div><div class="line">            print(&quot;\(value)&quot;)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `combinePrevious` ---</div><div class="line"></div><div class="line">(42, 1) // 第一次没有历史记录默认值是42</div><div class="line">(1, 2) // 第二次默认记录是1 </div><div class="line">(2, 3)</div><div class="line">(3, 4)</div></pre></td></tr></table></figure>
<h2 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h2><blockquote>
<p>类似reduce，将值聚合为一个新的值，每次聚合都保留结果作为下次的默认值。首次需给出默认值。</p>
<p>每次聚合都会发送这个值</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`scan`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .scan(<span class="number">0</span>, +)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `scan` ---</div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote>
<p>和scan类似 ，区别为reduce只发送聚合后的值并且立即结束</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`reduce`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `<span class="built_in">reduce</span>` ---</div><div class="line"></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="skiprepeats"><a href="#skipRepeats" class="headerlink" title="skipRepeats"></a>skipRepeats</h2><p>跳过表达式里返回true的值，第一个值不会被跳过</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`skipWhile`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .skipWhile &#123; $<span class="number">0</span> &gt; <span class="number">2</span> &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `skipRepeats` ---</div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">// 注意并不是去重，只是两两比较，true的值被忽略</span></div></pre></td></tr></table></figure>
<h2 id="skipwhile"><a href="#skipWhile" class="headerlink" title="skipWhile"></a>skipWhile</h2><p>对每个值都去做判断，直到返回faslse，之前的值会被跳过</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`skipWhile`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .skipWhile &#123; $<span class="number">0</span> &gt; <span class="number">2</span> &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `skipWhile` ---</div><div class="line"></div><div class="line"><span class="number">1</span>  <span class="comment">// 到1 返回false  之前的值被忽略掉</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="takeuntilreplacement"><a href="#takeUntilReplacement" class="headerlink" title="takeUntilReplacement"></a>takeUntilReplacement</h2><p>在被替换的信号发生器发送信号之后，发送被替换的信号。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`takeUntilReplacement`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> (replacementSignal, incomingReplacementObserver) = <span class="type">Signal</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;.pipe()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt; &#123; incomingObserver, <span class="number">_</span> <span class="keyword">in</span></div><div class="line">        incomingObserver.sendNext(<span class="number">1</span>)</div><div class="line">        incomingObserver.sendNext(<span class="number">2</span>)</div><div class="line">        incomingObserver.sendNext(<span class="number">3</span>)</div><div class="line"><span class="comment">// 下面被替换的信号生成器发送了事件，之后就不再发送baseProducer的事件了</span></div><div class="line"><span class="comment">// 相当于被替换了</span></div><div class="line">        incomingReplacementObserver.sendNext(<span class="number">42</span>)</div><div class="line"></div><div class="line">        incomingObserver.sendNext(<span class="number">4</span>)</div><div class="line"></div><div class="line">        incomingReplacementObserver.sendNext(<span class="number">42</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> producer = baseProducer.takeUntilReplacement(replacementSignal)</div><div class="line">    </div><div class="line">    producer.startWithNext &#123; value <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(value)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">--- `takeUntilReplacement` ---</div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span>  </div><div class="line"><span class="number">42</span></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="takelast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h2><p>在发送complete事件后支取count此数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`takeLast`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .takeLast(<span class="number">2</span>)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">只取了<span class="number">2</span>次数据</div><div class="line">--- `takeLast` ---</div><div class="line"></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="ignorenil"><a href="#ignoreNil" class="headerlink" title="ignoreNil"></a>ignoreNil</h2><p>如果发送的事件是可选类型，解包这些可选类型，并且丢弃nil值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`ignoreNil`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>?, <span class="type">NoError</span>&gt;(values: [ <span class="literal">nil</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="literal">nil</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">nil</span> ])</div><div class="line">        .ignoreNil()</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `ignoreNil` ---</div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="zipwith"><a href="#zipWith" class="headerlink" title="zipWith"></a>zipWith</h2><p>压缩信号生成器，只有在两个信号都有数据发送之后，新的信号生成器才会发送数据。<br>新的数据被组合为元组。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`zipWith`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    <span class="keyword">let</span> zippedProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">42</span>, <span class="number">43</span> ])</div><div class="line">    </div><div class="line">    baseProducer</div><div class="line">        .zipWith(zippedProducer)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"\(value)"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `zipWith` ---</div><div class="line"></div><div class="line">(<span class="number">1</span>, <span class="number">42</span>)</div><div class="line">(<span class="number">2</span>, <span class="number">43</span>)</div><div class="line"></div><div class="line">后面因为第二个没有数据了所以不会在聚合了</div></pre></td></tr></table></figure>
<h2 id="times"><a href="#times" class="headerlink" title="times"></a>times</h2><p>time(count) 重复发送count数据，每次重复必须上次发送完成事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`times`"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> counter = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="type">SignalProducer</span>&lt;(), <span class="type">NoError</span>&gt; &#123; observer, disposable <span class="keyword">in</span></div><div class="line">            counter += <span class="number">1</span></div><div class="line">            observer.sendCompleted()</div><div class="line">        &#125;</div><div class="line">        .times(<span class="number">42</span>)</div><div class="line">        .start()</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(counter)</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `times` ---</div><div class="line"></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h2><p>如果收到失败事件重试retry(count)次</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`retry`"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> tries = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NSError</span>&gt; &#123; observer, disposable <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> tries == <span class="number">0</span> &#123;</div><div class="line">                tries += <span class="number">1</span></div><div class="line">                observer.sendFailed(<span class="type">NSError</span>(domain: <span class="string">"retry"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>))</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                observer.sendNext(<span class="number">42</span>)</div><div class="line">                observer.sendCompleted()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        .retry(<span class="number">1</span>)</div><div class="line">        .startWithResult &#123; result <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(result)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `retry` ---</div><div class="line"></div><div class="line">.<span class="type">Success</span>(<span class="number">42</span>)</div></pre></td></tr></table></figure>
<h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><blockquote>
<p>当第一个信号发送complete时，第二个信号被替换到信号发送线路上，如果有任何失败事件，后面的就替换失败。 </p>
<p> 第一个信号发送的所有事件都会被忽略<br>这个没有使用场景比较难理解。看图<br><img src="http://ompeszjl2.bkt.clouddn.com/ReactiveCocoa-Swift%E9%83%A8%E5%88%86%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-SignalProducer/then.png" alt="then"></p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`then`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    <span class="keyword">let</span> thenProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: <span class="number">42</span>)</div><div class="line">    </div><div class="line">    baseProducer</div><div class="line">        .then(thenProducer)</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `then` ---</div><div class="line"></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="replaylazily"><a href="#replayLazily" class="headerlink" title="replayLazily"></a>replayLazily</h2><blockquote>
<p>创建一个新的SignaProduce，内部包含了一个生产者去组播的发送事件。直到capacity(可以保留的数量)。这意味者所有的观者者看到是相同版本的值或者错误。</p>
<p>类似RAC-OC部分中的replayLazily ，底层生产者是懒加载的。第一次被观察的时候才会启动。在启动时所有的被缓存的值将会被直接发送。<br>如果你发现你需要实时的值，建议你使用Signal(热信号)代替，这个信号默认会缓存一些值，在某些时候这些缓存值无用。<br>使用方法类似SignalProducer.buffer(count)<br>这时候冷信号变成了热信号</p>
</blockquote>
<p>补充： OC部分中的replay是直接启动的，replayLazily是懒加载的，Swift部分没有直接启动的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`replayLazily`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">42</span> ])</div><div class="line">        .replayLazily(<span class="number">2</span>)</div><div class="line">    </div><div class="line">    baseProducer.startWithNext &#123; value <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    baseProducer.startWithNext &#123; value <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    baseProducer.startWithNext &#123; value <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(value)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- `replayLazily` ---</div><div class="line"></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">42</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">42</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="flatmaplatest"><a href="#flatMap-Latest" class="headerlink" title="flatMap(.Latest)"></a>flatMap(.Latest)</h2><p>将收到的每个事件 都映射为新的Producer，然后<code>摊平</code>，如果原来的producer发送失败，新产生也的立即失败。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`flatMap(.Latest)`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">        .flatMap(.<span class="type">Latest</span>) &#123; <span class="type">SignalProducer</span>(value: $<span class="number">0</span> + <span class="number">3</span>) &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `flatMap(.<span class="type">Latest</span>)` ---</div><div class="line"></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
<h2 id="flatmaperror"><a href="#flatMapError" class="headerlink" title="flatMapError"></a>flatMapError</h2><p>把收到的failure事件映射为新的Producer，并且摊平它 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scopedExample(<span class="string">"`flatMapError`"</span>) &#123;</div><div class="line">    <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NSError</span>&gt;(error: <span class="type">NSError</span>(domain: <span class="string">"flatMapError"</span>, code: <span class="number">42</span>, userInfo: <span class="literal">nil</span>))</div><div class="line">        .flatMapError &#123; <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(value: $<span class="number">0</span>.code) &#125;</div><div class="line">        .startWithNext &#123; value <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(value)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">--- `flatMapError` ---</div><div class="line"></div><div class="line"><span class="number">42</span></div></pre></td></tr></table></figure>
<h2 id="samplewith"><a href="#sampleWith" class="headerlink" title="sampleWith"></a>sampleWith</h2><p>在sampler发送nextEvents对源Producer的最后一次值组合形成一个新的元组，如果sample发送的时候，源Producer没有任何事件，则什么都不发生。</p>
<p>一旦源Producer和Sampler都任何一个发送了complete或者interruperd事件，则新产生的Producer理解结束。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*:</span></div><div class="line"> ### `sampleWith`</div><div class="line"> Forwards the latest value from `self` with the value from `sampler` as a tuple,</div><div class="line"> only when `sampler` sends a Next event.</div><div class="line"> </div><div class="line"> If `sampler` fires before a value has been observed on `self`, nothing happens.</div><div class="line"> Returns a producer that will send values from `self` and `sampler`,</div><div class="line"> sampled (possibly multiple times) by `sampler`, then complete once both</div><div class="line"> input producers have completed, or interrupt if either input producer is interrupted.</div><div class="line"> */</div><div class="line">scopedExample(<span class="string">"`sampleWith`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> producer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ])</div><div class="line">    <span class="keyword">let</span> sampler = <span class="type">SignalProducer</span>&lt;<span class="type">String</span>, <span class="type">NoError</span>&gt;(values: [ <span class="string">"a"</span>, <span class="string">"b"</span> ])</div><div class="line">				</div><div class="line">    <span class="keyword">let</span> result = producer.sampleWith(sampler)</div><div class="line">    </div><div class="line">    result.startWithNext &#123; <span class="keyword">left</span>, <span class="keyword">right</span> <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"\(left) \(right)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">--- `sampleWith` ---</div><div class="line"></div><div class="line"><span class="number">4</span> a</div><div class="line"><span class="number">4</span> b</div></pre></td></tr></table></figure>
<h2 id="logevents"><a href="#logEvents" class="headerlink" title="logEvents"></a>logEvents</h2><p>把所有收到的事件都输出一份日志。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">scopedExample(<span class="string">"`log events`"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> baseProducer = <span class="type">SignalProducer</span>&lt;<span class="type">Int</span>, <span class="type">NoError</span>&gt;(values: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">42</span> ])</div><div class="line">    </div><div class="line">    baseProducer</div><div class="line">        .logEvents(identifier: <span class="string">"Playground is fun!"</span>)</div><div class="line">        .start()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Started</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Next</span> <span class="number">1</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Next</span> <span class="number">2</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Next</span> <span class="number">3</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Next</span> <span class="number">4</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Next</span> <span class="number">42</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Completed</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Terminated</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div><div class="line">[<span class="type">Playground</span> <span class="keyword">is</span> fun!] <span class="type">Disposed</span> fileName: /<span class="keyword">var</span>/folders/d_/9kczd9ld7c3ckq_prb99wnn00000gn/<span class="type">T</span>/lldb/<span class="number">31540</span>/playground103.swift, functionName: __lldb_expr_103, lineNumber: <span class="number">811</span></div></pre></td></tr></table></figure>
<p>　</p>
<hr>
<h1 id="reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="http://www.jianshu.com/p/617063a81136" target="_blank" rel="external">ReactiveCocoa 4 图解之六——信号发生器（SignalProducer）</a></li>
<li><a href="valiantcat.com/2016/07/21/ReactiveCocoa-Swift部分入门指南-Signal/">ReactiveCocoa-Swift部分入门指南-Signal</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习过ReactiCocoa(以下简称RAC)的同学一般都会使用Objective-C的部分，不过RAC3之后支持了Swift，目前RAC3.x支持的是Swift1.x系列，RAC4支持的是Swift2.x系列。今天花了一点时间学习了下Swift部分示例代码。这里做些记录。
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://valiantcat.com/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>Swift-Code-Style</title>
    <link href="http://valiantcat.com/2016/07/14/Swift-Code-Style/"/>
    <id>http://valiantcat.com/2016/07/14/Swift-Code-Style/</id>
    <published>2016-07-14T03:29:12.000Z</published>
    <updated>2017-03-13T05:29:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近工作也比较稳定了，公司在做代码规范和组件化的跳转。 鉴于使用Objective-C的开发成员比较多， 我们架构师就整理了Objective-C的代码规范。不过作为Swift开发的老司机，也整理了一套适用与Swift的代码规范。 以后可以直接拿来用了。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#注释">注释</a><ul>
<li><a href="#文档注释">文档注释</a></li>
<li><a href="#方法注释">方法注释</a></li>
</ul>
</li>
<li><a href="#命名">命名</a><ul>
<li><a href="#protocols-协议命名">Protocols 协议命名</a></li>
<li><a href="#emumerations-枚举命名规范">Emumerations 枚举命名规范</a></li>
<li><a href="#class-prefixes类型前缀">Class Prefixes类型前缀</a></li>
<li><a href="#selector选择器">Selector选择器</a></li>
<li><a href="#generics泛型">Generics泛型</a></li>
</ul>
</li>
<li><a href="#code-formatting-代码格式">Code Formatting 代码格式</a><ul>
<li><a href="#留空白">留空白</a></li>
<li><a href="#声明类型时将冒号与标识符连在一起">声明类型时，将冒号与标识符连在一起</a></li>
<li><a href="#control-flow-控制流">Control Flow 控制流</a></li>
<li><a href="#代码块缩进">代码块缩进</a></li>
<li><a href="#early-return">Early Return</a></li>
<li><a href="#semicolons-分号">Semicolons 分号</a></li>
<li><a href="#自定义运算符的时候左右尽量各保留一个空格">自定义运算符的时候左右尽量各保留一个空格</a></li>
</ul>
</li>
<li><a href="#代码分割">代码分割</a><ul>
<li><a href="#protocolconformance-协议保持一致性">ProtocolConformance 协议保持一致性</a></li>
<li><a href="#无用的代码要删除">无用的代码要删除</a></li>
</ul>
</li>
<li><a href="#类型定义">类型定义</a><ul>
<li><a href="#更多的使用let而不是var">更多的使用let，而不是var</a></li>
<li><a href="#常量">常量</a></li>
<li><a href="#optional可选类型">Optional可选类型</a><ul>
<li><a href="#尽量不要使用强制解包">尽量不要使用强制解包</a></li>
<li><a href="#避免使用隐式可选类型">避免使用隐式可选类型</a></li>
</ul>
</li>
<li><a href="#struct-initializers-结构体初始化">Struct Initializers 结构体初始化</a></li>
<li><a href="#lazy-initialization">Lazy Initialization</a></li>
</ul>
</li>
<li><a href="#classes-and-structures-结构体和类">Classes and Structures 结构体和类</a><ul>
<li><a href="#首选struct而非class">首选struct而非class</a></li>
<li><a href="#只有在必须时才使用self">只有在必须时才使用self</a></li>
<li><a href="#对于只读的属性或者下标语法使用隐式的getter方法">对于只读的属性或者下标语法，使用隐式的getter方法</a></li>
<li><a href="#请把class默认标记为final">请把class默认标记为final</a></li>
<li><a href="#类型推断">类型推断</a></li>
<li><a href="#函数声明">函数声明</a></li>
<li><a href="#闭包表达式">闭包表达式</a></li>
</ul>
</li>
<li><a href="#syntactic-sugar语法糖">Syntactic Sugar语法糖</a></li>
<li><a href="#内存管理">内存管理</a></li>
<li><a href="#对于顶级类型函数变量定义明确的列出权限控制">对于顶级类型，函数，变量定义，明确的列出权限控制</a></li>
</ul>
<!-- tocstop -->
<!-- index-menu -->
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote>
<p>// 单行注释 / <em>多行注释</em> /</p>
<p>/// 标记注释1</p>
<p>/<em>* 标记注释2</em> /</p>
</blockquote>
<p>建议使用<a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">VVDocument-Xode插件</a></p>
<h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>以/<em>* ….</em>/ 标记， 不用再没一行开头都加*号 支持markdown书写 例如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> ## Feature Support</div><div class="line"></div><div class="line"> This class does some awesome things. It supports:</div><div class="line"></div><div class="line"> - Feature 1</div><div class="line"> - Feature 2</div><div class="line"> - Feature 3</div><div class="line"></div><div class="line"> ## Examples</div><div class="line"></div><div class="line"> Here is an example use case indented by four spaces because that indicates a</div><div class="line"> code block:</div><div class="line"></div><div class="line">     let myAwesomeThing = MyAwesomeClass()</div><div class="line">     myAwesomeThing.makeMoney()</div><div class="line"></div><div class="line"> ## Warnings</div><div class="line"></div><div class="line"> There are some things you should be careful of:</div><div class="line"></div><div class="line"> 1\. Thing one</div><div class="line"> 2\. Thing two</div><div class="line"> 3\. Thing three</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAwesomeClass</span> </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h2><p>用 - parameter注释来标记参数等</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> This does something with a `UIViewController`, perchance.</div><div class="line"> - warning: Make sure that `someValue` is `true` before running this function.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h1><p>使用可读的驼峰命名法去给<code>类</code> <code>方法</code> <code>变量</code> 命名。 <code>class</code> <code>struct</code> <code>protocol</code> <code>enum</code> 应使用大写，变量名使用小写</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">let</span> maximumWidgetCount = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WidgetContainer</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> widgetButton: <span class="type">UIButton</span></div><div class="line">  <span class="keyword">let</span> widgetHeightPercentage = <span class="number">0.85</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于全局函数，init方法 ，建议每个参数都使用外部变量，来保证可读性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dateFromString</span><span class="params">(dateString: String)</span></span> -&gt; <span class="type">NSDate</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertPointAt</span><span class="params">(column column: Int, row: Int)</span></span> -&gt; <span class="type">CGPoint</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">timedAction</span><span class="params">(afterDelay delay: NSTimeInterval, perform action: SKAction)</span></span> -&gt; <span class="type">SKAction</span>!</div><div class="line"></div><div class="line"><span class="comment">// would be called like this:</span></div><div class="line">dateFromString(<span class="string">"2014-03-14"</span>)</div><div class="line">convertPointAt(column: <span class="number">42</span>, row: <span class="number">13</span>)</div><div class="line">timedAction(afterDelay: <span class="number">1.0</span>, perform: someOtherAction)</div></pre></td></tr></table></figure>
<h2 id="protocols-协议命名"><a href="#Protocols-协议命名" class="headerlink" title="Protocols 协议命名"></a>Protocols 协议命名</h2><p>建议遵守<a href="https://swift.org/documentation/api-design-guidelines/#follow-case-conventions" target="_blank" rel="external">Apple’s API DesignGuidelines</a>使用名词来描述，如 <code>ing</code> <code>able</code> <code>ible</code> 例如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Collection</span></div><div class="line"><span class="type">WidgerFactory</span></div><div class="line"><span class="type">Equtable</span></div><div class="line"><span class="type">Resizing</span></div></pre></td></tr></table></figure>
<h2 id="emumerations-枚举命名规范"><a href="#Emumerations-枚举命名规范" class="headerlink" title="Emumerations 枚举命名规范"></a>Emumerations 枚举命名规范</h2><p>使用首字母小写的驼峰命名法给每个case命名</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> rectangle</div><div class="line">  <span class="keyword">case</span> square</div><div class="line">  <span class="keyword">case</span> rightTriangle</div><div class="line">  <span class="keyword">case</span> equilateralTriangle</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="class-prefixes类型前缀"><a href="#Class-Prefixes类型前缀" class="headerlink" title="Class Prefixes类型前缀"></a>Class Prefixes类型前缀</h2><p><del>官方建议不使用前缀，因为swift有命名空间的概念</del> 但是由于在项目开发中不可避免使用开源库，大部分使用pods管理，但是有时候需要针对需要定制功能，直接修改源码，这时候是直接将源码放在工程中，而且大部分的项目都是混编项目。可能导致命名冲突，此处还建议用LJ(Lianjia)当作命名前缀</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LJHomeViewController</span>: <span class="title">UIViewController</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h2><p>建议使用可推测的上下文环境，来创建选择器，而不是点击Xcode的Fix it ，这样会产生一个全名称 选择器</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sel = #selector(viewDidLoad)</div></pre></td></tr></table></figure>
<p>不推荐</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sel = #selector(<span class="type">ViewController</span>.viewDidLoad)</div></pre></td></tr></table></figure>
<h2 id="generics泛型"><a href="#Generics泛型" class="headerlink" title="Generics泛型"></a>Generics泛型</h2><p>泛型命名应该使用大写的驼峰命名法，，如果给一个泛型起名字其实没意义，可以使用常见的T，U，V来命名 推荐</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">Element</span>&gt; </span>&#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeTo</span>&lt;Target: OutputStream&gt;<span class="params">(<span class="keyword">inout</span> target: Target)</span></span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span>&lt;T: Comparable&gt;<span class="params">(x: T, <span class="number">_</span> y: T)</span></span> -&gt; <span class="type">T</span></div></pre></td></tr></table></figure>
<p>不推荐</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123; ... &#125;<span class="comment">//命名无意义</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeTo</span>&lt;target: OutputStream&gt;<span class="params">(<span class="keyword">inout</span> t: target)</span></span><span class="comment">// 首字母未大写</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span>&lt;Thing: Comparable&gt;<span class="params">(x: Thing, <span class="number">_</span> y: Thing)</span></span> -&gt; <span class="type">Thing</span><span class="comment">//简称即可</span></div></pre></td></tr></table></figure>
<h1 id="code-formatting-代码格式"><a href="#Code-Formatting-代码格式" class="headerlink" title="Code Formatting 代码格式"></a>Code Formatting 代码格式</h1><h2 id="留空白"><a href="#留空白" class="headerlink" title="留空白"></a>留空白</h2><ul>
<li>建议使用tabs 而不是使用空格</li>
<li>文件结束时留一行空白</li>
<li>用足够的空行把代码分割为合理的逻辑块，而不是非常紧凑</li>
<li><p>不要在一行代码结尾处留空格</p>
<ul>
<li>更不要在空行（\n）中使用缩进（\t）</li>
</ul>
</li>
</ul>
<h2 id="声明类型时将冒号与标识符连在一起"><a href="#声明类型时，将冒号与标识符连在一起" class="headerlink" title="声明类型时，将冒号与标识符连在一起"></a>声明类型时，将冒号与标识符连在一起</h2><p>当声明一个变量时冒号紧跟变量，空一格再写类型</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallBatchSustainableFairtrade</span>: <span class="title">Coffee</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> timeToCoffee: <span class="type">NSTimeInterval</span> = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeCoffee</span><span class="params">(type: CoffeeType)</span></span> -&gt; <span class="type">Coffee</span> &#123; ... &#125;</div></pre></td></tr></table></figure>
<h2 id="control-flow-控制流"><a href="#Control-Flow-控制流" class="headerlink" title="Control Flow 控制流"></a>Control Flow 控制流</h2><p>建议使用Swift范的for in 循环而不是 while or c 式for循环</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">3</span> &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Hello three times"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (index, person) <span class="keyword">in</span> attendeeList.<span class="built_in">enumerate</span>() &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"\(person) is at position #\(index)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>.<span class="built_in">stride</span>(to: items.<span class="built_in">count</span>, by: <span class="number">2</span>) &#123;</div><div class="line">  <span class="built_in">print</span>(index)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> (<span class="number">0</span>...<span class="number">3</span>).<span class="built_in">reverse</span>() &#123;   <span class="comment">//3，2，1，0</span></div><div class="line">  <span class="built_in">print</span>(index)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代码块缩进"><a href="#代码块缩进" class="headerlink" title="代码块缩进"></a>代码块缩进</h2><p>(if/else/switch/while etc.)或者method function 的大括号留在当前行，并前保留一个空格 ，能省略的不要添加 如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> user.isHappy &#123;</div><div class="line">  <span class="comment">// Do something</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// Do something else</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不推荐</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (user.isHappy )          多余空格</div><div class="line">&#123;                  换行位置不对</div><div class="line">  <span class="comment">// Do something</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// Do something else</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="early-return"><a href="#Early-Return" class="headerlink" title="Early Return"></a>Early Return</h2><p>当你遇到某些操作需要条件判断去执行，应该使用<code>防御式编程</code> 尽早返回 如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> n.isNumber <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> number1 = number1, number2 = number2, number3 = number3 <span class="keyword">else</span> &#123; <span class="built_in">fatalError</span>(<span class="string">"impossible"</span>) &#125;</div><div class="line"><span class="comment">// do something with numbers</span></div><div class="line"><span class="comment">// Use n here</span></div><div class="line"><span class="comment">//guard 理解为确保的意思，  如 确保n是一个数字</span></div></pre></td></tr></table></figure>
<p>不推荐使用if判断</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> n.isNumber &#123;</div><div class="line">    <span class="comment">// Use n here</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> number1 = number1 &#123;</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> number2 = number2 &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> number3 = number3 &#123;</div><div class="line">      <span class="comment">// do something with numbers</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">fatalError</span>(<span class="string">"impossible"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">fatalError</span>(<span class="string">"impossible"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">fatalError</span>(<span class="string">"impossible"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="semicolons-分号"><a href="#Semicolons-分号" class="headerlink" title="Semicolons 分号"></a>Semicolons 分号</h2><p>不要写分号，不要写分号，不要写分号 Swift不同于JavaScript ,详情参看 <a href="http://stackoverflow.com/questions/444080/do-you-recommend-using-semicolons-after-every-statement-in-javascript" target="_blank" rel="external">generally considered unsafe—Do you recommend using semicolons after every statement in JavaScript?</a></p>
<p>更不建议把多句代码块放在一行中</p>
<h2 id="自定义运算符的时候左右尽量各保留一个空格"><a href="#自定义运算符的时候左右尽量各保留一个空格" class="headerlink" title="自定义运算符的时候左右尽量各保留一个空格"></a>自定义运算符的时候左右尽量各保留一个空格</h2><p>如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> &lt;|(lhs: Int, rhs: Int) -&gt; <span class="title">Int</span></span></div><div class="line"><span class="title">func</span> &lt;|&lt;&lt;A&gt;<span class="params">(lhs: A, rhs: A)</span> -&gt; <span class="type">A</span></div><div class="line"><span class="comment">// 重构后</span></div><div class="line"><span class="function"><span class="keyword">func</span> &lt;| (lhs: Int, rhs: Int) -&gt; <span class="title">Int</span></span></div><div class="line"><span class="title">func</span> &lt;|&lt; &lt;A&gt;<span class="params">(lhs: A, rhs: A)</span> -&gt; <span class="type">A</span></div></pre></td></tr></table></figure>
<h1 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h1><p>使用良好的代码分割让你的代码块更具有逻辑性</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: -                   类似@parma mark -</span></div><div class="line"><span class="comment">// MARK:                      类似@parma mark</span></div></pre></td></tr></table></figure>
<h2 id="protocolconformance-协议保持一致性"><a href="#ProtocolConformance-协议保持一致性" class="headerlink" title="ProtocolConformance 协议保持一致性"></a>ProtocolConformance 协议保持一致性</h2><p>一个类型实现一个协议时建议单独声明一个扩展，保证逻辑性分离 如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewcontroller</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">  <span class="comment">// class stuff here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - UITableViewDataSource</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MyViewcontroller</span>: <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">  <span class="comment">// table view data source methods</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MARK: - UIScrollViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MyViewcontroller</span>: <span class="title">UIScrollViewDelegate</span> </span>&#123;</div><div class="line">  <span class="comment">// scroll view delegate methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不推荐实现的所有协议写在一起</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewcontroller</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UIScrollViewDelegate</span> </span>&#123;</div><div class="line">  <span class="comment">// all methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="无用的代码要删除"><a href="#无用的代码要删除" class="headerlink" title="无用的代码要删除"></a>无用的代码要删除</h2><p>无用的代码和注释要删除 ，避免给阅读代码的人造成困惑和疑问</p>
<h1 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h1><p>尽可能的使用swift自带类型，在必须的时候才做桥接 ，String-&gt; NSString , Set-&gt;NSSet</p>
<h2 id="更多的使用let而不是var"><a href="#更多的使用let，而不是var" class="headerlink" title="更多的使用let，而不是var"></a>更多的使用let，而不是var</h2><p>尽量<code>let foo = something</code> 而非 <code>var for = somthing</code></p>
<blockquote>
<p>let-有保障 并且它的值的永远不会改变，对同事也是个 清晰的标记，对于它的用法，之后的代码可以做个强而有力的推断。更容易明白代码的含义。否则的话一旦你用了 var，还要去考虑值会不会改变，这时候你就不得不人肉去检查。 <code>这样，无论何时你看到 var，就假设它会变，并找到原因。</code></p>
</blockquote>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>不建议直接命名顶级变量，建议定义在结构体或者枚举内部，用static let 声明。 可以给这些变量一个合适的命名空间</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Math</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> e  = <span class="number">2.718281828459045235360287</span></div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> pi = <span class="number">3.141592653589793238462643</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">radius * <span class="type">Math</span>.pi * <span class="number">2</span> <span class="comment">// circumference</span></div></pre></td></tr></table></figure>
<h2 id="optional可选类型"><a href="#Optional可选类型" class="headerlink" title="Optional可选类型"></a>Optional可选类型</h2><h3 id="尽量不要使用强制解包"><a href="#尽量不要使用强制解包" class="headerlink" title="尽量不要使用强制解包"></a>尽量不要使用强制解包</h3><p>对于一个可选类型<code>var foo = Type?</code> 不要使用强制解包</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foo!.doSomethind()</div></pre></td></tr></table></figure>
<p>使用<code>可选绑定</code>，或者 <code>可选链操作</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> foo = foo &#123;</div><div class="line">    <span class="comment">// Use unwrapped `foo` value in here</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// If appropriate, handle the case where the optional is nil</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="comment">// Call the function if `foo` is not nil. If `foo` is nil, ignore we ever tried to make the call</span></div><div class="line">foo?.callSomethingIfFooIsNotNil()</div></pre></td></tr></table></figure>
<h3 id="避免使用隐式可选类型"><a href="#避免使用隐式可选类型" class="headerlink" title="避免使用隐式可选类型"></a>避免使用隐式可选类型</h3><p>如果 foo 可能为 nil ，尽可能的用 let foo: FooType? 代替 let foo: FooType!（注意：一般情况下，?可以代替!）</p>
<h2 id="struct-initializers-结构体初始化"><a href="#Struct-Initializers-结构体初始化" class="headerlink" title="Struct Initializers 结构体初始化"></a>Struct Initializers 结构体初始化</h2><p>使用结构体初始化而不是CGGet。。。之类的创建方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> bounds = <span class="type">CGRect</span>(x: <span class="number">40</span>, y: <span class="number">20</span>, width: <span class="number">120</span>, height: <span class="number">80</span>)</div><div class="line"><span class="keyword">let</span> centerPoint = <span class="type">CGPoint</span>(x: <span class="number">96</span>, y: <span class="number">42</span>)</div></pre></td></tr></table></figure>
<h2 id="lazy-initialization"><a href="#Lazy-Initialization" class="headerlink" title="Lazy Initialization"></a>Lazy Initialization</h2><p>对于较大开销的初始化或者配置较多的初始化建议放在加载属性里</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> locationManager: <span class="type">CLLocationManager</span> = <span class="keyword">self</span>.makeLocationManager()</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">makeLocationManager</span><span class="params">()</span></span> -&gt; <span class="type">CLLocationManager</span> &#123;</div><div class="line">  <span class="keyword">let</span> manager = <span class="type">CLLocationManager</span>()</div><div class="line">  manager.desiredAccuracy = kCLLocationAccuracyBest</div><div class="line">  manager.delegate = <span class="keyword">self</span></div><div class="line">  manager.requestAlwaysAuthorization()</div><div class="line">  <span class="keyword">return</span> manager</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="classes-and-structures-结构体和类"><a href="#Classes-and-Structures-结构体和类" class="headerlink" title="Classes and Structures 结构体和类"></a>Classes and Structures 结构体和类</h1><h2 id="首选struct而非class"><a href="#首选struct而非class" class="headerlink" title="首选struct而非class"></a>首选struct而非class</h2><p>在非必需（比如没有生命周期）的时候使用struct，因为多态可以使用protocl实现 继承可以使用组合实现 值类型容易辨别，更可以用let去推测不可变的行为</p>
<h2 id="只有在必须时才使用self"><a href="#只有在必须时才使用self" class="headerlink" title="只有在必须时才使用self"></a>只有在必须时才使用self</h2><p>忘掉Objective-C到底时使用self.pro 还是_ivar的访问方式，对于swift内部调用properties或者method省略掉self</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> events: [<span class="type">Event</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rewrite</span><span class="params">()</span></span> &#123;</div><div class="line">        events = []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有在使用闭包或者命名冲突时再加上self</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">History</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(events: [<span class="type">Event</span>]) &#123;</div><div class="line">        <span class="keyword">self</span>.events = events</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> whenVictorious: () -&gt; () &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="keyword">self</span>.rewrite()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>只有在使用闭包时self 增强了被捕获的语义，其它时候是冗余的</p>
</blockquote>
<h2 id="对于只读的属性或者下标语法使用隐式的getter方法"><a href="#对于只读的属性或者下标语法，使用隐式的getter方法" class="headerlink" title="对于只读的属性或者下标语法，使用隐式的getter方法"></a>对于只读的属性或者下标语法，使用隐式的getter方法</h2><p>建议</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myGreatProperty: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">4</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">return</span> objects[index]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不建议完整的写法，比较繁琐</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myGreatProperty: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">get</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">get</span> &#123;</div><div class="line">        <span class="keyword">return</span> objects[index]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="请把class默认标记为final"><a href="#请把class默认标记为final" class="headerlink" title="请把class默认标记为final"></a>请把class默认标记为final</h2><p>组合通常比继承更合适，而且不用 继承意味着考虑的更加健壮</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Turn any generic type into a reference type using this Box class.</span></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">let</span> value: <span class="type">T</span></div><div class="line">  <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.value = value</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>能让系统推断的类型不要显示指明 如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Composite</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(other: Composite&lt;T&gt;)</span></span> -&gt; <span class="type">Composite</span>&lt;<span class="type">T</span>&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Composite</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">self</span>, other)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">let</span> num:<span class="type">Int</span> = <span class="number">4</span></div></pre></td></tr></table></figure>
<p>重构为</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Composite</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(other: Composite)</span></span> -&gt; <span class="type">Composite</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Composite</span>(<span class="keyword">self</span>, other)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> num = <span class="number">4</span></div></pre></td></tr></table></figure>
<p>空的字典和空数组的类型 使用<code>类型标记</code> 加强语义</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names: [<span class="type">String</span>] = []</div><div class="line"><span class="keyword">var</span> lookup: [<span class="type">String</span>: <span class="type">Int</span>] = [:]</div></pre></td></tr></table></figure>
<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数名要简短清晰，如果能保持在一行内，大括号也要保持在一行，如果不能换行并用Tab<code>\b</code>缩进</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reticulateSplines</span><span class="params">(spline: [Double])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">  <span class="comment">// reticulate code goes here</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">reticulateSplines</span><span class="params">(spline: [Double], adjustmentFactor: Double,</span></span></div><div class="line">    translateConstant: Int, comment: String) -&gt; <span class="type">Bool</span> &#123;</div><div class="line">  <span class="comment">// reticulate code goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="闭包表达式"><a href="#闭包表达式" class="headerlink" title="闭包表达式"></a>闭包表达式</h2><p>使用尾随闭包提高可读性，</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>) &#123;</div><div class="line">  <span class="keyword">self</span>.myView.alpha = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">1.0</span>,</div><div class="line">  animations: &#123;</div><div class="line">    <span class="keyword">self</span>.myView.alpha = <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  completion: &#123; finished <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>.myView.removeFromSuperview()</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>常见的闭包语义可以使用其缩略形式</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> value = numbers.<span class="built_in">map</span> &#123; $<span class="number">0</span> * <span class="number">2</span> &#125;.<span class="built_in">filter</span> &#123; $<span class="number">0</span> % <span class="number">3</span> == <span class="number">0</span> &#125;.indexOf(<span class="number">90</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> value = numbers</div><div class="line">   .<span class="built_in">map</span> &#123;$<span class="number">0</span> * <span class="number">2</span>&#125;</div><div class="line">   .<span class="built_in">filter</span> &#123;$<span class="number">0</span> &gt; <span class="number">50</span>&#125;</div><div class="line">   .<span class="built_in">map</span> &#123;$<span class="number">0</span> + <span class="number">10</span>&#125;</div></pre></td></tr></table></figure>
<h1 id="syntactic-sugar语法糖"><a href="#Syntactic-Sugar语法糖" class="headerlink" title="Syntactic Sugar语法糖"></a>Syntactic Sugar语法糖</h1><p>对于有语法糖的建议使用，提升可读性 如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deviceModels: [<span class="type">String</span>]</div><div class="line"><span class="keyword">var</span> employees: [<span class="type">Int</span>: <span class="type">String</span>]</div><div class="line"><span class="keyword">var</span> faxNumber: <span class="type">Int</span>?</div></pre></td></tr></table></figure>
<p>而不是</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deviceModels: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;</div><div class="line"><span class="keyword">var</span> employees: <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">String</span>&gt;</div><div class="line"><span class="keyword">var</span> faxNumber: <span class="type">Optional</span>&lt;<span class="type">Int</span>&gt;</div></pre></td></tr></table></figure>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>对于class类型需要注意内存管理 普通的闭包建议使用[weak self] 或者[unowned self] 对于异步的闭包建议使用 <code>[weak self]</code> and <code>guard let strongSelf = self else { return }</code>搭配使用<br><br>weak 避免出现循环引用， strongself 避免在异步回调中 捕获列表中捕获的变量被析构</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resource.request().onComplete &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] response <span class="keyword">in</span></div><div class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> strongSelf = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">  <span class="keyword">let</span> model = strongSelf.updateModel(response)</div><div class="line">  strongSelf.updateUI(model)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="对于顶级类型函数变量定义明确的列出权限控制"><a href="#对于顶级类型，函数，变量定义，明确的列出权限控制" class="headerlink" title="对于顶级类型，函数，变量定义，明确的列出权限控制"></a>对于顶级类型，函数，变量定义，明确的列出权限控制</h1><p>对于全局变量 顶级函数，类型，永远应该有着详尽的权限控制说明符</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">var</span> whoopsGlobalState: <span class="type">Int</span></div><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">struct</span> <span class="title">TheFez</span> </span>&#123;&#125;</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">doTheThings</span><span class="params">(things: [Thing])</span></span> &#123;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考自</p>
<ol>
<li><a href="https://github.com/github/swift-style-guide" target="_blank" rel="external">Github</a></li>
<li><a href="https://github.com/linkedin/swift-style-guide" target="_blank" rel="external">LinkedIn</a></li>
<li><a href="https://github.com/prolificinteractive/swift-style-guide" target="_blank" rel="external">Prolificinterative</a></li>
<li><a href="https://github.com/raywenderlich/swift-style-guide" target="_blank" rel="external">Raywenderlich</a></li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近工作也比较稳定了，公司在做代码规范和组件化的跳转。 鉴于使用Objective-C的开发成员比较多， 我们架构师就整理了Objective-C的代码规范。不过作为Swift开发的老司机，也整理了一套适用与Swift的代码规范。 以后可以直接拿来
    
    </summary>
    
    
      <category term="Swift" scheme="http://valiantcat.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>从函数调用到函数式编程</title>
    <link href="http://valiantcat.com/2016/06/03/%E4%BB%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%88%B0%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://valiantcat.com/2016/06/03/从函数调用到函数式编程/</id>
    <published>2016-06-03T09:09:21.000Z</published>
    <updated>2016-07-22T07:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="objective-c版本"><a href="#Objective-C版本" class="headerlink" title="Objective-C版本"></a>Objective-C版本</h1><ol>
<li><p>简单的block调用<br><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f4i5jsbdm7j30jq0al3zo" alt="2016-06-03_17:14:04.jpg"></p>
</li>
<li><p>链式调用<br>循序渐进的理解</p>
<blockquote>
<p> 把函数当做返回值给别人调用 ，函数的参数被调用者传递进来<br><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f4i5ofzm6ij30io07qmxx" alt="2016-06-03_17:18:33.jpg"></p>
</blockquote>
</li>
</ol>
<ol>
<li>返回值是函数，并且函数的返回值是调用者本身，可以构成链式调用<br><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f4i5pqe4xmj30ia08ddgr" alt="2016-06-03_17:19:47.jpg"></li>
</ol>
<blockquote>
<p>加个typedef，可能会更清晰点</p>
</blockquote>
<p><img src="http://ww2.sinaimg.cn/large/006tNbRwjw1f4i5svocgoj30ia08iab4" alt="2016-06-03_17:22:49.jpg"></p>
<ol>
<li>已数据流为导向的函数式编程</li>
</ol>
<p><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f4i5zkyoy2j30j70i9abq" alt="2016-06-03_17:29:15.jpg"></p>
<blockquote>
<p>画个数据流</p>
</blockquote>
<p><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f4i63hh27hj30ns0lvgo3" alt="2016-06-03_17:33:00.jpg"></p>
<h1 id="swift版本版本"><a href="#Swift版本版本" class="headerlink" title="Swift版本版本"></a>Swift版本版本</h1><ol>
<li><p>简单的函数调用<br><img src="http://ww1.sinaimg.cn/large/006tNbRwjw1f4i6bj1e6vj30ib065aaj" alt="2016-06-03_17:40:44.jpg"></p>
</li>
<li><p>链式调用<br>循序渐进的理解</p>
<blockquote>
<p> 把函数当做返回值给别人调用 ，函数的参数被调用者传递进来<br><img src="http://ww1.sinaimg.cn/large/006tNbRwjw1f4i6erefvuj30hf075q3d" alt="2016-06-03_17:43:51.jpg"></p>
</blockquote>
</li>
</ol>
<ol>
<li>返回值是函数，并且函数的返回值是调用者本身，可以构成链式调用<br><img src="http://ww3.sinaimg.cn/large/006tNbRwjw1f4i6ffyidnj30i007u0t9" alt="2016-06-03_17:44:30.jpg"></li>
</ol>
<blockquote>
<p>加个typealias，可能会更清晰点</p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/006tNbRwjw1f4i6g69ju5j30i4096dge" alt="2016-06-03_17:45:12.jpg"></p>
<ol>
<li>以数据流为导向的函数式编程</li>
</ol>
<p><img src="http://ww2.sinaimg.cn/large/006tNbRwjw1f4i6n9cb7oj30im0fn0ty" alt="2016-06-03_17:52:01.jpg"></p>
<blockquote>
<p>画个数据流</p>
</blockquote>
<p><img src="http://ww4.sinaimg.cn/large/006tNbRwjw1f4i6npae22j30n90gqwfw" alt="2016-06-03_17:52:26.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;objective-c版本&quot;&gt;&lt;a href=&quot;#Objective-C版本&quot; class=&quot;headerlink&quot; title=&quot;Objective-C版本&quot;&gt;&lt;/a&gt;Objective-C版本&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简单的block调用&lt;br&gt;&lt;im
    
    </summary>
    
    
      <category term="FunctionalProgramming" scheme="http://valiantcat.com/tags/FunctionalProgramming/"/>
    
  </entry>
  
  <entry>
    <title>大学毕业</title>
    <link href="http://valiantcat.com/2016/05/10/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A/"/>
    <id>http://valiantcat.com/2016/05/10/大学毕业/</id>
    <published>2016-05-10T03:36:11.000Z</published>
    <updated>2017-03-13T04:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上周回到了学校，参加了答辩，照了毕业证，和班里的同学吃了大学的最后一顿饭，和宿舍的兄弟们喝了2次酒(不过我没怎么喝，确实是因为之前住院心里害怕)<br> 不过说实话，我确实不怎么有感觉，毕竟大三刚开始我就只身来到北京，而且宿舍的6个兄弟，五个(PM一枚，iOS,Android程序员各一枚)都在北京(至少2-3年都在)，只剩下一个留在了郑州，不过还好我们都是河南的，过年回家都能见面。</p>
</blockquote>
<p>先来几张大一的照片<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A4.jpg" alt="军训"><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A3.jpg" alt="基友装"></p>
<p>男神宿舍合照，遗憾的是另外一个兄弟不是计算机学院的，不和我们一起<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A1.jpg" alt="合照1"><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A2.jpg" alt="合照2"><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A5.jpg" alt="合照5"></p>
<p>还有一群大屌丝<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A34.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A35.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A36.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A37.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A38.jpg" alt=""></p>
<p>期间和老婆傻傻来一张（我傻）<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A6.jpg" alt="么么哒"></p>
<hr>
<p>班级之间</p>
<p>和班长来个<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A7.jpg" alt="班长合照"><br>剩下的是班级同学了 就不写名字了<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A8.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A9.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A10.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A11.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A12.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A13.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A14.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A15.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A16.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A17.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A18.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A19.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A20.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A21.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A22.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A23.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A24.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A25.jpg" alt=""></p>
<p>全系的大合照<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A26.jpg" alt=""></p>
<p>班级的合照<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A27.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A28.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A29.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A30.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A31.jpg" alt=""><br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A32.jpg" alt=""></p>
<hr>
<p>回到自己的工作室看看，拍个全景照片<br><img src="http://ompeszjl2.bkt.clouddn.com/%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A33.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上周回到了学校，参加了答辩，照了毕业证，和班里的同学吃了大学的最后一顿饭，和宿舍的兄弟们喝了2次酒(不过我没怎么喝，确实是因为之前住院心里害怕)&lt;br&gt; 不过说实话，我确实不怎么有感觉，毕竟大三刚开始我就只身来到北京，而且宿舍的6个兄弟，五个(PM
    
    </summary>
    
    
      <category term="生活" scheme="http://valiantcat.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
